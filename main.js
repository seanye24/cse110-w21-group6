!function(){var t={228:function(t){t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}},858:function(t){t.exports=function(t){if(Array.isArray(t))return t}},506:function(t){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},926:function(t){function e(t,e,n,r,o,i,a){try{var c=t[i](a),s=c.value}catch(t){return void n(t)}c.done?e(s):Promise.resolve(s).then(r,o)}t.exports=function(t){return function(){var n=this,r=arguments;return new Promise((function(o,i){var a=t.apply(n,r);function c(t){e(a,o,i,c,s,"next",t)}function s(t){e(a,o,i,c,s,"throw",t)}c(void 0)}))}}},575:function(t){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},100:function(t,e,n){var r=n(489),o=n(67);function i(e,n,a){return o()?t.exports=i=Reflect.construct:t.exports=i=function(t,e,n){var o=[null];o.push.apply(o,e);var i=new(Function.bind.apply(t,o));return n&&r(i,n.prototype),i},i.apply(null,arguments)}t.exports=i},913:function(t){function e(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}},713:function(t){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},754:function(t){function e(n){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},e(n)}t.exports=e},205:function(t,e,n){var r=n(489);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&r(t,e)}},430:function(t){t.exports=function(t){return-1!==Function.toString.call(t).indexOf("[native code]")}},67:function(t){t.exports=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}},884:function(t){t.exports=function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}}},521:function(t){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},585:function(t,e,n){var r=n(8),o=n(506);t.exports=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?o(t):e}},489:function(t){function e(n,r){return t.exports=e=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},e(n,r)}t.exports=e},38:function(t,e,n){var r=n(858),o=n(884),i=n(379),a=n(521);t.exports=function(t,e){return r(t)||o(t,e)||i(t,e)||a()}},8:function(t){function e(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=e=function(t){return typeof t}:t.exports=e=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(n)}t.exports=e},379:function(t,e,n){var r=n(228);t.exports=function(t,e){if(t){if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(t,e):void 0}}},957:function(t,e,n){var r=n(754),o=n(489),i=n(430),a=n(100);function c(e){var n="function"==typeof Map?new Map:void 0;return t.exports=c=function(t){if(null===t||!i(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(t))return n.get(t);n.set(t,e)}function e(){return a(t,arguments,r(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o(e,t)},c(e)}t.exports=c},757:function(t,e,n){t.exports=n(666)},666:function(t){var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function u(t,e,n,r){var o=e&&e.prototype instanceof y?e:y,i=Object.create(o.prototype),a=new j(r||[]);return i._invoke=function(t,e,n){var r=f;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===m){if("throw"===o)throw i;return C()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var c=L(a,n);if(c){if(c===h)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var s=l(t,e,n);if("normal"===s.type){if(r=n.done?m:d,s.arg===h)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=m,n.method="throw",n.arg=s.arg)}}}(t,n,a),i}function l(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var f="suspendedStart",d="suspendedYield",p="executing",m="completed",h={};function y(){}function b(){}function v(){}var g={};g[i]=function(){return this};var k=Object.getPrototypeOf,x=k&&k(k(P([])));x&&x!==n&&r.call(x,i)&&(g=x);var w=v.prototype=y.prototype=Object.create(g);function E(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function S(t,e){function n(o,i,a,c){var s=l(t[o],t,i);if("throw"!==s.type){var u=s.arg,f=u.value;return f&&"object"==typeof f&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){n("next",t,a,c)}),(function(t){n("throw",t,a,c)})):e.resolve(f).then((function(t){u.value=t,a(u)}),(function(t){return n("throw",t,a,c)}))}c(s.arg)}var o;this._invoke=function(t,r){function i(){return new e((function(e,o){n(t,r,e,o)}))}return o=o?o.then(i,i):i()}}function L(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=l(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function I(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function P(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}return{next:C}}function C(){return{value:e,done:!0}}return b.prototype=w.constructor=v,v.constructor=b,b.displayName=s(v,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,s(t,c,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},E(S.prototype),S.prototype[a]=function(){return this},t.AsyncIterator=S,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new S(u(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},E(w),s(w,c,"Generator"),w[i]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=P,j.prototype={constructor:j,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(I),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return c.type="throw",c.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(s&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),I(n),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;I(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),h}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}}},e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,{a:e}),e},n.d=function(t,e){for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},function(){"use strict";var t=n(8),e=n.n(t),r=n(926),o=n.n(r),i=n(757),a=n.n(i),c=n(575),s=n.n(c),u=n(913),l=n.n(u),f=n(205),d=n.n(f),p=n(585),m=n.n(p),h=n(754),y=n.n(h),b=n(957),v=n.n(b),g=n(38),k=n.n(g),x="Good work. Enjoy a longer break!",w="pomodoroInterval",E="longBreakInterval",S=function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=r.namespace;return e=o?document.createElementNS(o,t):document.createElement(t),Object.entries(n).forEach((function(t){var n=k()(t,2),r=n[0],i=n[1];o||!(r in e)?e.setAttribute(r,i):e[r]=i})),e},L=function(t){var e=parseFloat(t,10);return Number.isNaN(e)?null:e},O=function(){var t=o()(a().mark((function t(e){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise((function(t){return setTimeout(t,1e3*e)})));case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}();var I=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=y()(e);if(n){var o=y()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return m()(this,t)});function o(){var t;return s()(this,o),(t=r.call(this)).usedPomodoros=0,t.estimatedPomodoros=0,t.shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .item-container {\n        margin-bottom: 1em;\n        padding: 0.5em 2em;\n        border-radius: 5px;\n        position: relative;\n        cursor: pointer;\n      }\n\n      .item-container:focus {\n        outline: none;\n      }\n\n      .selected {\n        background: #90e0ef;\n      }\n\n      .text-container {\n        background: #fff;\n        color: #555;\n        position: relative;\n        padding: 0.5em;\n        border-radius: 5px;\n        font-size: 1rem;\n        display: flex;\n        align-items: center;\n      }\n      \n      .completed .name {\n        text-decoration: line-through;\n      }\n\n      .name {\n        width: 80%;\n        display: inline-block;\n        margin: 0.5em 0;\n      }\n      \n      .pomodoro-container {\n        width: 20%;\n        height: 100%;\n        display: inline-block;\n        position: relative;\n        text-align: right;\n      }\n\n      .pomodoro-label {\n        position: absolute;\n        top: -0.5em;\n        right: 0;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      .pomodoro {\n        display: inline-block;\n        margin: 1em 0 0 0;\n      }\n\n      .task-button {\n        opacity: 0;\n        position: absolute;\n        border: none;\n        padding: 0.25em;\n        color: #fff;\n        background: transparent;\n        border-radius: 50%;\n      }\n\n      .task-button:focus {\n        outline: none;\n        box-shadow: inset 0 0 0 1pt #48cae4;\n        z-index: 1;\n        position: absolute;\n      }\n\n      .item-container:hover > .task-button,\n      .task-button:focus {\n        opacity: 1;\n      }\n\n      .item-container[selected=\"true\"] .task-button:hover {\n        background: rgba(0, 180, 216, 0.25);\n        color: #00b4d8;\n        cursor: pointer;\n      }\n\n      .task-button:disabled {\n        opacity: 0 !important;\n      }\n\n      .task-button:hover {\n        border-radius: 50%;\n        color: #ddd;\n        cursor: pointer;\n      }\n\n      .task-button-icon {\n        font-size: 1.2rem;\n      }\n\n      #edit-button {\n        top: 0;\n        right: 0;\n      }\n\n      #delete-button {\n        bottom: 0;\n        right: 0;\n      }\n    ",t.materialIconLinkElement=S("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/icon?family=Material+Icons"}),t.textContainerElement=S("div",{className:"text-container"}),t.itemContainerElement=S("div",{className:"item-container"}),t.nameElement=S("p",{className:"name"}),t.pomodoroContainer=S("span",{className:"pomodoro-container"}),t.pomodoroLabel=S("label",{className:"pomodoro-label",for:"pomodoro",innerText:"Pomodoros"}),t.pomodoroElement=S("p",{className:"pomodoro",id:"pomodoro"}),t.editTaskButton=S("button",{className:"task-button",id:"edit-button",onmouseout:function(t){t.target.blur()},onmousedown:function(t){t.preventDefault()}}),t.editTaskIcon=S("span",{className:"material-icons task-button-icon",innerText:"mode"}),t.deleteTaskButton=S("button",{className:"task-button",id:"delete-button",onmouseout:function(t){t.target.blur()},onmousedown:function(t){t.preventDefault()}}),t.deleteTaskIcon=S("span",{className:"material-icons task-button-icon",innerText:"delete"}),t.shadow.append(t.materialIconLinkElement,t.styleElement,t.itemContainerElement),t.itemContainerElement.append(t.textContainerElement,t.editTaskButton,t.deleteTaskButton),t.editTaskButton.appendChild(t.editTaskIcon),t.deleteTaskButton.appendChild(t.deleteTaskIcon),t.textContainerElement.append(t.nameElement,t.pomodoroContainer),t.pomodoroContainer.append(t.pomodoroLabel,t.pomodoroElement),t}return l()(o,[{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"name":this.nameElement.innerText=n;break;case"used-pomodoros":this.usedPomodoros=n,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"estimated-pomodoros":this.estimatedPomodoros=n,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"selected":"true"===n?this.itemContainerElement.classList.add("selected"):this.itemContainerElement.classList.remove("selected");break;case"completed":"true"===n?this.itemContainerElement.classList.add("completed"):this.itemContainerElement.classList.remove("completed")}}}],[{key:"observedAttributes",get:function(){return["name","estimated-pomodoros","used-pomodoros","selected","completed"]}}]),o}(v()(HTMLElement));customElements.define("task-item",I);var j=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=y()(e);if(n){var o=y()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return m()(this,t)});function o(){var t;return s()(this,o),(t=r.call(this)).shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .container {\n        padding: 1em;\n        font: normal 1rem 'Source Sans Pro', sans-serif;\n        border-radius: 5px;\n        background: #00b4d8;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        box-sizing: border-box;\n      }\n\n      .task-item-container {\n        flex: 1;\n        overflow: auto;\n      }\n\n      .title {\n        text-align: center;\n        color: #fff;\n      }\n    ",t.containerElement=S("div",{className:"container"}),t.titleElement=S("h1",{className:"title",innerText:"Task List"}),t.taskItemListContainerElement=S("div",{className:"task-item-container"}),t.taskItemFormElement=S("task-item-form",{className:"task-item-form"}),t.shadow.append(t.styleElement,t.containerElement),t.containerElement.append(t.titleElement,t.taskItemListContainerElement,t.taskItemFormElement),t}return o}(v()(HTMLElement));var P=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=y()(e);if(n){var o=y()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return m()(this,t)});function o(){var t;return s()(this,o),(t=r.call(this)).shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .task-form {\n        margin: 1em;\n        padding: 1em ;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .field-input-container {\n        margin-bottom: 1em;\n        border-radius: 5px;\n        position: relative;\n        width: 100%;\n        display: flex;\n      }\n\n      .name-input-container {\n        flex: 4;\n        position: relative;\n      }\n\n      .pomodoro-input-container {\n        flex: 1;\n        min-width: 75px;\n        position: relative;\n      }\n\n      .task-input-label {\n        position: absolute;\n        z-index: 2;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      #name-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      #pomodoro-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      .task-input[type='text'],\n      .task-input[type='number'] {\n        padding: 1.5em 0.75em 0.75em 0.75em;\n        border: none;\n        font: 1rem 'Source Sans Pro', sans-serif;\n        color: #444;\n        box-sizing: border-box;\n        width: 100%;\n      }\n\n      .task-input:focus {\n        box-shadow: 0 0 0 2pt #48cae4;\n        outline: none;\n        z-index: 1;\n        position: relative;\n      }\n\n      #name-input {\n        border-top-left-radius: 5px;\n        border-bottom-left-radius: 5px;\n      }\n\n      #pomodoro-input {\n        border-top-right-radius: 5px;\n        border-bottom-right-radius: 5px;\n      }\n\n      .task-input[type='text']::placeholder,\n      .task-input[type='number']::placeholder {\n        color: #c8c8c8;\n      }\n\n      #submit-input {\n        width: 50%;\n        margin: auto;\n        background: #4dcfe9;\n        border-radius: 5px;\n        outline: none;\n        border: none;\n        color: white;\n        padding: 0.5em;\n        font: 1.2rem 'Source Sans Pro', sans-serif;\n      }\n\n      #submit-input:hover {\n        background: #48cae4;\n        cursor: pointer;\n      }\n    ",t.containerElement=S("form",{className:"task-form"}),t.fieldInputContainer=S("div",{className:"field-input-container"}),t.nameInputContainer=S("div",{className:"name-input-container"}),t.nameInputLabel=S("label",{className:"task-input-label",id:"name-input-label",for:"name-input",innerText:"Name"}),t.nameInputElement=S("input",{className:"task-input",id:"name-input",type:"text",name:"name",placeholder:"Task Description..."}),t.pomodoroInputContainer=S("div",{className:"pomodoro-input-container"}),t.pomodoroInputLabel=S("label",{className:"task-input-label",id:"pomodoro-input-label",for:"pomodoro-input",innerText:"Pomodoros"}),t.pomodoroInputElement=S("input",{className:"task-input",id:"pomodoro-input",type:"number",name:"pomodoro",placeholder:"#",min:"1"}),t.submitInputElement=S("input",{className:"task-input",id:"submit-input",type:"submit",value:"ADD"}),t.shadow.append(t.styleElement,t.containerElement),t.containerElement.append(t.fieldInputContainer,t.submitInputElement),t.fieldInputContainer.append(t.nameInputContainer,t.pomodoroInputContainer),t.nameInputContainer.append(t.nameInputLabel,t.nameInputElement),t.pomodoroInputContainer.append(t.pomodoroInputLabel,t.pomodoroInputElement),t}return o}(v()(HTMLElement));customElements.define("task-item-form",P);var C=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=y()(e);if(n){var o=y()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return m()(this,t)});function o(){var t;return s()(this,o),(t=r.call(this))._time=t.getAttribute("time"),t._containerRadius=t.getAttribute("container-radius"),t.styleElement=S("style",{innerText:"\n        .container {\n          font: initial 'Duru-Sans', sans-serif;\n          color: #fff;\n        }\n      "}),t.shadow=t.attachShadow({mode:"open"}),t.timerContainer=S("div",{className:"container"}),t.shadow.append(t.styleElement,t.timerContainer),t}return l()(o,[{key:"attributeChangedCallback",value:function(t,e,n){var r,o,i,a,c,s,u=(r=n)>=0&&r<3600;switch(t){case"time":u&&(this._time=n,this.timerContainer.innerText=(o=this._time,i=[Math.floor(o/60),Math.floor(o%60)].map((function(t){return t<10?"0".concat(t):t})),c=(a=k()(i,2))[0],s=a[1],"".concat(c,":").concat(s)));break;case"container-radius":this._containerRadius=n,this.styleElement.innerText="\n            .container {\n              font: ".concat(this._containerRadius/30,"em 'Duru-Sans', sans-serif; \n              color: #fff;\n            }\n          ")}}},{key:"time",get:function(){return this._time},set:function(t){this._time=t,this.setAttribute("time",this._time)}},{key:"containerRadius",get:function(){return this._containerRadius},set:function(t){this._containerRadius=t,this.setAttribute("container-radius",this._containerRadius)}}],[{key:"observedAttributes",get:function(){return["time","container-radius"]}}]),o}(v()(HTMLElement));var _=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=y()(e);if(n){var o=y()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return m()(this,t)});function o(){var t;s()(this,o),(t=r.call(this)).root=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style");var e="http://www.w3.org/2000/svg";return t.svgElement=S("svg",{class:"svg"},{namespace:e}),t.circleElement=S("circle",{class:"circle"},{namespace:e}),t.baseCircleElement=S("circle",{class:"base-circle"},{namespace:e}),t.foreignObjectElement=S("foreignObject",{class:"foreign-object"},{namespace:e}),t.foreignObjectContainer=S("div",{class:"foreign-object-container"}),t.timerComponent=S("timer-component",{className:"timer",time:0}),t.root.append(t.styleElement,t.svgElement),t.svgElement.append(t.baseCircleElement,t.circleElement,t.foreignObjectElement),t.foreignObjectElement.appendChild(t.foreignObjectContainer),t.foreignObjectContainer.append(t.timerComponent),t._radius=0,t._stroke=0,t._progress=0,t.updateComponent(t._radius,t._stroke,t._progress),t}return l()(o,[{key:"updateComponent",value:function(t,e,n){var r=t-2*e,o=2*r*Math.PI;this.styleElement.innerText="\n      .svg {\n        overflow: hidden;\n        width: ".concat(2*t,"px;\n        height: ").concat(2*t,"px;\n      }\n\n      .base-circle {\n        stroke: #fff;\n        stroke-dasharray: ").concat(o," ").concat(o,";\n        stroke-dashoffset: 0;\n        stroke-width: ").concat(e,";\n        fill: #48cae4;\n      }\n\n      .circle {\n        stroke: #0095b3;\n        stroke-dasharray: ").concat(o," ").concat(o,";\n        stroke-dashoffset: ").concat((1-n/100)*o,";\n        stroke-width: ").concat(e+2,";\n        fill: transparent;\n\n        transition: stroke-dashoffset 0.5s;\n        transform: rotate(-90deg);\n        transform-origin: 50% 50%;\n      }\n\n      .foreign-object {\n        width: ").concat(2*t,"px;\n        height: ").concat(2*t,"px;\n      }\n\n      .foreign-object-container {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n      }\n    "),this.circleElement.setAttribute("r",r),this.circleElement.setAttribute("cx",t),this.circleElement.setAttribute("cy",t),this.baseCircleElement.setAttribute("r",r),this.baseCircleElement.setAttribute("cx",t),this.baseCircleElement.setAttribute("cy",t),this.timerComponent.containerRadius=t}},{key:"attributeChangedCallback",value:function(t,e,n){var r=L(n);if(null!==r){switch(t){case"radius":case"stroke":if(r<0)return;break;case"progress":if("progress"===t&&(r<0||r>100))return;break;default:return}this["_".concat(t)]=r,this.updateComponent(this._radius,this._stroke,this._progress)}}},{key:"radius",get:function(){return this._radius},set:function(t){var e=L(t);this.setAttribute("radius",e)}},{key:"stroke",get:function(){return this._stroke},set:function(t){var e=L(t);this.setAttribute("stroke",e)}},{key:"progress",get:function(){return this._progress},set:function(t){var e=L(t);this.setAttribute("progress",e)}}],[{key:"observedAttributes",get:function(){return["radius","stroke","progress"]}}]),o}(v()(HTMLElement)),R=n(713),N=n.n(R);function T(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function A(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?T(Object(n),!0).forEach((function(e){N()(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):T(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var D,q,B,M,F,G,z,J,H,Y,U,$=[],K=function(){window.localStorage.setItem("tasks",JSON.stringify($))},Q=function(t){var e=t.name;return{taskIndex:$.findIndex((function(t){return t.name===e})),taskElement:q.querySelector('[name="'.concat(e,'"]'))}},V=function(t){var e=Array.from(t.shadowRoot.querySelectorAll(".task-button"));return{delete:e.find((function(t){return"delete-button"===t.getAttribute("id")})),edit:e.find((function(t){return"edit-button"===t.getAttribute("id")}))}},W=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"end";if("end"!==e&&"start"!==e){var n=Q(e),r=n.taskElement;r.before(t)}else"end"===e?q.append(t):"start"===e&&q.prepend(t);return t},X=function(t){var e=Q(t).taskElement;return e.remove(),e},Z=function(t,e){var n=e.name,r=e.usedPomodoros,o=e.estimatedPomodoros,i=e.selected,a=e.completed,c=Q(t),s=c.taskIndex,u=c.taskElement;return $[s]=e,K(),u.setAttribute("name",n),u.setAttribute("used-pomodoros",r),u.setAttribute("estimated-pomodoros",o),u.setAttribute("selected",i),u.setAttribute("completed",a),e},tt=function(){return $.find((function(t){return t.selected}))},et=function(t){var e=tt();e&&Z(e,A(A({},e),{},{selected:!1}));var n=Q(t),r=n.taskElement,o=n.taskIndex;return X(t),W(r,"start"),$.splice(o,1),$.unshift(t),Z(t,A(A({},t),{},{selected:!0}))},nt=function(t){var e=t.name,n=t.usedPomodoros,r=t.estimatedPomodoros,o=t.selected,i=S("task-item",{name:e,"used-pomodoros":n,"estimated-pomodoros":r,selected:o});i.shadowRoot.querySelector(".text-container").onclick=function(){et(t)};var a=V(i);return a.delete.addEventListener("click",(function(){return n=Q(e=t).taskIndex,$.splice(n,1),window.localStorage.setItem("tasks",JSON.stringify($)),void X(e);var e,n})),a.edit.addEventListener("click",(function(){})),i},rt=function(t){t.preventDefault();var e,n,r,o=F,i=o.name,a=o.pomodoro,c=i.value,s=a.value,u=c.trim();u&&s&&($.some((function(t){return t.name===u}))||(i.focus(),n=nt(e={name:u,estimatedPomodoros:s,usedPomodoros:0,selected:!1,completed:!1}),-1!==(r=$.findIndex((function(t){return t.completed})))?($.splice(r,0,e),W(n,$[r+1])):($.push(e),W(n)),K(),Object.values(F).forEach((function(t){t.value=""}))))},ot=function(){return $.length>0&&!$[0].completed?et($[0]):null},it=function(){$.forEach((function(t){Z(t,A(A({},t),{},{selected:!1}))}))},at=function(t){$.forEach((function(e){Q(e).taskElement.shadowRoot.querySelector(".text-container").onclick=t&&!e.completed?function(){et(e)}:null;var n=V(Q(e).taskElement);Object.values(n).forEach((function(e){e.disabled=!t}))}))},ct=function(t){G=t},st=function(t){G.progress=JSON.stringify(t)},ut=function(t){z=t},lt=function(t){z.time=t},ft=function(t){H=(J=t).querySelector(".announcement"),Y=J.querySelector(".yes-button"),U=J.querySelector(".no-button"),Y.onmousedown=function(t){return t.preventDefault()},U.onmousedown=function(t){return t.preventDefault()}},dt=function(t){H.innerText=t},pt=function(t){U.onclick=t},mt=function(t){"visible"===t?(Y.classList.remove("hidden"),U.classList.remove("hidden")):(Y.classList.add("hidden"),U.classList.add("hidden"))};customElements.define("timer-component",C),customElements.define("progress-ring",_),customElements.define("task-list",j);var ht=!1,yt=function(){var t=o()(a().mark((function t(e){var n,r;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e;case 1:if(!(n>=0)){t.next=14;break}if(ht){t.next=6;break}return lt(0),st(0),t.abrupt("return",!1);case 6:return r=100*n/e,lt(n),st(r),t.next=11,O(1);case 11:n--,t.next=1;break;case 14:return t.abrupt("return",!0);case 15:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),bt=function(){var t=window.localStorage.getItem("pomodoroLength"),e=window.localStorage.getItem("shortBreakLength"),n=window.localStorage.getItem("longBreakLength");return t||(t=1500,window.localStorage.setItem("pomodoroLength",t)),e||(e=300,window.localStorage.setItem("shortBreakLength",e)),n||(n=900,window.localStorage.setItem("longBreakLength",n)),{pomodoroLength:t,shortBreakLength:e,longBreakLength:n}}(),vt=bt.pomodoroLength,gt=bt.shortBreakLength,kt=bt.longBreakLength,xt=function(){var t=o()(a().mark((function t(n){var r,o,i,c;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=0,o=w,i=null;case 3:if(!ht){t.next=32;break}if(o!==w){t.next=23;break}if((i=tt())||(i=ot()),i){t.next=9;break}return t.abrupt("return",0===r?-1:r);case 9:return 0===r&&n(),at(!1),dt("Focus."),t.next=14,yt(vt);case 14:if(t.sent){t.next=16;break}return t.abrupt("return",r);case 16:void 0,u=(s=i).usedPomodoros,i=Z(s,A(A({},s),{},{usedPomodoros:u+1})),r++,o=r>0&&r%4==0?E:"shortBreakInterval",at(!0),t.next=27;break;case 23:return t.delegateYield(a().mark((function t(){var e,n,c;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return mt("visible"),dt("Did you finish the task?"),e=i,n=o===x?x:"Enjoy your short break!",c=!1,a=function(){var t,r,o,i;o=(r=Q(t=e)).taskIndex,i=r.taskElement,X(t),W(i,"end"),i.setAttribute("selected",!1),i.setAttribute("completed",!0),i.shadowRoot.querySelector(".text-container").onclick=null,$.splice(o,1),$.push(t),Z(t,A(A({},t),{},{selected:!1,completed:!0})),ot(),dt(n),mt("hidden"),c=!0},Y.onclick=a,pt((function(){dt(n),mt("hidden"),c=!0})),t.next=9,yt(o===E?kt:gt);case 9:if(t.sent){t.next=11;break}return t.abrupt("return",{v:r});case 11:c||mt("hidden"),o=w;case 13:case"end":return t.stop()}var a}),t)}))(),"t0",24);case 24:if(c=t.t0,"object"!==e()(c)){t.next=27;break}return t.abrupt("return",c.v);case 27:return st(100),t.next=30,O(.25);case 30:t.next=3;break;case 32:return t.abrupt("return",r);case 33:case"end":return t.stop()}var s,u}),t)})));return function(e){return t.apply(this,arguments)}}(),wt=function(t,e){dt(-1===e?"No work to be done.":"Good work today!"),it(),t.innerText="Start",t.className="session-button"};window.addEventListener("DOMContentLoaded",(function(){var t,e=document.querySelector(".progress-ring"),n=e.shadowRoot.querySelector(".timer"),r=document.querySelector(".announcement-container");ct(e),ut(n),t=document.querySelector(".task-list"),D=t.shadowRoot.querySelector(".container"),q=D.querySelector(".task-item-container"),B=D.querySelector(".task-item-form"),M=B.shadowRoot.querySelector(".task-form"),F={name:M.querySelector("#name-input"),pomodoro:M.querySelector("#pomodoro-input")},M.addEventListener("submit",rt),JSON.parse(window.localStorage.getItem("tasks"))||window.localStorage.setItem("tasks",JSON.stringify([])),($=JSON.parse(window.localStorage.getItem("tasks"))).forEach((function(t){return W(nt(t))})),ft(r),it(),lt(vt);var i=document.querySelector(".session-button");i.onmousedown=function(t){t.preventDefault()},i.addEventListener("click",function(){var t=o()(a().mark((function t(e){var n,r;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if("Start"!==e.target.innerText){t.next=14;break}return ht=!0,n=function(){e.target.innerText="End",e.target.className="session-button in-session"},t.next=5,xt(n);case 5:return r=t.sent,st(100),t.next=9,O(.25);case 9:at(!0),wt(e.target,r),mt("hidden"),t.next=15;break;case 14:ht=!1;case 15:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}())}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pc05hdGl2ZUZ1bmN0aW9uLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy93cmFwTmF0aXZlU3VwZXIuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2dyb3VwNi93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9ncm91cDYvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2dyb3VwNi93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL3V0aWxzL3V0aWxzLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9jb21wb25lbnRzL1Rhc2tJdGVtLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9jb21wb25lbnRzL1Rhc2tMaXN0LmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9jb21wb25lbnRzL1Rhc2tJdGVtRm9ybS5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvY29tcG9uZW50cy9UaW1lci5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvY29tcG9uZW50cy9Qcm9ncmVzc1JpbmcuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL3NjcmlwdHMvdGFza0xpc3QuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL3NjcmlwdHMvcHJvZ3Jlc3NSaW5nLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9zY3JpcHRzL3RpbWVyLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9zY3JpcHRzL2Fubm91bmNlbWVudC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvc2NyaXB0cy9pbmRleC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXJyIiwibGVuIiwibGVuZ3RoIiwiaSIsImFycjIiLCJBcnJheSIsImlzQXJyYXkiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJyZXNvbHZlIiwicmVqZWN0IiwiX25leHQiLCJfdGhyb3ciLCJrZXkiLCJhcmciLCJpbmZvIiwidmFsdWUiLCJlcnJvciIsImRvbmUiLCJQcm9taXNlIiwidGhlbiIsImZuIiwidGhpcyIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImVyciIsInVuZGVmaW5lZCIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJzZXRQcm90b3R5cGVPZiIsImlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jb25zdHJ1Y3QiLCJQYXJlbnQiLCJDbGFzcyIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJhIiwicHVzaCIsIkZ1bmN0aW9uIiwiYmluZCIsInByb3RvdHlwZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJvYmoiLCJfZ2V0UHJvdG90eXBlT2YiLCJvIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInRvU3RyaW5nIiwiY2FsbCIsImluZGV4T2YiLCJzaGFtIiwiUHJveHkiLCJEYXRlIiwiZSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsIl9zIiwiX2kiLCJuZXh0IiwiX3R5cGVvZiIsImFzc2VydFRoaXNJbml0aWFsaXplZCIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJhcnJheVdpdGhIb2xlcyIsIml0ZXJhYmxlVG9BcnJheUxpbWl0IiwidW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVJlc3QiLCJhcnJheUxpa2VUb0FycmF5IiwibWluTGVuIiwibiIsInNsaWNlIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiaXNOYXRpdmVGdW5jdGlvbiIsIl93cmFwTmF0aXZlU3VwZXIiLCJfY2FjaGUiLCJNYXAiLCJoYXMiLCJnZXQiLCJzZXQiLCJXcmFwcGVyIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY29udGV4dCIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwibWV0aG9kIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJFcnJvciIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwicmVzdWx0IiwiX19hd2FpdCIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzTmFOIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsImFzeW5jIiwiaXRlciIsImtleXMiLCJvYmplY3QiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImRlZmluaXRpb24iLCJwcm9wIiwiTE9OR19CUkVBS19BTk5PVU5DRU1FTlQiLCJQT01PRE9ST19JTlRFUlZBTCIsIkxPTkdfQlJFQUtfSU5URVJWQUwiLCJjcmVhdGVFbGVtZW50IiwiZWxlbWVudFR5cGUiLCJlbGVtZW50Iiwib3B0aW9ucyIsIm5hbWVzcGFjZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiZW50cmllcyIsInNldEF0dHJpYnV0ZSIsInZhbGlkYXRlTnVtYmVyIiwibnVtIiwicGFyc2VGbG9hdCIsIk51bWJlciIsInRpY2siLCJkdXJhdGlvbiIsInJlcyIsInNldFRpbWVvdXQiLCJUYXNrSXRlbSIsInVzZWRQb21vZG9yb3MiLCJlc3RpbWF0ZWRQb21vZG9yb3MiLCJzaGFkb3ciLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwic3R5bGVFbGVtZW50IiwiaW5uZXJUZXh0IiwibWF0ZXJpYWxJY29uTGlua0VsZW1lbnQiLCJyZWwiLCJocmVmIiwidGV4dENvbnRhaW5lckVsZW1lbnQiLCJjbGFzc05hbWUiLCJpdGVtQ29udGFpbmVyRWxlbWVudCIsIm5hbWVFbGVtZW50IiwicG9tb2Rvcm9Db250YWluZXIiLCJwb21vZG9yb0xhYmVsIiwiZm9yIiwicG9tb2Rvcm9FbGVtZW50IiwiaWQiLCJlZGl0VGFza0J1dHRvbiIsIm9ubW91c2VvdXQiLCJibHVyIiwib25tb3VzZWRvd24iLCJwcmV2ZW50RGVmYXVsdCIsImVkaXRUYXNrSWNvbiIsImRlbGV0ZVRhc2tCdXR0b24iLCJkZWxldGVUYXNrSWNvbiIsImFwcGVuZCIsImFwcGVuZENoaWxkIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsIkhUTUxFbGVtZW50IiwiY3VzdG9tRWxlbWVudHMiLCJjb250YWluZXJFbGVtZW50IiwidGl0bGVFbGVtZW50IiwidGFza0l0ZW1MaXN0Q29udGFpbmVyRWxlbWVudCIsInRhc2tJdGVtRm9ybUVsZW1lbnQiLCJUYXNrSXRlbUZvcm0iLCJmaWVsZElucHV0Q29udGFpbmVyIiwibmFtZUlucHV0Q29udGFpbmVyIiwibmFtZUlucHV0TGFiZWwiLCJuYW1lSW5wdXRFbGVtZW50IiwicGxhY2Vob2xkZXIiLCJwb21vZG9yb0lucHV0Q29udGFpbmVyIiwicG9tb2Rvcm9JbnB1dExhYmVsIiwicG9tb2Rvcm9JbnB1dEVsZW1lbnQiLCJtaW4iLCJzdWJtaXRJbnB1dEVsZW1lbnQiLCJfdGltZSIsImdldEF0dHJpYnV0ZSIsIl9jb250YWluZXJSYWRpdXMiLCJ0aW1lckNvbnRhaW5lciIsInRpbWUiLCJ0b3RhbFNlY29uZHMiLCJtaW51dGVzIiwic2Vjb25kcyIsImlzVGltZVZhbGlkIiwiTWF0aCIsImZsb29yIiwibWFwIiwidCIsInJhZGl1cyIsInJvb3QiLCJzdmdOYW1lc3BhY2UiLCJzdmdFbGVtZW50IiwiY2xhc3MiLCJjaXJjbGVFbGVtZW50IiwiYmFzZUNpcmNsZUVsZW1lbnQiLCJmb3JlaWduT2JqZWN0RWxlbWVudCIsImZvcmVpZ25PYmplY3RDb250YWluZXIiLCJ0aW1lckNvbXBvbmVudCIsIl9yYWRpdXMiLCJfc3Ryb2tlIiwiX3Byb2dyZXNzIiwidXBkYXRlQ29tcG9uZW50Iiwic3Ryb2tlIiwicHJvZ3Jlc3MiLCJub3JtYWxpemVkUmFkaXVzIiwiY2lyY3VtZmVyZW5jZSIsIlBJIiwiY29udGFpbmVyUmFkaXVzIiwibmV3VmFsdWVOdW1iZXIiLCJ2YWwiLCJ0YXNrTGlzdENvbnRhaW5lciIsInRhc2tMaXN0SXRlbUNvbnRhaW5lciIsInRhc2tJdGVtRm9ybSIsInRhc2tJdGVtRm9ybUNvbnRhaW5lciIsInRhc2tJdGVtRm9ybUlucHV0cyIsInByb2dyZXNzUmluZ0VsZW1lbnQiLCJ0aW1lckVsZW1lbnQiLCJhbm5vdW5jZW1lbnRDb250YWluZXIiLCJhbm5vdW5jZW1lbnRFbGVtZW50IiwieWVzQnV0dG9uIiwibm9CdXR0b24iLCJ0YXNrcyIsInNhdmVUYXNrcyIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0VGFzayIsInRhc2tJbmRleCIsImZpbmRJbmRleCIsInRhc2siLCJ0YXNrRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRUYXNrSXRlbUJ1dHRvbnMiLCJidXR0b25zIiwic2hhZG93Um9vdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkZWxldGUiLCJmaW5kIiwiYnRuIiwiZWRpdCIsImFkZFRhc2tUb0RvbSIsIm5ld1Rhc2tFbGVtZW50IiwicG9zaXRpb24iLCJiZWZvcmUiLCJwcmVwZW5kIiwicmVtb3ZlVGFza0Zyb21Eb20iLCJ0YXNrVG9SZW1vdmUiLCJ1cGRhdGVUYXNrIiwicHJldlRhc2siLCJuZXh0VGFzayIsIm5leHROYW1lIiwic2VsZWN0ZWQiLCJjb21wbGV0ZWQiLCJnZXRDdXJyZW50bHlTZWxlY3RlZFRhc2siLCJzZWxlY3RUYXNrIiwicHJldlNlbGVjdGVkVGFzayIsInNwbGljZSIsInVuc2hpZnQiLCJjcmVhdGVUYXNrRWxlbWVudCIsIm5ld1Rhc2siLCJvbmNsaWNrIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRhc2tUb0RlbGV0ZSIsImhhbmRsZVRhc2tGb3JtU3VibWl0IiwiaW5kZXhPZkZpcnN0Q29tcGxldGVkIiwibmFtZUlucHV0IiwicG9tb2Rvcm9JbnB1dCIsInBvbW9kb3JvIiwidHJpbW1lZE5hbWUiLCJ0cmltIiwic29tZSIsImZvY3VzIiwiaW5wdXQiLCJzZWxlY3RGaXJzdFRhc2siLCJkZXNlbGVjdEFsbFRhc2tzIiwic2V0VGFza2xpc3RVc2FiaWxpdHkiLCJzaG91bGRUYXNrbGlzdEJlVXNhYmxlIiwiZGlzYWJsZWQiLCJpbml0aWFsaXplUHJvZ3Jlc3NSaW5nIiwic2V0UHJvZ3Jlc3MiLCJpbml0aWFsaXplVGltZXIiLCJzZXRUaW1lciIsImluaXRpYWxpemVBbm5vdW5jZW1lbnQiLCJzZXRBbm5vdW5jZW1lbnQiLCJhbm5vdW5jZW1lbnQiLCJzZXROb0J1dHRvbkNhbGxiYWNrIiwiY2FsbGJhY2siLCJzZXRCdXR0b25WaXNpYmlsaXR5IiwidmlzaWJpbGl0eSIsIlRpbWVyIiwiUHJvZ3Jlc3NSaW5nIiwiVGFza0xpc3QiLCJpc1Nlc3Npb25PbmdvaW5nIiwic3RhcnRJbnRlcnZhbCIsImludGVydmFsTGVuZ3RoIiwiY3VyclRpbWUiLCJjdXJyUHJvZ3Jlc3MiLCJwb21vZG9yb0xlbmd0aCIsImdldEl0ZW0iLCJzaG9ydEJyZWFrTGVuZ3RoIiwibG9uZ0JyZWFrTGVuZ3RoIiwiaW5pdGlhbGl6ZUludGVydmFsTGVuZ3RocyIsInN0YXJ0U2Vzc2lvbiIsImNoYW5nZVNlc3Npb25CdXR0b24iLCJudW1Qb21vZG9yb3MiLCJjdXJySW50ZXJ2YWwiLCJjdXJyU2VsZWN0ZWRUYXNrIiwiY3VyclNlbGVjdGVkVGFza0NvcHkiLCJjdXJyQW5ub3VuY2VtZW50Iiwid2FzQnV0dG9uQ2xpY2tlZCIsImNvbXBsZXRlZFRhc2siLCJlbmRTZXNzaW9uIiwi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LEVBQXNCb0IsY0FBYyxlQUMxQ29DLFNBQVV4RCxFQUFzQm9CLGNBQWMsb0JBc1BoRHBCLEVBQXNCa0QsaUJBQWlCLFNBQVVFLElBYjVDdkMsS0FBS3lGLE1BQU01RixPQUFPQyxhQUFhNEUsUUFBUSxXQUMxQzdFLE9BQU9DLGFBQWFDLFFBQVEsUUFBU0MsS0FBS0MsVUFBVSxNQUV0RE4sRUFBUUssS0FBS3lGLE1BQU01RixPQUFPQyxhQUFhNEUsUUFBUSxXQUN6Q3RRLFNBQVEsU0FBQ2lNLEdBQUQsT0FBVVcsRUFBYWtCLEdBQWtCN0IsT0kxRnZEcUQsR0FBdUJsRSxHQUV2QjBELEtBQ0FPLEdBQVNnQixJQUdULElBQU1pQixFQUFjN00sU0FBUzBILGNBQWMsbUJBQzNDbUYsRUFBWTFLLFlBQWMsU0FBQzlMLEdBQ3pCQSxFQUFFK0wsa0JBRUp5SyxFQUFZckQsaUJBQWlCLFFBQTdCLCtCQUFzQyxXQUFPblQsR0FBUCw0RUFDVCxVQUF2QkEsRUFBRXpCLE9BQU91TSxVQUR1Qix3QkFFbENvSyxJQUFtQixFQUNiVyxFQUFzQixXQUMxQjdWLEVBQUV6QixPQUFPdU0sVUFBWSxNQUNyQjlLLEVBQUV6QixPQUFPNE0sVUFBWSw2QkFMVyxTQU9QeUssR0FBYUMsR0FQTixjQU81QkMsRUFQNEIsT0FTbEN6QixHQUFZLEtBVHNCLFNBVTVCbEssRUFBSyxLQVZ1QixPQVdsQzhKLElBQXFCLEdBQ3JCb0MsR0FBV3JXLEVBQUV6QixPQUFRdVgsR0FDckJqQixHQUFvQixVQWJjLHdCQWVsQ0ssSUFBbUIsRUFmZSw0Q0FBdEMsMEQiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlMaWtlVG9BcnJheTsiLCJmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aEhvbGVzOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXN5bmNUb0dlbmVyYXRvcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjazsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxudmFyIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IHJlcXVpcmUoXCIuL2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdFwiKTtcblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gIGlmIChpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgdmFyIGEgPSBbbnVsbF07XG4gICAgICBhLnB1c2guYXBwbHkoYSwgYXJncyk7XG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgIGlmIChDbGFzcykgc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NvbnN0cnVjdDsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZpbmVQcm9wZXJ0eTsiLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2Y7IiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2ZcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHM7IiwiZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXNOYXRpdmVGdW5jdGlvbjsiLCJmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdDsiLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheUxpbWl0OyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlUmVzdDsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjsiLCJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjsiLCJ2YXIgYXJyYXlXaXRoSG9sZXMgPSByZXF1aXJlKFwiLi9hcnJheVdpdGhIb2xlc1wiKTtcblxudmFyIGl0ZXJhYmxlVG9BcnJheUxpbWl0ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5TGltaXRcIik7XG5cbnZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVSZXN0ID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVSZXN0XCIpO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zbGljZWRUb0FycmF5OyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCJ2YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXlcIik7XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5OyIsInZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL2dldFByb3RvdHlwZU9mXCIpO1xuXG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxudmFyIGlzTmF0aXZlRnVuY3Rpb24gPSByZXF1aXJlKFwiLi9pc05hdGl2ZUZ1bmN0aW9uXCIpO1xuXG52YXIgY29uc3RydWN0ID0gcmVxdWlyZShcIi4vY29uc3RydWN0XCIpO1xuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gIHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzcztcblxuICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtcblxuICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgIHJldHVybiBjb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7XG4gIH07XG5cbiAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF93cmFwTmF0aXZlU3VwZXI7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiLyoqXG4gKiBAZmlsZSBDb25zdGFudHMgZmlsZVxuICovXG5cbi8vIGRlZmF1bHQgaW50ZXJ2YWwgZHVyYXRpb25zXG5leHBvcnQgY29uc3QgREVGQVVMVF9QT01PRE9ST19JTlRFUlZBTCA9IDI1ICogNjA7XG5leHBvcnQgY29uc3QgREVGQVVMVF9TSE9SVF9CUkVBS19JTlRFUlZBTCA9IDUgKiA2MDtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0xPTkdfQlJFQUtfSU5URVJWQUwgPSAxNSAqIDYwO1xuXG4vLyBhbm5vdW5lbWVudCBtZXNzYWdlc1xuZXhwb3J0IGNvbnN0IFBPTU9ET1JPX0FOTk9VTkNFTUVOVCA9ICdGb2N1cy4nO1xuZXhwb3J0IGNvbnN0IFNIT1JUX0JSRUFLX0FOTk9VTkNFTUVOVCA9ICdFbmpveSB5b3VyIHNob3J0IGJyZWFrISc7XG5leHBvcnQgY29uc3QgTE9OR19CUkVBS19BTk5PVU5DRU1FTlQgPSAnR29vZCB3b3JrLiBFbmpveSBhIGxvbmdlciBicmVhayEnO1xuZXhwb3J0IGNvbnN0IElOVFJPX0FOTk9VTkNFTUVOVCA9ICdXaGF0IGRvIHlvdSBuZWVkIHRvIHdvcmsgb24gdG9kYXk/JztcbmV4cG9ydCBjb25zdCBJTlRST19TRUxFQ1RfVEFTS19BTk5PVU5DRU1FTlQgPSAnU2VsZWN0IGEgdGFzayB0aGVuIGhpdCBzdGFydCEnO1xuZXhwb3J0IGNvbnN0IE5FV19TRUxFQ1RfVEFTS19BTk5PVU5DRU1FTlQgPSAnU2VsZWN0IGFub3RoZXIgdGFzay4nO1xuZXhwb3J0IGNvbnN0IENPTlRJTlVJTkdfU0VMRUNUX1RBU0tfQU5OT1VOQ0VNRU5UID1cbiAgJ1NlbGVjdCBhbm90aGVyIHRhc2sgaWYgeW91IHdvdWxkIGxpa2UuJztcbmV4cG9ydCBjb25zdCBUQVNLX0NPTVBMRVRJT05fUVVFU1RJT04gPSAnRGlkIHlvdSBmaW5pc2ggdGhlIHRhc2s/JztcbmV4cG9ydCBjb25zdCBFTkRfT0ZfU0VTU0lPTl9BTk5PVU5DRU1FTlQgPSAnR29vZCB3b3JrIHRvZGF5ISc7XG5leHBvcnQgY29uc3QgTk9fVEFTS1NfQU5OT1VOQ0VNRU5UID0gJ05vIHdvcmsgdG8gYmUgZG9uZS4nO1xuXG4vLyBpbnRlcnZhbCBuYW1lc1xuZXhwb3J0IGNvbnN0IFBPTU9ET1JPX0lOVEVSVkFMID0gJ3BvbW9kb3JvSW50ZXJ2YWwnO1xuZXhwb3J0IGNvbnN0IFNIT1JUX0JSRUFLX0lOVEVSVkFMID0gJ3Nob3J0QnJlYWtJbnRlcnZhbCc7XG5leHBvcnQgY29uc3QgTE9OR19CUkVBS19JTlRFUlZBTCA9ICdsb25nQnJlYWtJbnRlcnZhbCc7XG4iLCIvKipcbiAqIEBmaWxlIFZhcmlvdXMgdXRpbGl0eSBtZXRob2RzXG4gKi9cblxuaW1wb3J0IHtcbiAgREVGQVVMVF9QT01PRE9ST19JTlRFUlZBTCxcbiAgREVGQVVMVF9TSE9SVF9CUkVBS19JTlRFUlZBTCxcbiAgREVGQVVMVF9MT05HX0JSRUFLX0lOVEVSVkFMLFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBIVE1MRWxlbWVudCBhbmQgc2V0IGl0cyBhdHRyaWJ1dGVzXG4gKiBDcmVhdGVkIHRvIHJlZHVjZSBib2lsZXJwbGF0ZSBmcm9tIGVsZW1lbnQgY3JlYXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50VHlwZSAtIGVsZW1lbnQgdGFnIG5hbWVcbiAqIEBwYXJhbSB7e2tleTogc3RyaW5nfX0gcHJvcHMgLSBlbGVtZW50J3MgYXR0cmlidXRlcy9wcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge3tvcHRpb246IHN0cmluZ319IG9wdGlvbnMgLSBlbGVtZW50IG9wdGlvbnMgc3VjaCBhcyBuYW1lc3BhY2VcbiAqIEByZXR1cm4gZWxlbWVudCAtIG5ldyBIVE1MRWxlbWVudCBjcmVhdGVkXG4gKi9cbmNvbnN0IGNyZWF0ZUVsZW1lbnQgPSAoZWxlbWVudFR5cGUsIHByb3BzID0ge30sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7IG5hbWVzcGFjZSB9ID0gb3B0aW9ucztcbiAgbGV0IGVsZW1lbnQ7XG4gIGlmIChuYW1lc3BhY2UpIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCBlbGVtZW50VHlwZSk7XG4gIGVsc2UgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbWVudFR5cGUpOyAvLyBjcmVhdGUgZWxlbWVudFxuXG4gIC8vIHNldCBhdHRyaWJ1dGVzL3Byb3BlcnRpZXNcbiAgT2JqZWN0LmVudHJpZXMocHJvcHMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIGlmIChuYW1lc3BhY2UgfHwgIShrZXkgaW4gZWxlbWVudCkpIGVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZWxlbWVudFtrZXldID0gdmFsdWU7XG4gIH0pO1xuXG4gIHJldHVybiBlbGVtZW50O1xufTtcblxuLyoqXG4gKiBUcmllcyB0byBjb252ZXJ0IGlucHV0IHRvIGEgbnVtYmVyXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgLSB0byBiZSBjb252ZXJ0ZWQgdG8gbnVtYmVyXG4gKiBAcmV0dXJuIHtudW1iZXIgfCBudWxsfSAtIG51bWJlciBpZiBzdWNjZXNzZnVsLCBudWxsIG90aGVyd2lzZVxuICovXG5jb25zdCB2YWxpZGF0ZU51bWJlciA9ICh2YWx1ZSkgPT4ge1xuICBjb25zdCBudW0gPSBwYXJzZUZsb2F0KHZhbHVlLCAxMCk7XG4gIHJldHVybiBOdW1iZXIuaXNOYU4obnVtKSA/IG51bGwgOiBudW07XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aW1lIGlzIHZhbGlkIGZvciB0aW1lclxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgLSB0aW1lIHRvIGJlIGNoZWNrZWQgKGluIHNlY29uZHMpXG4gKi9cbmNvbnN0IGNoZWNrSWZUaW1lVmFsaWQgPSAodGltZSkgPT4ge1xuICBjb25zdCBzZWNvbmRzSW5BbkhvdXIgPSA2MCAqIDYwO1xuICByZXR1cm4gdGltZSA+PSAwICYmIHRpbWUgPCBzZWNvbmRzSW5BbkhvdXI7XG59O1xuXG4vKipcbiAqIFVzZSBwcm9taXNlcyB0byB0aWNrIGJ5IHNwZWNpZmllZCB0aWNrTGVuZ3RoXG4gKiBOT1RFOiB0aWNrcyBtYXkgYmUgc2xpZ2h0bHkgbG9uZ2VyIHRoYW4gdGhlIGR1cmF0aW9uIGR1ZSB0aGUgc2luZ2xlIHRocmVhZGVkIG5hdHVyZSBvZiBKYXZhU2NyaXB0XG4gKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gLSBkdXJhdGlvbiBvZiB0aWNrIChpbiBzZWNvbmRzKVxuICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn0gLSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgdGljayBkdXJhdGlvblxuICovXG5jb25zdCB0aWNrID0gYXN5bmMgKGR1cmF0aW9uKSA9PlxuICBuZXcgUHJvbWlzZSgocmVzKSA9PiBzZXRUaW1lb3V0KHJlcywgMTAwMCAqIGR1cmF0aW9uKSk7XG5cbi8qKlxuICogQ29udmVydHMgc2Vjb25kcyBpbnRvIE1NIDogU1NcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWNvbmRzIC0gc2Vjb25kcyB0byBjb252ZXJ0XG4gKiBAcmV0dXJuIHtzdHJpbmd9IC0gdGltZSBpbiBmb3JtYXQgTU06U1NcbiAqL1xuY29uc3QgZ2V0TWludXRlc0FuZFNlY29uZHMgPSAodG90YWxTZWNvbmRzKSA9PiB7XG4gIGNvbnN0IFttaW51dGVzLCBzZWNvbmRzXSA9IFtcbiAgICBNYXRoLmZsb29yKHRvdGFsU2Vjb25kcyAvIDYwKSxcbiAgICBNYXRoLmZsb29yKHRvdGFsU2Vjb25kcyAlIDYwKSxcbiAgXS5tYXAoKHQpID0+ICh0IDwgMTAgPyBgMCR7dH1gIDogdCkpOyAvLyBsZWZ0IHRpbWUgdW5pdCB3aXRoIDAgaWYgbmVjZXNzYXJ5XG4gIHJldHVybiBgJHttaW51dGVzfToke3NlY29uZHN9YDtcbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBpbnRlcnZhbCBsZW5ndGhzLCByZXRyaWV2ZSBmcm9tIGxvY2FsU3RvcmFnZSBpZiBwb3NzaWJsZVxuICogQHJldHVybiB7e3BvbW9kb3JvTGVuZ3RoOiBudW1iZXIsIHNob3J0QnJlYWtMZW5ndGg6IG51bWJlciwgbG9uZ0JyZWFrTGVuZ3RoOiBudW1iZXJ9fSAtIGxlbmd0aHMgb2YgaW50ZXJ2YWxzXG4gKi9cbmNvbnN0IGluaXRpYWxpemVJbnRlcnZhbExlbmd0aHMgPSAoKSA9PiB7XG4gIGxldCBwb21vZG9yb0xlbmd0aCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncG9tb2Rvcm9MZW5ndGgnKTtcbiAgbGV0IHNob3J0QnJlYWtMZW5ndGggPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Nob3J0QnJlYWtMZW5ndGgnKTtcbiAgbGV0IGxvbmdCcmVha0xlbmd0aCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbG9uZ0JyZWFrTGVuZ3RoJyk7XG4gIGlmICghcG9tb2Rvcm9MZW5ndGgpIHtcbiAgICBwb21vZG9yb0xlbmd0aCA9IERFRkFVTFRfUE9NT0RPUk9fSU5URVJWQUw7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwb21vZG9yb0xlbmd0aCcsIHBvbW9kb3JvTGVuZ3RoKTtcbiAgfVxuICBpZiAoIXNob3J0QnJlYWtMZW5ndGgpIHtcbiAgICBzaG9ydEJyZWFrTGVuZ3RoID0gREVGQVVMVF9TSE9SVF9CUkVBS19JTlRFUlZBTDtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Nob3J0QnJlYWtMZW5ndGgnLCBzaG9ydEJyZWFrTGVuZ3RoKTtcbiAgfVxuICBpZiAoIWxvbmdCcmVha0xlbmd0aCkge1xuICAgIGxvbmdCcmVha0xlbmd0aCA9IERFRkFVTFRfTE9OR19CUkVBS19JTlRFUlZBTDtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xvbmdCcmVha0xlbmd0aCcsIGxvbmdCcmVha0xlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIHsgcG9tb2Rvcm9MZW5ndGgsIHNob3J0QnJlYWtMZW5ndGgsIGxvbmdCcmVha0xlbmd0aCB9O1xufTtcblxuZXhwb3J0IHtcbiAgY3JlYXRlRWxlbWVudCxcbiAgaW5pdGlhbGl6ZUludGVydmFsTGVuZ3RocyxcbiAgZ2V0TWludXRlc0FuZFNlY29uZHMsXG4gIHRpY2ssXG4gIGNoZWNrSWZUaW1lVmFsaWQsXG4gIHZhbGlkYXRlTnVtYmVyLFxufTtcbiIsIi8qKlxuICogQGZpbGUgdGFzay1pdGVtIHdlYiBjb21wb25lbnRcbiAqL1xuXG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG4vKipcbiAqIEN1c3RvbSB3ZWIgY29tcG9uZW50IHJlcHJlc2VudGluZyBhIHRhc2sgaXRlbS5cbiAqIEBleHRlbmRzIEhUTUxFbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gbmFtZSAtIG5hbWUgb2YgdGFza1xuICogQHBhcmFtIHtudW1iZXJ9IGVzdGltYXRlZC1wb21vZG9yb3MgLSBlc3RpbWF0ZWQgbnVtYmVyIG9mIHBvbW9kb3JvcyBuZWVkZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSB1c2VkLXBvbW9kb3JvcyAtIHBvbW9kb3JvcyB1c2VkIHNvIGZhclxuICogQHBhcmFtIHtib29sZWFufSBzZWxlY3RlZCAtIGluZGljYXRlcyBpZiB0aGUgY3VycmVudCB0YXNrIGlzIHNlbGVjdGVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXBsZXRlZCAtIGluZGljYXRlcyBpZiB0aGUgY3VycmVudCB0YXNrIGlzIGNvbXBsZXRlZFxuICovXG5jbGFzcyBUYXNrSXRlbSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICduYW1lJyxcbiAgICAgICdlc3RpbWF0ZWQtcG9tb2Rvcm9zJyxcbiAgICAgICd1c2VkLXBvbW9kb3JvcycsXG4gICAgICAnc2VsZWN0ZWQnLFxuICAgICAgJ2NvbXBsZXRlZCcsXG4gICAgXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnVzZWRQb21vZG9yb3MgPSAwO1xuICAgIHRoaXMuZXN0aW1hdGVkUG9tb2Rvcm9zID0gMDtcblxuICAgIC8vIGNyZWF0ZSBzaGFkb3cgcm9vdFxuICAgIHRoaXMuc2hhZG93ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG5cbiAgICB0aGlzLnN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgdGhpcy5zdHlsZUVsZW1lbnQuaW5uZXJUZXh0ID0gYFxuICAgICAgLml0ZW0tY29udGFpbmVyIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMWVtO1xuICAgICAgICBwYWRkaW5nOiAwLjVlbSAyZW07XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICB9XG5cbiAgICAgIC5pdGVtLWNvbnRhaW5lcjpmb2N1cyB7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICB9XG5cbiAgICAgIC5zZWxlY3RlZCB7XG4gICAgICAgIGJhY2tncm91bmQ6ICM5MGUwZWY7XG4gICAgICB9XG5cbiAgICAgIC50ZXh0LWNvbnRhaW5lciB7XG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgICAgIGNvbG9yOiAjNTU1O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHBhZGRpbmc6IDAuNWVtO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLmNvbXBsZXRlZCAubmFtZSB7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xuICAgICAgfVxuXG4gICAgICAubmFtZSB7XG4gICAgICAgIHdpZHRoOiA4MCU7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgbWFyZ2luOiAwLjVlbSAwO1xuICAgICAgfVxuICAgICAgXG4gICAgICAucG9tb2Rvcm8tY29udGFpbmVyIHtcbiAgICAgICAgd2lkdGg6IDIwJTtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgICB9XG5cbiAgICAgIC5wb21vZG9yby1sYWJlbCB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAtMC41ZW07XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICBmb250OiAwLjhyZW0gJ1NvdXJjZSBTYW5zIFBybycsIHNhbnMtc2VyaWY7XG4gICAgICAgIGNvbG9yOiAjNzc3O1xuICAgICAgfVxuXG4gICAgICAucG9tb2Rvcm8ge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIG1hcmdpbjogMWVtIDAgMCAwO1xuICAgICAgfVxuXG4gICAgICAudGFzay1idXR0b24ge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgcGFkZGluZzogMC4yNWVtO1xuICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgIH1cblxuICAgICAgLnRhc2stYnV0dG9uOmZvY3VzIHtcbiAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMXB0ICM0OGNhZTQ7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIH1cblxuICAgICAgLml0ZW0tY29udGFpbmVyOmhvdmVyID4gLnRhc2stYnV0dG9uLFxuICAgICAgLnRhc2stYnV0dG9uOmZvY3VzIHtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgIH1cblxuICAgICAgLml0ZW0tY29udGFpbmVyW3NlbGVjdGVkPVwidHJ1ZVwiXSAudGFzay1idXR0b246aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDE4MCwgMjE2LCAwLjI1KTtcbiAgICAgICAgY29sb3I6ICMwMGI0ZDg7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIH1cblxuICAgICAgLnRhc2stYnV0dG9uOmRpc2FibGVkIHtcbiAgICAgICAgb3BhY2l0eTogMCAhaW1wb3J0YW50O1xuICAgICAgfVxuXG4gICAgICAudGFzay1idXR0b246aG92ZXIge1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgIGNvbG9yOiAjZGRkO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLWJ1dHRvbi1pY29uIHtcbiAgICAgICAgZm9udC1zaXplOiAxLjJyZW07XG4gICAgICB9XG5cbiAgICAgICNlZGl0LWJ1dHRvbiB7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICB9XG5cbiAgICAgICNkZWxldGUtYnV0dG9uIHtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICAgIH1cbiAgICBgO1xuXG4gICAgdGhpcy5tYXRlcmlhbEljb25MaW5rRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2xpbmsnLCB7XG4gICAgICByZWw6ICdzdHlsZXNoZWV0JyxcbiAgICAgIGhyZWY6ICdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2ljb24/ZmFtaWx5PU1hdGVyaWFsK0ljb25zJyxcbiAgICB9KTtcblxuICAgIHRoaXMudGV4dENvbnRhaW5lckVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0ZXh0LWNvbnRhaW5lcicsXG4gICAgfSk7XG4gICAgdGhpcy5pdGVtQ29udGFpbmVyRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2l0ZW0tY29udGFpbmVyJyxcbiAgICB9KTtcbiAgICB0aGlzLm5hbWVFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgncCcsIHtcbiAgICAgIGNsYXNzTmFtZTogJ25hbWUnLFxuICAgIH0pO1xuICAgIHRoaXMucG9tb2Rvcm9Db250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgY2xhc3NOYW1lOiAncG9tb2Rvcm8tY29udGFpbmVyJyxcbiAgICB9KTtcbiAgICB0aGlzLnBvbW9kb3JvTGFiZWwgPSBjcmVhdGVFbGVtZW50KCdsYWJlbCcsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3BvbW9kb3JvLWxhYmVsJyxcbiAgICAgIGZvcjogJ3BvbW9kb3JvJyxcbiAgICAgIGlubmVyVGV4dDogJ1BvbW9kb3JvcycsXG4gICAgfSk7XG4gICAgdGhpcy5wb21vZG9yb0VsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdwJywge1xuICAgICAgY2xhc3NOYW1lOiAncG9tb2Rvcm8nLFxuICAgICAgaWQ6ICdwb21vZG9ybycsXG4gICAgfSk7XG5cbiAgICB0aGlzLmVkaXRUYXNrQnV0dG9uID0gY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1xuICAgICAgY2xhc3NOYW1lOiAndGFzay1idXR0b24nLFxuICAgICAgaWQ6ICdlZGl0LWJ1dHRvbicsXG4gICAgICBvbm1vdXNlb3V0OiAoZSkgPT4ge1xuICAgICAgICBlLnRhcmdldC5ibHVyKCk7XG4gICAgICB9LFxuICAgICAgb25tb3VzZWRvd246IChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgdGhpcy5lZGl0VGFza0ljb24gPSBjcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgY2xhc3NOYW1lOiAnbWF0ZXJpYWwtaWNvbnMgdGFzay1idXR0b24taWNvbicsXG4gICAgICBpbm5lclRleHQ6ICdtb2RlJyxcbiAgICB9KTtcblxuICAgIHRoaXMuZGVsZXRlVGFza0J1dHRvbiA9IGNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Rhc2stYnV0dG9uJyxcbiAgICAgIGlkOiAnZGVsZXRlLWJ1dHRvbicsXG4gICAgICBvbm1vdXNlb3V0OiAoZSkgPT4ge1xuICAgICAgICBlLnRhcmdldC5ibHVyKCk7XG4gICAgICB9LFxuICAgICAgb25tb3VzZWRvd246IChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgdGhpcy5kZWxldGVUYXNrSWNvbiA9IGNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICBjbGFzc05hbWU6ICdtYXRlcmlhbC1pY29ucyB0YXNrLWJ1dHRvbi1pY29uJyxcbiAgICAgIGlubmVyVGV4dDogJ2RlbGV0ZScsXG4gICAgfSk7XG5cbiAgICB0aGlzLnNoYWRvdy5hcHBlbmQoXG4gICAgICB0aGlzLm1hdGVyaWFsSWNvbkxpbmtFbGVtZW50LFxuICAgICAgdGhpcy5zdHlsZUVsZW1lbnQsXG4gICAgICB0aGlzLml0ZW1Db250YWluZXJFbGVtZW50LFxuICAgICk7XG4gICAgdGhpcy5pdGVtQ29udGFpbmVyRWxlbWVudC5hcHBlbmQoXG4gICAgICB0aGlzLnRleHRDb250YWluZXJFbGVtZW50LFxuICAgICAgdGhpcy5lZGl0VGFza0J1dHRvbixcbiAgICAgIHRoaXMuZGVsZXRlVGFza0J1dHRvbixcbiAgICApO1xuICAgIHRoaXMuZWRpdFRhc2tCdXR0b24uYXBwZW5kQ2hpbGQodGhpcy5lZGl0VGFza0ljb24pO1xuICAgIHRoaXMuZGVsZXRlVGFza0J1dHRvbi5hcHBlbmRDaGlsZCh0aGlzLmRlbGV0ZVRhc2tJY29uKTtcbiAgICB0aGlzLnRleHRDb250YWluZXJFbGVtZW50LmFwcGVuZCh0aGlzLm5hbWVFbGVtZW50LCB0aGlzLnBvbW9kb3JvQ29udGFpbmVyKTtcbiAgICB0aGlzLnBvbW9kb3JvQ29udGFpbmVyLmFwcGVuZCh0aGlzLnBvbW9kb3JvTGFiZWwsIHRoaXMucG9tb2Rvcm9FbGVtZW50KTtcbiAgfVxuXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgJ25hbWUnOlxuICAgICAgICB0aGlzLm5hbWVFbGVtZW50LmlubmVyVGV4dCA9IG5ld1ZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3VzZWQtcG9tb2Rvcm9zJzpcbiAgICAgICAgdGhpcy51c2VkUG9tb2Rvcm9zID0gbmV3VmFsdWU7XG4gICAgICAgIHRoaXMucG9tb2Rvcm9FbGVtZW50LmlubmVyVGV4dCA9IGAke3RoaXMudXNlZFBvbW9kb3Jvc30vJHt0aGlzLmVzdGltYXRlZFBvbW9kb3Jvc31gO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2VzdGltYXRlZC1wb21vZG9yb3MnOlxuICAgICAgICB0aGlzLmVzdGltYXRlZFBvbW9kb3JvcyA9IG5ld1ZhbHVlO1xuICAgICAgICB0aGlzLnBvbW9kb3JvRWxlbWVudC5pbm5lclRleHQgPSBgJHt0aGlzLnVzZWRQb21vZG9yb3N9LyR7dGhpcy5lc3RpbWF0ZWRQb21vZG9yb3N9YDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzZWxlY3RlZCc6XG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gJ3RydWUnKVxuICAgICAgICAgIHRoaXMuaXRlbUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgZWxzZSB0aGlzLml0ZW1Db250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY29tcGxldGVkJzpcbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSAndHJ1ZScpXG4gICAgICAgICAgdGhpcy5pdGVtQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjb21wbGV0ZWQnKTtcbiAgICAgICAgZWxzZSB0aGlzLml0ZW1Db250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2NvbXBsZXRlZCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9XG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgndGFzay1pdGVtJywgVGFza0l0ZW0pO1xuZXhwb3J0IGRlZmF1bHQgVGFza0l0ZW07XG4iLCIvKipcbiAqIEBmaWxlIHRhc2stbGlzdCB3ZWIgY29tcG9uZW50XG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcblxuLyoqXG4gKiBDdXN0b20gd2ViIGNvbXBvbmVudCByZXByZXNlbnRpbmcgYSB0YXNrIGxpc3QuXG4gKiBAZXh0ZW5kcyBIVE1MRWxlbWVudFxuICovXG5jbGFzcyBUYXNrTGlzdCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuc2hhZG93ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgdGhpcy5zdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHRoaXMuc3R5bGVFbGVtZW50LmlubmVyVGV4dCA9IGBcbiAgICAgIC5jb250YWluZXIge1xuICAgICAgICBwYWRkaW5nOiAxZW07XG4gICAgICAgIGZvbnQ6IG5vcm1hbCAxcmVtICdTb3VyY2UgU2FucyBQcm8nLCBzYW5zLXNlcmlmO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgIGJhY2tncm91bmQ6ICMwMGI0ZDg7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgIH1cblxuICAgICAgLnRhc2staXRlbS1jb250YWluZXIge1xuICAgICAgICBmbGV4OiAxO1xuICAgICAgICBvdmVyZmxvdzogYXV0bztcbiAgICAgIH1cblxuICAgICAgLnRpdGxlIHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgIH1cbiAgICBgO1xuXG4gICAgdGhpcy5jb250YWluZXJFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnY29udGFpbmVyJyxcbiAgICB9KTtcblxuICAgIHRoaXMudGl0bGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnaDEnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0aXRsZScsXG4gICAgICBpbm5lclRleHQ6ICdUYXNrIExpc3QnLFxuICAgIH0pO1xuXG4gICAgdGhpcy50YXNrSXRlbUxpc3RDb250YWluZXJFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndGFzay1pdGVtLWNvbnRhaW5lcicsXG4gICAgfSk7XG5cbiAgICB0aGlzLnRhc2tJdGVtRm9ybUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCd0YXNrLWl0ZW0tZm9ybScsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Rhc2staXRlbS1mb3JtJyxcbiAgICB9KTtcblxuICAgIHRoaXMuc2hhZG93LmFwcGVuZCh0aGlzLnN0eWxlRWxlbWVudCwgdGhpcy5jb250YWluZXJFbGVtZW50KTtcbiAgICB0aGlzLmNvbnRhaW5lckVsZW1lbnQuYXBwZW5kKFxuICAgICAgdGhpcy50aXRsZUVsZW1lbnQsXG4gICAgICB0aGlzLnRhc2tJdGVtTGlzdENvbnRhaW5lckVsZW1lbnQsXG4gICAgICB0aGlzLnRhc2tJdGVtRm9ybUVsZW1lbnQsXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUYXNrTGlzdDtcbiIsIi8qKlxuICogQGZpbGUgdGFzay1pdGVtLWZvcm0gd2ViIGNvbXBvbmVudFxuICovXG5cbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbi8qKlxuICogQ3VzdG9tIHdlYiBjb21wb25lbnQgcmVwcmVzZW50aW5nIGEgdGFzayBpdGVtIGZvcm0uXG4gKiBAZXh0ZW5kcyBIVE1MRWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IG5hbWUgLSBuYW1lIG9mIHRhc2tcbiAqIEBwYXJhbSB7bnVtYmVyfSBlc3RpbWF0ZWQtcG9tb2Rvcm9zIC0gZXN0aW1hdGVkIG51bWJlciBvZiBwb21vZG9yb3MgbmVlZGVkXG4gKi9cbmNsYXNzIFRhc2tJdGVtRm9ybSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuc2hhZG93ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG5cbiAgICB0aGlzLnN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgdGhpcy5zdHlsZUVsZW1lbnQuaW5uZXJUZXh0ID0gYFxuICAgICAgLnRhc2stZm9ybSB7XG4gICAgICAgIG1hcmdpbjogMWVtO1xuICAgICAgICBwYWRkaW5nOiAxZW0gO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgfVxuXG4gICAgICAuZmllbGQtaW5wdXQtY29udGFpbmVyIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMWVtO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICB9XG5cbiAgICAgIC5uYW1lLWlucHV0LWNvbnRhaW5lciB7XG4gICAgICAgIGZsZXg6IDQ7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIH1cblxuICAgICAgLnBvbW9kb3JvLWlucHV0LWNvbnRhaW5lciB7XG4gICAgICAgIGZsZXg6IDE7XG4gICAgICAgIG1pbi13aWR0aDogNzVweDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgfVxuXG4gICAgICAudGFzay1pbnB1dC1sYWJlbCB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgei1pbmRleDogMjtcbiAgICAgICAgZm9udDogMC44cmVtICdTb3VyY2UgU2FucyBQcm8nLCBzYW5zLXNlcmlmO1xuICAgICAgICBjb2xvcjogIzc3NztcbiAgICAgIH1cblxuICAgICAgI25hbWUtaW5wdXQtbGFiZWwge1xuICAgICAgICB0b3A6IDAuMmVtO1xuICAgICAgICBsZWZ0OiAwLjc1ZW07XG4gICAgICB9XG5cbiAgICAgICNwb21vZG9yby1pbnB1dC1sYWJlbCB7XG4gICAgICAgIHRvcDogMC4yZW07XG4gICAgICAgIGxlZnQ6IDAuNzVlbTtcbiAgICAgIH1cblxuICAgICAgLnRhc2staW5wdXRbdHlwZT0ndGV4dCddLFxuICAgICAgLnRhc2staW5wdXRbdHlwZT0nbnVtYmVyJ10ge1xuICAgICAgICBwYWRkaW5nOiAxLjVlbSAwLjc1ZW0gMC43NWVtIDAuNzVlbTtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBmb250OiAxcmVtICdTb3VyY2UgU2FucyBQcm8nLCBzYW5zLXNlcmlmO1xuICAgICAgICBjb2xvcjogIzQ0NDtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLWlucHV0OmZvY3VzIHtcbiAgICAgICAgYm94LXNoYWRvdzogMCAwIDAgMnB0ICM0OGNhZTQ7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIH1cblxuICAgICAgI25hbWUtaW5wdXQge1xuICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiA1cHg7XG4gICAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDVweDtcbiAgICAgIH1cblxuICAgICAgI3BvbW9kb3JvLWlucHV0IHtcbiAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDVweDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDVweDtcbiAgICAgIH1cblxuICAgICAgLnRhc2staW5wdXRbdHlwZT0ndGV4dCddOjpwbGFjZWhvbGRlcixcbiAgICAgIC50YXNrLWlucHV0W3R5cGU9J251bWJlciddOjpwbGFjZWhvbGRlciB7XG4gICAgICAgIGNvbG9yOiAjYzhjOGM4O1xuICAgICAgfVxuXG4gICAgICAjc3VibWl0LWlucHV0IHtcbiAgICAgICAgd2lkdGg6IDUwJTtcbiAgICAgICAgbWFyZ2luOiBhdXRvO1xuICAgICAgICBiYWNrZ3JvdW5kOiAjNGRjZmU5O1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICBwYWRkaW5nOiAwLjVlbTtcbiAgICAgICAgZm9udDogMS4ycmVtICdTb3VyY2UgU2FucyBQcm8nLCBzYW5zLXNlcmlmO1xuICAgICAgfVxuXG4gICAgICAjc3VibWl0LWlucHV0OmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZDogIzQ4Y2FlNDtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgfVxuICAgIGA7XG5cbiAgICB0aGlzLmNvbnRhaW5lckVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdmb3JtJywge1xuICAgICAgY2xhc3NOYW1lOiAndGFzay1mb3JtJyxcbiAgICB9KTtcblxuICAgIHRoaXMuZmllbGRJbnB1dENvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2ZpZWxkLWlucHV0LWNvbnRhaW5lcicsXG4gICAgfSk7XG5cbiAgICB0aGlzLm5hbWVJbnB1dENvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ25hbWUtaW5wdXQtY29udGFpbmVyJyxcbiAgICB9KTtcblxuICAgIHRoaXMubmFtZUlucHV0TGFiZWwgPSBjcmVhdGVFbGVtZW50KCdsYWJlbCcsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Rhc2staW5wdXQtbGFiZWwnLFxuICAgICAgaWQ6ICduYW1lLWlucHV0LWxhYmVsJyxcbiAgICAgIGZvcjogJ25hbWUtaW5wdXQnLFxuICAgICAgaW5uZXJUZXh0OiAnTmFtZScsXG4gICAgfSk7XG5cbiAgICB0aGlzLm5hbWVJbnB1dEVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Rhc2staW5wdXQnLFxuICAgICAgaWQ6ICduYW1lLWlucHV0JyxcbiAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgIG5hbWU6ICduYW1lJyxcbiAgICAgIHBsYWNlaG9sZGVyOiAnVGFzayBEZXNjcmlwdGlvbi4uLicsXG4gICAgfSk7XG5cbiAgICB0aGlzLnBvbW9kb3JvSW5wdXRDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICdwb21vZG9yby1pbnB1dC1jb250YWluZXInLFxuICAgIH0pO1xuXG4gICAgdGhpcy5wb21vZG9yb0lucHV0TGFiZWwgPSBjcmVhdGVFbGVtZW50KCdsYWJlbCcsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Rhc2staW5wdXQtbGFiZWwnLFxuICAgICAgaWQ6ICdwb21vZG9yby1pbnB1dC1sYWJlbCcsXG4gICAgICBmb3I6ICdwb21vZG9yby1pbnB1dCcsXG4gICAgICBpbm5lclRleHQ6ICdQb21vZG9yb3MnLFxuICAgIH0pO1xuXG4gICAgdGhpcy5wb21vZG9yb0lucHV0RWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xuICAgICAgY2xhc3NOYW1lOiAndGFzay1pbnB1dCcsXG4gICAgICBpZDogJ3BvbW9kb3JvLWlucHV0JyxcbiAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgbmFtZTogJ3BvbW9kb3JvJyxcbiAgICAgIHBsYWNlaG9sZGVyOiAnIycsXG4gICAgICBtaW46ICcxJyxcbiAgICB9KTtcblxuICAgIHRoaXMuc3VibWl0SW5wdXRFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXNrLWlucHV0JyxcbiAgICAgIGlkOiAnc3VibWl0LWlucHV0JyxcbiAgICAgIHR5cGU6ICdzdWJtaXQnLFxuICAgICAgdmFsdWU6ICdBREQnLFxuICAgIH0pO1xuXG4gICAgdGhpcy5zaGFkb3cuYXBwZW5kKHRoaXMuc3R5bGVFbGVtZW50LCB0aGlzLmNvbnRhaW5lckVsZW1lbnQpO1xuICAgIHRoaXMuY29udGFpbmVyRWxlbWVudC5hcHBlbmQoXG4gICAgICB0aGlzLmZpZWxkSW5wdXRDb250YWluZXIsXG4gICAgICB0aGlzLnN1Ym1pdElucHV0RWxlbWVudCxcbiAgICApO1xuICAgIHRoaXMuZmllbGRJbnB1dENvbnRhaW5lci5hcHBlbmQoXG4gICAgICB0aGlzLm5hbWVJbnB1dENvbnRhaW5lcixcbiAgICAgIHRoaXMucG9tb2Rvcm9JbnB1dENvbnRhaW5lcixcbiAgICApO1xuICAgIHRoaXMubmFtZUlucHV0Q29udGFpbmVyLmFwcGVuZCh0aGlzLm5hbWVJbnB1dExhYmVsLCB0aGlzLm5hbWVJbnB1dEVsZW1lbnQpO1xuICAgIHRoaXMucG9tb2Rvcm9JbnB1dENvbnRhaW5lci5hcHBlbmQoXG4gICAgICB0aGlzLnBvbW9kb3JvSW5wdXRMYWJlbCxcbiAgICAgIHRoaXMucG9tb2Rvcm9JbnB1dEVsZW1lbnQsXG4gICAgKTtcbiAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3Rhc2staXRlbS1mb3JtJywgVGFza0l0ZW1Gb3JtKTtcbmV4cG9ydCBkZWZhdWx0IFRhc2tJdGVtRm9ybTtcbiIsIi8qKlxuICogQGZpbGUgcHJvZ3Jlc3MtcmluZyB3ZWIgY29tcG9uZW50XG4gKi9cblxuaW1wb3J0IHtcbiAgY2hlY2tJZlRpbWVWYWxpZCxcbiAgY3JlYXRlRWxlbWVudCxcbiAgZ2V0TWludXRlc0FuZFNlY29uZHMsXG59IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcblxuLyoqXG4gKiBDdXN0b20gd2ViIGNvbXBvbmVudCByZXByZXNlbnRpbmcgYSB0aW1lclxuICogQGV4dGVuZHMgSFRNTEVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIC0gY3VycmVudCByZW1haW5pbmcgdGltZSAoaW4gc2Vjb25kcylcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgLSByYWRpdXMgb2YgY29udGFpbmVyIChwcm9ncmVzcyByaW5nKVxuICovXG5jbGFzcyBUaW1lciBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIFsndGltZScsICdjb250YWluZXItcmFkaXVzJ107XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fdGltZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCd0aW1lJyk7XG4gICAgdGhpcy5fY29udGFpbmVyUmFkaXVzID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2NvbnRhaW5lci1yYWRpdXMnKTtcblxuICAgIHRoaXMuc3R5bGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnc3R5bGUnLCB7XG4gICAgICBpbm5lclRleHQ6IGBcbiAgICAgICAgLmNvbnRhaW5lciB7XG4gICAgICAgICAgZm9udDogaW5pdGlhbCAnRHVydS1TYW5zJywgc2Fucy1zZXJpZjtcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgfVxuICAgICAgYCxcbiAgICB9KTtcblxuICAgIHRoaXMuc2hhZG93ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgdGhpcy50aW1lckNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2NvbnRhaW5lcicsXG4gICAgfSk7XG5cbiAgICB0aGlzLnNoYWRvdy5hcHBlbmQodGhpcy5zdHlsZUVsZW1lbnQsIHRoaXMudGltZXJDb250YWluZXIpO1xuICB9XG5cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgIGNvbnN0IGlzVGltZVZhbGlkID0gY2hlY2tJZlRpbWVWYWxpZChuZXdWYWx1ZSk7XG4gICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICBjYXNlICd0aW1lJzpcbiAgICAgICAgaWYgKGlzVGltZVZhbGlkKSB7XG4gICAgICAgICAgdGhpcy5fdGltZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgIHRoaXMudGltZXJDb250YWluZXIuaW5uZXJUZXh0ID0gZ2V0TWludXRlc0FuZFNlY29uZHModGhpcy5fdGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjb250YWluZXItcmFkaXVzJzpcbiAgICAgICAgdGhpcy5fY29udGFpbmVyUmFkaXVzID0gbmV3VmFsdWU7XG4gICAgICAgIC8vIHNjYWxlIGZvbnQgcmVsYXRpdmUgdG8gcHJvZ3Jlc3MgcmluZyByYWRpdXNcbiAgICAgICAgdGhpcy5zdHlsZUVsZW1lbnQuaW5uZXJUZXh0ID0gYFxuICAgICAgICAgICAgLmNvbnRhaW5lciB7XG4gICAgICAgICAgICAgIGZvbnQ6ICR7dGhpcy5fY29udGFpbmVyUmFkaXVzIC8gMzB9ZW0gJ0R1cnUtU2FucycsIHNhbnMtc2VyaWY7IFxuICAgICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBgO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9XG5cbiAgZ2V0IHRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWU7XG4gIH1cblxuICBzZXQgdGltZSh0aW1lKSB7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3RpbWUnLCB0aGlzLl90aW1lKTtcbiAgfVxuXG4gIGdldCBjb250YWluZXJSYWRpdXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lclJhZGl1cztcbiAgfVxuXG4gIHNldCBjb250YWluZXJSYWRpdXMocmFkaXVzKSB7XG4gICAgdGhpcy5fY29udGFpbmVyUmFkaXVzID0gcmFkaXVzO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdjb250YWluZXItcmFkaXVzJywgdGhpcy5fY29udGFpbmVyUmFkaXVzKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUaW1lcjtcbiIsIi8qKlxuICogQGZpbGUgcHJvZ3Jlc3MtcmluZyB3ZWIgY29tcG9uZW50XG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgdmFsaWRhdGVOdW1iZXIgfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbi8qKlxuICogQ3VzdG9tIHdlYiBjb21wb25lbnQgcmVwcmVzZW50aW5nIGEgcHJvZ3Jlc3MgcmluZy5cbiAqIEBleHRlbmRzIEhUTUxFbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gc3Ryb2tlIC0gd2lkdGggb2YgY2lyY2xlIHN0cm9rZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyAtIHJhZGl1cyBvZiBjaXJjbGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBwcm9ncmVzcyAtIHByb2dyZXNzIG9mIHJpbmdcbiAqL1xuY2xhc3MgUHJvZ3Jlc3NSaW5nIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gWydyYWRpdXMnLCAnc3Ryb2tlJywgJ3Byb2dyZXNzJ107XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5yb290ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgdGhpcy5zdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gICAgY29uc3Qgc3ZnTmFtZXNwYWNlID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbiAgICB0aGlzLnN2Z0VsZW1lbnQgPSBjcmVhdGVFbGVtZW50KFxuICAgICAgJ3N2ZycsXG4gICAgICB7IGNsYXNzOiAnc3ZnJyB9LFxuICAgICAgeyBuYW1lc3BhY2U6IHN2Z05hbWVzcGFjZSB9LFxuICAgICk7XG5cbiAgICB0aGlzLmNpcmNsZUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KFxuICAgICAgJ2NpcmNsZScsXG4gICAgICB7IGNsYXNzOiAnY2lyY2xlJyB9LFxuICAgICAgeyBuYW1lc3BhY2U6IHN2Z05hbWVzcGFjZSB9LFxuICAgICk7XG4gICAgdGhpcy5iYXNlQ2lyY2xlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoXG4gICAgICAnY2lyY2xlJyxcbiAgICAgIHsgY2xhc3M6ICdiYXNlLWNpcmNsZScgfSxcbiAgICAgIHsgbmFtZXNwYWNlOiBzdmdOYW1lc3BhY2UgfSxcbiAgICApO1xuXG4gICAgdGhpcy5mb3JlaWduT2JqZWN0RWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZm9yZWlnbk9iamVjdCcsXG4gICAgICB7IGNsYXNzOiAnZm9yZWlnbi1vYmplY3QnIH0sXG4gICAgICB7IG5hbWVzcGFjZTogc3ZnTmFtZXNwYWNlIH0sXG4gICAgKTtcbiAgICB0aGlzLmZvcmVpZ25PYmplY3RDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzczogJ2ZvcmVpZ24tb2JqZWN0LWNvbnRhaW5lcicsXG4gICAgfSk7XG4gICAgdGhpcy50aW1lckNvbXBvbmVudCA9IGNyZWF0ZUVsZW1lbnQoJ3RpbWVyLWNvbXBvbmVudCcsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3RpbWVyJyxcbiAgICAgIHRpbWU6IDAsXG4gICAgfSk7XG5cbiAgICB0aGlzLnJvb3QuYXBwZW5kKHRoaXMuc3R5bGVFbGVtZW50LCB0aGlzLnN2Z0VsZW1lbnQpO1xuICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmQoXG4gICAgICB0aGlzLmJhc2VDaXJjbGVFbGVtZW50LFxuICAgICAgdGhpcy5jaXJjbGVFbGVtZW50LFxuICAgICAgdGhpcy5mb3JlaWduT2JqZWN0RWxlbWVudCxcbiAgICApO1xuICAgIHRoaXMuZm9yZWlnbk9iamVjdEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5mb3JlaWduT2JqZWN0Q29udGFpbmVyKTtcbiAgICB0aGlzLmZvcmVpZ25PYmplY3RDb250YWluZXIuYXBwZW5kKHRoaXMudGltZXJDb21wb25lbnQpO1xuXG4gICAgdGhpcy5fcmFkaXVzID0gMDtcbiAgICB0aGlzLl9zdHJva2UgPSAwO1xuICAgIHRoaXMuX3Byb2dyZXNzID0gMDtcbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0aGlzLl9yYWRpdXMsIHRoaXMuX3N0cm9rZSwgdGhpcy5fcHJvZ3Jlc3MpO1xuICB9XG5cbiAgLyoqIFVwZGF0ZXMgY29tcG9uZW50IHZpZXcgKi9cbiAgdXBkYXRlQ29tcG9uZW50KHJhZGl1cywgc3Ryb2tlLCBwcm9ncmVzcykge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRSYWRpdXMgPSByYWRpdXMgLSBzdHJva2UgKiAyO1xuICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSBub3JtYWxpemVkUmFkaXVzICogMiAqIE1hdGguUEk7XG5cbiAgICB0aGlzLnN0eWxlRWxlbWVudC5pbm5lclRleHQgPSBgXG4gICAgICAuc3ZnIHtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgd2lkdGg6ICR7MiAqIHJhZGl1c31weDtcbiAgICAgICAgaGVpZ2h0OiAkezIgKiByYWRpdXN9cHg7XG4gICAgICB9XG5cbiAgICAgIC5iYXNlLWNpcmNsZSB7XG4gICAgICAgIHN0cm9rZTogI2ZmZjtcbiAgICAgICAgc3Ryb2tlLWRhc2hhcnJheTogJHtjaXJjdW1mZXJlbmNlfSAke2NpcmN1bWZlcmVuY2V9O1xuICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogMDtcbiAgICAgICAgc3Ryb2tlLXdpZHRoOiAke3N0cm9rZX07XG4gICAgICAgIGZpbGw6ICM0OGNhZTQ7XG4gICAgICB9XG5cbiAgICAgIC5jaXJjbGUge1xuICAgICAgICBzdHJva2U6ICMwMDk1YjM7XG4gICAgICAgIHN0cm9rZS1kYXNoYXJyYXk6ICR7Y2lyY3VtZmVyZW5jZX0gJHtjaXJjdW1mZXJlbmNlfTtcbiAgICAgICAgc3Ryb2tlLWRhc2hvZmZzZXQ6ICR7KDEgLSBwcm9ncmVzcyAvIDEwMCkgKiBjaXJjdW1mZXJlbmNlfTtcbiAgICAgICAgc3Ryb2tlLXdpZHRoOiAke3N0cm9rZSArIDJ9O1xuICAgICAgICBmaWxsOiB0cmFuc3BhcmVudDtcblxuICAgICAgICB0cmFuc2l0aW9uOiBzdHJva2UtZGFzaG9mZnNldCAwLjVzO1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtOTBkZWcpO1xuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiA1MCUgNTAlO1xuICAgICAgfVxuXG4gICAgICAuZm9yZWlnbi1vYmplY3Qge1xuICAgICAgICB3aWR0aDogJHsyICogcmFkaXVzfXB4O1xuICAgICAgICBoZWlnaHQ6ICR7MiAqIHJhZGl1c31weDtcbiAgICAgIH1cblxuICAgICAgLmZvcmVpZ24tb2JqZWN0LWNvbnRhaW5lciB7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICB9XG4gICAgYDtcblxuICAgIHRoaXMuY2lyY2xlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3InLCBub3JtYWxpemVkUmFkaXVzKTtcbiAgICB0aGlzLmNpcmNsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdjeCcsIHJhZGl1cyk7XG4gICAgdGhpcy5jaXJjbGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnY3knLCByYWRpdXMpO1xuXG4gICAgdGhpcy5iYXNlQ2lyY2xlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3InLCBub3JtYWxpemVkUmFkaXVzKTtcbiAgICB0aGlzLmJhc2VDaXJjbGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnY3gnLCByYWRpdXMpO1xuICAgIHRoaXMuYmFzZUNpcmNsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdjeScsIHJhZGl1cyk7XG5cbiAgICB0aGlzLnRpbWVyQ29tcG9uZW50LmNvbnRhaW5lclJhZGl1cyA9IHJhZGl1cztcbiAgfVxuXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICBjb25zdCBuZXdWYWx1ZU51bWJlciA9IHZhbGlkYXRlTnVtYmVyKG5ld1ZhbHVlKTtcblxuICAgIC8vIGNoZWNrIGlmIGF0dHJpYnV0ZSB2YWx1ZSBpcyBudW1iZXJcbiAgICBpZiAobmV3VmFsdWVOdW1iZXIgPT09IG51bGwpIHJldHVybjtcblxuICAgIC8vIHZhbGlkYXRlIGF0dHJpYnV0ZSByYW5nZXNcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgJ3JhZGl1cyc6XG4gICAgICAgIGlmIChuZXdWYWx1ZU51bWJlciA8IDApIHJldHVybjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzdHJva2UnOlxuICAgICAgICBpZiAobmV3VmFsdWVOdW1iZXIgPCAwKSByZXR1cm47XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncHJvZ3Jlc3MnOlxuICAgICAgICBpZiAobmFtZSA9PT0gJ3Byb2dyZXNzJylcbiAgICAgICAgICBpZiAobmV3VmFsdWVOdW1iZXIgPCAwIHx8IG5ld1ZhbHVlTnVtYmVyID4gMTAwKSByZXR1cm47XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXNbYF8ke25hbWV9YF0gPSBuZXdWYWx1ZU51bWJlcjtcbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0aGlzLl9yYWRpdXMsIHRoaXMuX3N0cm9rZSwgdGhpcy5fcHJvZ3Jlc3MpO1xuICB9XG5cbiAgZ2V0IHJhZGl1cygpIHtcbiAgICByZXR1cm4gdGhpcy5fcmFkaXVzO1xuICB9XG5cbiAgc2V0IHJhZGl1cyh2YWwpIHtcbiAgICBjb25zdCBudW0gPSB2YWxpZGF0ZU51bWJlcih2YWwpO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdyYWRpdXMnLCBudW0pO1xuICB9XG5cbiAgZ2V0IHN0cm9rZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3Ryb2tlO1xuICB9XG5cbiAgc2V0IHN0cm9rZSh2YWwpIHtcbiAgICBjb25zdCBudW0gPSB2YWxpZGF0ZU51bWJlcih2YWwpO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdzdHJva2UnLCBudW0pO1xuICB9XG5cbiAgZ2V0IHByb2dyZXNzKCkge1xuICAgIHJldHVybiB0aGlzLl9wcm9ncmVzcztcbiAgfVxuXG4gIHNldCBwcm9ncmVzcyh2YWwpIHtcbiAgICBjb25zdCBudW0gPSB2YWxpZGF0ZU51bWJlcih2YWwpO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdwcm9ncmVzcycsIG51bSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvZ3Jlc3NSaW5nO1xuIiwiLyoqXG4gKiBAZmlsZSBNYW5hZ2UgdGFza2xpc3QgZm9yIHBhZ2VcbiAqIEBhdXRob3IgU2VhbiBZZVxuICovXG5cbi8qKlxuICogQSB0YXNrIG9iamVjdCBjb250YWluaW5nIGEgbmFtZSBhbmQgcG9tb2Rvcm9zIHN0YXRzXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBUYXNrXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZSAgICAgICAgICAgICAgICAtIG5hbWUgb2YgdGhlIHRhc2tcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB1c2VkUG9tb2Rvcm9zICAgICAgIC0gcG9tb2Rvcm9zIHVzZWQgc28gZmFyXG4gKiBAcHJvcGVydHkge251bWJlcn0gZXN0aW1hdGVkUG9tb2Rvcm9zICAtIGVzdGltYXRlZCBudW1iZXIgb2YgcG9tb3MgbmVlZGVkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHNlbGVjdGVkICAgICAgICAgICAtIHdoZXRoZXIgdGFzayBpcyBzZWxlY3RlZFxuICogQHByb3BlcnR5IHtib29sZWFufSBjb21wbGV0ZWQgICAgICAgICAgLSB3aGV0aGVyIHRhc2sgaXMgY29tcGxldGVkXG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCAnLi4vY29tcG9uZW50cy9UYXNrSXRlbSc7XG5pbXBvcnQgJy4uL2NvbXBvbmVudHMvVGFza0l0ZW1Gb3JtJztcbmltcG9ydCAnLi4vY29tcG9uZW50cy9UYXNrTGlzdCc7XG5cbmxldCB0YXNrcyA9IFtdO1xubGV0IHRhc2tMaXN0O1xubGV0IHRhc2tMaXN0Q29udGFpbmVyO1xubGV0IHRhc2tMaXN0SXRlbUNvbnRhaW5lcjtcbmxldCB0YXNrSXRlbUZvcm07XG5sZXQgdGFza0l0ZW1Gb3JtQ29udGFpbmVyO1xubGV0IHRhc2tJdGVtRm9ybUlucHV0cztcblxuY29uc3Qgc2V0Um9vdCA9IChyb290KSA9PiB7XG4gIHRhc2tMaXN0ID0gcm9vdDtcbiAgdGFza0xpc3RDb250YWluZXIgPSB0YXNrTGlzdC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWluZXInKTtcbiAgdGFza0xpc3RJdGVtQ29udGFpbmVyID0gdGFza0xpc3RDb250YWluZXIucXVlcnlTZWxlY3RvcihcbiAgICAnLnRhc2staXRlbS1jb250YWluZXInLFxuICApO1xuICB0YXNrSXRlbUZvcm0gPSB0YXNrTGlzdENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcudGFzay1pdGVtLWZvcm0nKTtcbiAgdGFza0l0ZW1Gb3JtQ29udGFpbmVyID0gdGFza0l0ZW1Gb3JtLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnRhc2stZm9ybScpO1xuICB0YXNrSXRlbUZvcm1JbnB1dHMgPSB7XG4gICAgbmFtZTogdGFza0l0ZW1Gb3JtQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNuYW1lLWlucHV0JyksXG4gICAgcG9tb2Rvcm86IHRhc2tJdGVtRm9ybUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjcG9tb2Rvcm8taW5wdXQnKSxcbiAgfTtcbn07XG5cbi8qKlxuICogU2F2ZSBjdXJyZW50IHRhc2tzIHRvIGxvY2FsU3RvcmFnZVxuICovXG5jb25zdCBzYXZlVGFza3MgPSAoKSA9PiB7XG4gIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGFza3MnLCBKU09OLnN0cmluZ2lmeSh0YXNrcykpO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0YXNrIGZyb20gdGFza3MgYW5kIERPTVxuICogQHBhcmFtIHtUYXNrfSB0YXNrIC0gdGFza1xuICogQHJldHVybiB7e3Rhc2tJbmRleDogbnVtYmVyLCB0YXNrRWxlbWVudDogSFRNTEVsZW1lbnR9fVxuICovXG5jb25zdCBnZXRUYXNrID0gKHsgbmFtZSB9KSA9PiAoe1xuICB0YXNrSW5kZXg6IHRhc2tzLmZpbmRJbmRleCgodGFzaykgPT4gdGFzay5uYW1lID09PSBuYW1lKSxcbiAgdGFza0VsZW1lbnQ6IHRhc2tMaXN0SXRlbUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7bmFtZX1cIl1gKSxcbn0pO1xuXG4vKipcbiAqIEdldCBidXR0b24gZWxlbWVudHMgZnJvbSB0YXNrLWl0ZW0gZWxlbWVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFza0VsZW1lbnQgLSB0YXNrLWl0ZW0gZWxlbWVudFxuICogQHJldHVybiB7e2RlbGV0ZTogSFRNTEJ1dHRvbkVsZW1lbnQsIGVkaXQ6IEhUTUxCdXR0b25FbGVtZW50fX0gLSBidXR0b24gZWxlbWVudHMgb2JqZWN0XG4gKi9cbmNvbnN0IGdldFRhc2tJdGVtQnV0dG9ucyA9ICh0YXNrRWxlbWVudCkgPT4ge1xuICBjb25zdCBidXR0b25zID0gQXJyYXkuZnJvbShcbiAgICB0YXNrRWxlbWVudC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3JBbGwoJy50YXNrLWJ1dHRvbicpLFxuICApO1xuXG4gIHJldHVybiB7XG4gICAgZGVsZXRlOiBidXR0b25zLmZpbmQoKGJ0bikgPT4gYnRuLmdldEF0dHJpYnV0ZSgnaWQnKSA9PT0gJ2RlbGV0ZS1idXR0b24nKSxcbiAgICBlZGl0OiBidXR0b25zLmZpbmQoKGJ0bikgPT4gYnRuLmdldEF0dHJpYnV0ZSgnaWQnKSA9PT0gJ2VkaXQtYnV0dG9uJyksXG4gIH07XG59O1xuXG4vKipcbiAqIEFkZCB0YXNrIG9iamVjdCB0byBET00sIGFkZCBldmVudCBsaXN0ZW5lcnMgdG8gdGFzay1pdGVtXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBuZXdUYXNrRWxlbWVudCAtIG5ldyB0YXNrIGVsZW1lbnQgdG8gYmUgYWRkZWRcbiAqIEBwYXJhbSB7J3N0YXJ0JyB8ICdlbmQnIHwgSFRNTEVsZW1lbnR9IHBvc2l0aW9uIC0gcG9zaXRpb24gaW4gbGlzdCB0byBhcHBlbmRcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAtIG5ldyB0YXNrIGVsZW1lbnQgYWRkZWQgdG8gRE9NXG4gKi9cbmNvbnN0IGFkZFRhc2tUb0RvbSA9IChuZXdUYXNrRWxlbWVudCwgcG9zaXRpb24gPSAnZW5kJykgPT4ge1xuICBpZiAocG9zaXRpb24gIT09ICdlbmQnICYmIHBvc2l0aW9uICE9PSAnc3RhcnQnKSB7XG4gICAgY29uc3QgeyB0YXNrRWxlbWVudCB9ID0gZ2V0VGFzayhwb3NpdGlvbik7XG4gICAgdGFza0VsZW1lbnQuYmVmb3JlKG5ld1Rhc2tFbGVtZW50KTtcbiAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICB0YXNrTGlzdEl0ZW1Db250YWluZXIuYXBwZW5kKG5ld1Rhc2tFbGVtZW50KTtcbiAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3N0YXJ0Jykge1xuICAgIHRhc2tMaXN0SXRlbUNvbnRhaW5lci5wcmVwZW5kKG5ld1Rhc2tFbGVtZW50KTtcbiAgfVxuICByZXR1cm4gbmV3VGFza0VsZW1lbnQ7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0YXNrIG9iamVjdCBmcm9tIERPTVxuICogQHBhcmFtIHtUYXNrfSB0YXNrVG9SZW1vdmUgLSB0YXNrIHRvIGJlIHJlbW92ZWRcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAtIHRhc2sgZWxlbWVudCByZW1vdmVkIGZyb20gRE9NXG4gKi9cbmNvbnN0IHJlbW92ZVRhc2tGcm9tRG9tID0gKHRhc2tUb1JlbW92ZSkgPT4ge1xuICBjb25zdCB7IHRhc2tFbGVtZW50IH0gPSBnZXRUYXNrKHRhc2tUb1JlbW92ZSk7XG4gIHRhc2tFbGVtZW50LnJlbW92ZSgpO1xuICByZXR1cm4gdGFza0VsZW1lbnQ7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBleGlzdGluZyB0YXNrXG4gKiBAcGFyYW0ge1Rhc2t9IHByZXZUYXNrIC0gdGFzayB0byBiZSB1cGRhdGVkXG4gKiBAcGFyYW0ge1Rhc2t9IG5leHRUYXNrIC0gdXBkYXRlZCB0YXNrXG4gKiBAcmV0dXJuIHtUYXNrfSAtIHVwZGF0ZWQgdGFza1xuICovXG5jb25zdCB1cGRhdGVUYXNrID0gKHByZXZUYXNrLCBuZXh0VGFzaykgPT4ge1xuICBjb25zdCB7XG4gICAgbmFtZTogbmV4dE5hbWUsXG4gICAgdXNlZFBvbW9kb3JvcyxcbiAgICBlc3RpbWF0ZWRQb21vZG9yb3MsXG4gICAgc2VsZWN0ZWQsXG4gICAgY29tcGxldGVkLFxuICB9ID0gbmV4dFRhc2s7XG4gIGNvbnN0IHsgdGFza0luZGV4LCB0YXNrRWxlbWVudCB9ID0gZ2V0VGFzayhwcmV2VGFzayk7XG5cbiAgLy8gdXBkYXRlIGxvY2FsU3RvcmFnZVxuICB0YXNrc1t0YXNrSW5kZXhdID0gbmV4dFRhc2s7XG4gIHNhdmVUYXNrcygpO1xuXG4gIC8vIHVwZGF0ZSB0YXNrIGluIGRvbVxuICB0YXNrRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBuZXh0TmFtZSk7XG4gIHRhc2tFbGVtZW50LnNldEF0dHJpYnV0ZSgndXNlZC1wb21vZG9yb3MnLCB1c2VkUG9tb2Rvcm9zKTtcbiAgdGFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdlc3RpbWF0ZWQtcG9tb2Rvcm9zJywgZXN0aW1hdGVkUG9tb2Rvcm9zKTtcbiAgdGFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsIHNlbGVjdGVkKTtcbiAgdGFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdjb21wbGV0ZWQnLCBjb21wbGV0ZWQpO1xuICByZXR1cm4gbmV4dFRhc2s7XG59O1xuXG4vKipcbiAqIERlbGV0aW5nIGV4aXN0aW5nIHRhc2tcbiAqIEBwYXJhbSB7VGFza30gdGFza1RvRGVsZXRlIC0gdGFzayB0byBiZSBkZWxldGVkXG4gKi9cbmNvbnN0IGRlbGV0ZVRhc2sgPSAodGFza1RvRGVsZXRlKSA9PiB7XG4gIC8vIHVwZGF0ZSBsb2NhbFN0b3JhZ2VcbiAgY29uc3QgeyB0YXNrSW5kZXggfSA9IGdldFRhc2sodGFza1RvRGVsZXRlKTtcbiAgdGFza3Muc3BsaWNlKHRhc2tJbmRleCwgMSk7XG4gIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGFza3MnLCBKU09OLnN0cmluZ2lmeSh0YXNrcykpO1xuICByZW1vdmVUYXNrRnJvbURvbSh0YXNrVG9EZWxldGUpO1xufTtcblxuLyoqXG4gKiBHZXQgY3VycmVudGx5IHNlbGVjdGVkIHRhc2tcbiAqL1xuY29uc3QgZ2V0Q3VycmVudGx5U2VsZWN0ZWRUYXNrID0gKCkgPT4gdGFza3MuZmluZCgodCkgPT4gdC5zZWxlY3RlZCk7XG5cbi8qKlxuICogU2VsZWN0IGEgdGFza1xuICogQHBhcmFtIHtUYXNrfSB0YXNrIC0gdGFzayB0byBiZSBzZWxlY3RlZFxuICogQHJldHVybiB7VGFza30gLSBzZWxlY3RlZCB0YXNrXG4gKi9cbmNvbnN0IHNlbGVjdFRhc2sgPSAodGFzaykgPT4ge1xuICBjb25zdCBwcmV2U2VsZWN0ZWRUYXNrID0gZ2V0Q3VycmVudGx5U2VsZWN0ZWRUYXNrKCk7XG4gIGlmIChwcmV2U2VsZWN0ZWRUYXNrKVxuICAgIHVwZGF0ZVRhc2socHJldlNlbGVjdGVkVGFzaywgeyAuLi5wcmV2U2VsZWN0ZWRUYXNrLCBzZWxlY3RlZDogZmFsc2UgfSk7XG5cbiAgY29uc3QgeyB0YXNrRWxlbWVudCwgdGFza0luZGV4IH0gPSBnZXRUYXNrKHRhc2spO1xuICAvLyBtb3ZlIHRhc2sgdG8gZnJvbnQgb2YgRE9NIGxpc3RcbiAgcmVtb3ZlVGFza0Zyb21Eb20odGFzayk7XG4gIGFkZFRhc2tUb0RvbSh0YXNrRWxlbWVudCwgJ3N0YXJ0Jyk7XG5cbiAgLy8gbW92ZSB0YXNrIHRvIGZyb250IG9mIHRhc2tzIGFycmF5XG4gIHRhc2tzLnNwbGljZSh0YXNrSW5kZXgsIDEpO1xuICB0YXNrcy51bnNoaWZ0KHRhc2spO1xuXG4gIC8vIHVwZGF0ZSBzZWxlY3RlZCBwcm9wZXJ0eSBvZiB0YXNrXG4gIHJldHVybiB1cGRhdGVUYXNrKHRhc2ssIHsgLi4udGFzaywgc2VsZWN0ZWQ6IHRydWUgfSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIHRhc2sgZWxlbWVudCBmcm9tIGEgdGFzayBvYmplY3RcbiAqIEBwYXJhbSB7VGFza30gbmV3VGFzayAtIHRhc2sgdG8gYmUgY3JlYXRlZFxuICovXG5jb25zdCBjcmVhdGVUYXNrRWxlbWVudCA9IChuZXdUYXNrKSA9PiB7XG4gIGNvbnN0IHsgbmFtZSwgdXNlZFBvbW9kb3JvcywgZXN0aW1hdGVkUG9tb2Rvcm9zLCBzZWxlY3RlZCB9ID0gbmV3VGFzaztcblxuICAvLyBhZGQgdGFzayB0byBkb21cbiAgY29uc3QgbmV3VGFza0VsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCd0YXNrLWl0ZW0nLCB7XG4gICAgbmFtZSxcbiAgICAndXNlZC1wb21vZG9yb3MnOiB1c2VkUG9tb2Rvcm9zLFxuICAgICdlc3RpbWF0ZWQtcG9tb2Rvcm9zJzogZXN0aW1hdGVkUG9tb2Rvcm9zLFxuICAgIHNlbGVjdGVkLFxuICB9KTtcbiAgbmV3VGFza0VsZW1lbnQuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcudGV4dC1jb250YWluZXInKS5vbmNsaWNrID0gKCkgPT4ge1xuICAgIHNlbGVjdFRhc2sobmV3VGFzayk7XG4gIH07XG4gIGNvbnN0IGJ1dHRvbnMgPSBnZXRUYXNrSXRlbUJ1dHRvbnMobmV3VGFza0VsZW1lbnQpO1xuICBidXR0b25zLmRlbGV0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGRlbGV0ZVRhc2sobmV3VGFzaykpO1xuICBidXR0b25zLmVkaXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgLy8gVE9ETzogQWRkIGVkaXQgZnVuY3Rpb25hbGl0eVxuICB9KTtcbiAgcmV0dXJuIG5ld1Rhc2tFbGVtZW50O1xufTtcblxuLyoqXG4gKiBBZGQgbmV3IHRhc2sgdG8gbG9jYWxTdG9yYWdlLCBhcHBlbmQgdG8gRE9NXG4gKiBAcGFyYW0ge1Rhc2t9IG5ld1Rhc2sgLSBuZXcgdGFzayB0byBiZSBhZGRlZFxuICovXG5jb25zdCBhZGRUYXNrID0gKG5ld1Rhc2spID0+IHtcbiAgLy8gdXBkYXRlIGxvY2FsU3RvcmFnZVxuICBjb25zdCBuZXdUYXNrRWxlbWVudCA9IGNyZWF0ZVRhc2tFbGVtZW50KG5ld1Rhc2spO1xuICBjb25zdCBpbmRleE9mRmlyc3RDb21wbGV0ZWQgPSB0YXNrcy5maW5kSW5kZXgoKHQpID0+IHQuY29tcGxldGVkKTtcbiAgaWYgKGluZGV4T2ZGaXJzdENvbXBsZXRlZCAhPT0gLTEpIHtcbiAgICB0YXNrcy5zcGxpY2UoaW5kZXhPZkZpcnN0Q29tcGxldGVkLCAwLCBuZXdUYXNrKTtcbiAgICBhZGRUYXNrVG9Eb20obmV3VGFza0VsZW1lbnQsIHRhc2tzW2luZGV4T2ZGaXJzdENvbXBsZXRlZCArIDFdKTtcbiAgfSBlbHNlIHtcbiAgICB0YXNrcy5wdXNoKG5ld1Rhc2spO1xuICAgIGFkZFRhc2tUb0RvbShuZXdUYXNrRWxlbWVudCk7XG4gIH1cbiAgc2F2ZVRhc2tzKCk7XG59O1xuXG4vKipcbiAqIEdldCB0YXNrbGlzdFxuICogQHJldHVybiB7VGFza1tdfSAtIGN1cnJlbnQgbGlzdCBvZiB0YXNrc1xuICovXG5jb25zdCBnZXRUYXNrcyA9ICgpID0+IHtcbiAgcmV0dXJuIHRhc2tzO1xufTtcblxuLyoqXG4gKiBIYW5kbGUgZm9ybSBzdWJtaXNzaW9uLCB2YWxpZGF0ZSBpbnB1dFxuICogQHBhcmFtIHtFdmVudH0gZSAtIHN1Ym1pdCBldmVudFxuICovXG5jb25zdCBoYW5kbGVUYXNrRm9ybVN1Ym1pdCA9IChlKSA9PiB7XG4gIGUucHJldmVudERlZmF1bHQoKTsgLy8gcHJldmVudCBwYWdlIHJlbG9hZFxuXG4gIGNvbnN0IHsgbmFtZTogbmFtZUlucHV0LCBwb21vZG9ybzogcG9tb2Rvcm9JbnB1dCB9ID0gdGFza0l0ZW1Gb3JtSW5wdXRzO1xuICBjb25zdCB7IHZhbHVlOiBuYW1lIH0gPSBuYW1lSW5wdXQ7XG4gIGNvbnN0IHsgdmFsdWU6IHBvbW9kb3JvIH0gPSBwb21vZG9yb0lucHV0O1xuXG4gIGNvbnN0IHRyaW1tZWROYW1lID0gbmFtZS50cmltKCk7XG5cbiAgLy8gY2hlY2sgaWYgZmllbGRzIGFyZSBub24tZW1wdHlcbiAgaWYgKCF0cmltbWVkTmFtZSkge1xuICAgIC8vIFRPRE86IFVwZGF0ZSBuYW1lIGxhYmVsXG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghcG9tb2Rvcm8pIHtcbiAgICAvLyBUT0RPOiBVcGRhdGUgcG9tb2Rvcm8gbGFiZWxcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBjaGVjayBpZiB0YXNrIGFscmVhZHkgZXhpc3RzXG4gIGlmICh0YXNrcy5zb21lKCh0YXNrKSA9PiB0YXNrLm5hbWUgPT09IHRyaW1tZWROYW1lKSkge1xuICAgIC8vIFRPRE86IFVwZGF0ZSBuYW1lIGxhYmVsXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbmFtZUlucHV0LmZvY3VzKCk7XG5cbiAgYWRkVGFzayh7XG4gICAgbmFtZTogdHJpbW1lZE5hbWUsXG4gICAgZXN0aW1hdGVkUG9tb2Rvcm9zOiBwb21vZG9ybyxcbiAgICB1c2VkUG9tb2Rvcm9zOiAwLFxuICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICB9KTtcbiAgT2JqZWN0LnZhbHVlcyh0YXNrSXRlbUZvcm1JbnB1dHMpLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgaW5wdXQudmFsdWUgPSAnJztcbiAgfSk7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlIHRhc2tzIGZyb20gbG9jYWxTdG9yYWdlXG4gKi9cbmNvbnN0IHJlc3RvcmVUYXNrcyA9ICgpID0+IHtcbiAgaWYgKCFKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGFza3MnKSkpIHtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rhc2tzJywgSlNPTi5zdHJpbmdpZnkoW10pKTtcbiAgfVxuICB0YXNrcyA9IEpTT04ucGFyc2Uod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0YXNrcycpKTtcbiAgdGFza3MuZm9yRWFjaCgodGFzaykgPT4gYWRkVGFza1RvRG9tKGNyZWF0ZVRhc2tFbGVtZW50KHRhc2spKSk7XG59O1xuXG4vKipcbiAqIFNldCB0YXNrbGlzdFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIHRhc2sgbGlzdCBlbGVtZW50XG4gKi9cbmNvbnN0IGluaXRpYWxpemVUYXNrTGlzdCA9IChlbGVtZW50KSA9PiB7XG4gIHNldFJvb3QoZWxlbWVudCk7XG4gIHRhc2tJdGVtRm9ybUNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBoYW5kbGVUYXNrRm9ybVN1Ym1pdCk7XG4gIHJlc3RvcmVUYXNrcygpO1xufTtcbi8qKlxuICogSW5jcmVtZW50IHRoZSB1c2VkUG9tb2Rvcm9zIGZvciBvbmUgdGFza1xuICogQHBhcmFtIHtUYXNrfSB0YXNrIC0gdGFzayB0byBiZSBpbmNyZW1lbnRlZFxuICogQHJldHVybiB7VGFza30gLSBpbmNyZW1lbnRlZCB0YXNrXG4gKi9cbmNvbnN0IGluY3JlbWVudFBvbW9kb3JvID0gKHRhc2spID0+IHtcbiAgY29uc3QgeyB1c2VkUG9tb2Rvcm9zIH0gPSB0YXNrO1xuICByZXR1cm4gdXBkYXRlVGFzayh0YXNrLCB7IC4uLnRhc2ssIHVzZWRQb21vZG9yb3M6IHVzZWRQb21vZG9yb3MgKyAxIH0pO1xufTtcblxuLyoqXG4gKiBBdXRvbWF0aWNhbGx5IHNlbGVjdCBmaXJzdCB0YXNrIGluIHRoZSB0YXNrIGxpc3RcbiAqIEByZXR1cm4ge1Rhc2sgfCBudWxsfSByZXR1cm5zIGZpcnN0IGF2YWlsYWJsZSB0YXNrLCBpZiB0aGVyZSBhcmUgbm9uZSwgcmV0dXJuIG51bGxcbiAqL1xuY29uc3Qgc2VsZWN0Rmlyc3RUYXNrID0gKCkgPT4ge1xuICBpZiAodGFza3MubGVuZ3RoID4gMCAmJiAhdGFza3NbMF0uY29tcGxldGVkKSByZXR1cm4gc2VsZWN0VGFzayh0YXNrc1swXSk7XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBEZXNlbGVjdCBhbGwgdGFza3NcbiAqL1xuY29uc3QgZGVzZWxlY3RBbGxUYXNrcyA9ICgpID0+IHtcbiAgdGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xuICAgIHVwZGF0ZVRhc2sodGFzaywgeyAuLi50YXNrLCBzZWxlY3RlZDogZmFsc2UgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBEaXNhYmxlIHRhc2sgbGlzdFxuICogQHBhcmFtIHtib29sZWFufSBzaG91bGRUYXNrbGlzdEJlVXNhYmxlIC0gd2hldGhlciB0YXNrIGxpc3Qgc2hvdWxkIGJlIHVzYWJsZVxuICovXG5jb25zdCBzZXRUYXNrbGlzdFVzYWJpbGl0eSA9IChzaG91bGRUYXNrbGlzdEJlVXNhYmxlKSA9PiB7XG4gIHRhc2tzLmZvckVhY2goKHRhc2spID0+IHtcbiAgICBjb25zdCB7IHRhc2tFbGVtZW50IH0gPSBnZXRUYXNrKHRhc2spO1xuICAgIHRhc2tFbGVtZW50LnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnRleHQtY29udGFpbmVyJykub25jbGljayA9XG4gICAgICBzaG91bGRUYXNrbGlzdEJlVXNhYmxlICYmICF0YXNrLmNvbXBsZXRlZFxuICAgICAgICA/ICgpID0+IHtcbiAgICAgICAgICAgIHNlbGVjdFRhc2sodGFzayk7XG4gICAgICAgICAgfVxuICAgICAgICA6IG51bGw7XG4gICAgY29uc3QgYnV0dG9ucyA9IGdldFRhc2tJdGVtQnV0dG9ucyhnZXRUYXNrKHRhc2spLnRhc2tFbGVtZW50KTtcbiAgICBPYmplY3QudmFsdWVzKGJ1dHRvbnMpLmZvckVhY2goKGJ0bikgPT4ge1xuICAgICAgYnRuLmRpc2FibGVkID0gIXNob3VsZFRhc2tsaXN0QmVVc2FibGU7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBNYXJrIHRhc2sgYXMgY29tcGxldGVcbiAqIEBwYXJhbSB7VGFza30gY29tcGxldGVkVGFzayAtIHRhc2sgdGhhdCBoYXMgYmVlbiBjb21wbGV0ZWRcbiAqL1xuY29uc3QgY29tcGxldGVUYXNrID0gKGNvbXBsZXRlZFRhc2spID0+IHtcbiAgY29uc3QgeyB0YXNrSW5kZXgsIHRhc2tFbGVtZW50IH0gPSBnZXRUYXNrKGNvbXBsZXRlZFRhc2spO1xuXG4gIC8vIG1hcmsgdGFzayBhcyBjb21wbGV0ZWQgYW5kIG1vdmUgaXQgdG8gZW5kIG9mIERPTSBsaXN0XG4gIHJlbW92ZVRhc2tGcm9tRG9tKGNvbXBsZXRlZFRhc2spO1xuICBhZGRUYXNrVG9Eb20odGFza0VsZW1lbnQsICdlbmQnKTtcbiAgdGFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsIGZhbHNlKTtcbiAgdGFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdjb21wbGV0ZWQnLCB0cnVlKTtcbiAgdGFza0VsZW1lbnQuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcudGV4dC1jb250YWluZXInKS5vbmNsaWNrID0gbnVsbDtcblxuICAvLyBtb3ZlIHRhc2sgdG8gZW5kIG9mIHRhc2tzIGFycmF5XG4gIHRhc2tzLnNwbGljZSh0YXNrSW5kZXgsIDEpO1xuICB0YXNrcy5wdXNoKGNvbXBsZXRlZFRhc2spO1xuXG4gIC8vIHVwZGF0ZSBzZWxlY3RlZCBwcm9wZXJ0eSBvZiB0YXNrXG4gIHVwZGF0ZVRhc2soY29tcGxldGVkVGFzaywge1xuICAgIC4uLmNvbXBsZXRlZFRhc2ssXG4gICAgc2VsZWN0ZWQ6IGZhbHNlLFxuICAgIGNvbXBsZXRlZDogdHJ1ZSxcbiAgfSk7XG59O1xuXG5leHBvcnQge1xuICBpbml0aWFsaXplVGFza0xpc3QsXG4gIGFkZFRhc2ssXG4gIGdldFRhc2tzLFxuICB1cGRhdGVUYXNrLFxuICBkZWxldGVUYXNrLFxuICBpbmNyZW1lbnRQb21vZG9ybyxcbiAgc2VsZWN0VGFzayxcbiAgc2VsZWN0Rmlyc3RUYXNrLFxuICBkZXNlbGVjdEFsbFRhc2tzLFxuICBnZXRDdXJyZW50bHlTZWxlY3RlZFRhc2ssXG4gIHNldFRhc2tsaXN0VXNhYmlsaXR5LFxuICBjb21wbGV0ZVRhc2ssXG59O1xuIiwiLyoqXG4gKiBAZmlsZSBNYW5hZ2UgcHJvZ3Jlc3MgcmluZyBmb3IgcGFnZVxuICovXG5cbmxldCBwcm9ncmVzc1JpbmdFbGVtZW50O1xuXG4vKipcbiAqIFNldCBwcm9ncmVzcyByaW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gcHJvZ3Jlc3MgcmluZyBlbGVtZW50XG4gKi9cbmNvbnN0IGluaXRpYWxpemVQcm9ncmVzc1JpbmcgPSAoZWxlbWVudCkgPT4ge1xuICBwcm9ncmVzc1JpbmdFbGVtZW50ID0gZWxlbWVudDtcbn07XG5cbi8qKlxuICogR2V0IHByb2dyZXNzXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0gY3VycmVudCBwcm9ncmVzc1xuICovXG5jb25zdCBnZXRQcm9ncmVzcyA9ICgpID0+IHByb2dyZXNzUmluZ0VsZW1lbnQucHJvZ3Jlc3M7XG5cbi8qKlxuICogU2V0IHByb2dyZXNzXG4gKiBAcGFyYW0ge251bWJlcn0gcHJvZ3Jlc3MgLSBwcm9ncmVzcyB0byBzZXRcbiAqL1xuY29uc3Qgc2V0UHJvZ3Jlc3MgPSAocHJvZ3Jlc3MpID0+IHtcbiAgcHJvZ3Jlc3NSaW5nRWxlbWVudC5wcm9ncmVzcyA9IEpTT04uc3RyaW5naWZ5KHByb2dyZXNzKTtcbn07XG5cbi8qKlxuICogU2V0IHJhZGl1cyBvZiByaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzIC0gbmV3IHJhZGl1cyB0byBzZXRcbiAqL1xuY29uc3Qgc2V0UmFkaXVzU3Ryb2tlID0gKHJhZGl1cywgc3Ryb2tlKSA9PiB7XG4gIHByb2dyZXNzUmluZ0VsZW1lbnQucmFkaXVzID0gcmFkaXVzO1xuICBwcm9ncmVzc1JpbmdFbGVtZW50LnN0cm9rZSA9IHN0cm9rZTtcbn07XG5cbmV4cG9ydCB7IGluaXRpYWxpemVQcm9ncmVzc1JpbmcsIGdldFByb2dyZXNzLCBzZXRQcm9ncmVzcywgc2V0UmFkaXVzU3Ryb2tlIH07XG4iLCIvKipcbiAqIEBhdXRob3IgRmVybmFuZG8gQnJhY2Ftb250ZVxuICogQGZpbGUgVGltZXIgc2NyaXB0IHVzZWQgdG8gZW11bGF0ZSB0aGUgcG9tb2Rvcm8gcHJvY2Vzc1xuICovXG5cbmxldCB0aW1lckVsZW1lbnQ7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aW1lciBjb21wb25lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSB0aW1lciBlbGVtZW50XG4gKi9cbmNvbnN0IGluaXRpYWxpemVUaW1lciA9IChlbGVtZW50KSA9PiB7XG4gIHRpbWVyRWxlbWVudCA9IGVsZW1lbnQ7XG59O1xuXG4vKipcbiAqIFNldCB0aW1lIG9mIHRpbWVyIGNvbXBvbmVudFxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgLSBuZXcgdGltZSBvZiB0aW1lciAoaW4gc2Vjb25kcylcbiAqL1xuY29uc3Qgc2V0VGltZXIgPSAodGltZSkgPT4ge1xuICB0aW1lckVsZW1lbnQudGltZSA9IHRpbWU7XG59O1xuXG5leHBvcnQgeyBpbml0aWFsaXplVGltZXIsIHNldFRpbWVyIH07XG4iLCIvKipcbiAqIEBmaWxlIE1hbmFnZSBkaXNwbGF5aW5nIGFubm91bmNlbWVudHNcbiAqL1xuXG5sZXQgYW5ub3VuY2VtZW50Q29udGFpbmVyO1xubGV0IGFubm91bmNlbWVudEVsZW1lbnQ7XG5sZXQgeWVzQnV0dG9uO1xubGV0IG5vQnV0dG9uO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYW5ub3VuY2VtZW50IGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGFubm91bmNlbWVudEVsZW1lbnQgLSBhbm5vdW5jZW1lbnQgZWxlbWVudFxuICovXG5jb25zdCBpbml0aWFsaXplQW5ub3VuY2VtZW50ID0gKGNvbnRhaW5lckVsZW1lbnQpID0+IHtcbiAgYW5ub3VuY2VtZW50Q29udGFpbmVyID0gY29udGFpbmVyRWxlbWVudDtcbiAgYW5ub3VuY2VtZW50RWxlbWVudCA9IGFubm91bmNlbWVudENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuYW5ub3VuY2VtZW50Jyk7XG4gIHllc0J1dHRvbiA9IGFubm91bmNlbWVudENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcueWVzLWJ1dHRvbicpO1xuICBub0J1dHRvbiA9IGFubm91bmNlbWVudENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcubm8tYnV0dG9uJyk7XG4gIHllc0J1dHRvbi5vbm1vdXNlZG93biA9IChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCk7XG4gIG5vQnV0dG9uLm9ubW91c2Vkb3duID0gKGUpID0+IGUucHJldmVudERlZmF1bHQoKTtcbn07XG5cbi8qKlxuICogU2V0IGFuIGFubm91bmNlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGFubm91bmNlbWVudCAtIGFubm91bmNlbWVudCB0byBkaXNwbGF5XG4gKi9cbmNvbnN0IHNldEFubm91bmNlbWVudCA9IChhbm5vdW5jZW1lbnQpID0+IHtcbiAgYW5ub3VuY2VtZW50RWxlbWVudC5pbm5lclRleHQgPSBhbm5vdW5jZW1lbnQ7XG59O1xuXG4vKipcbiAqIFNldCB5ZXMgYnV0dG9uIG9uIGNsaWNrIGNhbGxiYWNrXG4gKiBAcGFyYW0geygpID0+IHZvaWR9IGNhbGxiYWNrIC0geWVzIGJ1dHRvbiBvbmNsaWNrIGNhbGxiYWNrXG4gKi9cbmNvbnN0IHNldFllc0J1dHRvbkNhbGxiYWNrID0gKGNhbGxiYWNrKSA9PiB7XG4gIHllc0J1dHRvbi5vbmNsaWNrID0gY2FsbGJhY2s7XG59O1xuXG4vKipcbiAqIFNldCBubyBidXR0b24gb24gY2xpY2sgY2FsbGJhY2tcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gY2FsbGJhY2sgLSBubyBidXR0b24gb25jbGljayBjYWxsYmFja1xuICovXG5jb25zdCBzZXROb0J1dHRvbkNhbGxiYWNrID0gKGNhbGxiYWNrKSA9PiB7XG4gIG5vQnV0dG9uLm9uY2xpY2sgPSBjYWxsYmFjaztcbn07XG5cbi8qKlxuICogVG9nZ2xlIHZpc2liaWxpdHkgb2YgYnV0dG9uc1xuICogQHBhcmFtIHsndmlzaWJsZScgfCAnaGlkZGVuJ30gdmlzaWJpbGl0eSAtIGJ1dHRvbiB2aXNpYmlsaXR5XG4gKi9cbmNvbnN0IHNldEJ1dHRvblZpc2liaWxpdHkgPSAodmlzaWJpbGl0eSkgPT4ge1xuICBpZiAodmlzaWJpbGl0eSA9PT0gJ3Zpc2libGUnKSB7XG4gICAgeWVzQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgIG5vQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICB9IGVsc2Uge1xuICAgIHllc0J1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICBub0J1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgfVxufTtcblxuZXhwb3J0IHtcbiAgaW5pdGlhbGl6ZUFubm91bmNlbWVudCxcbiAgc2V0QW5ub3VuY2VtZW50LFxuICBzZXRZZXNCdXR0b25DYWxsYmFjayxcbiAgc2V0Tm9CdXR0b25DYWxsYmFjayxcbiAgc2V0QnV0dG9uVmlzaWJpbGl0eSxcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1hd2FpdC1pbi1sb29wICovXG4vKipcbiAqIEBmaWxlIEVudHJ5IHBvaW50IGZvciBhcHBsaWNhdGlvblxuICovXG5cbmltcG9ydCAnLi4vc3R5bGVzL3N0eWxlLmNzcyc7XG5pbXBvcnQgeyBUaW1lciwgUHJvZ3Jlc3NSaW5nLCBUYXNrTGlzdCB9IGZyb20gJy4uL2NvbXBvbmVudHMnO1xuaW1wb3J0IHtcbiAgY29tcGxldGVUYXNrLFxuICBkZXNlbGVjdEFsbFRhc2tzLFxuICBnZXRDdXJyZW50bHlTZWxlY3RlZFRhc2ssXG4gIGluY3JlbWVudFBvbW9kb3JvLFxuICBpbml0aWFsaXplVGFza0xpc3QsXG4gIHNlbGVjdEZpcnN0VGFzayxcbiAgc2V0VGFza2xpc3RVc2FiaWxpdHksXG59IGZyb20gJy4vdGFza0xpc3QnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZVByb2dyZXNzUmluZywgc2V0UHJvZ3Jlc3MgfSBmcm9tICcuL3Byb2dyZXNzUmluZyc7XG5pbXBvcnQgeyBpbml0aWFsaXplVGltZXIsIHNldFRpbWVyIH0gZnJvbSAnLi90aW1lcic7XG5pbXBvcnQge1xuICBpbml0aWFsaXplQW5ub3VuY2VtZW50LFxuICBzZXRBbm5vdW5jZW1lbnQsXG4gIHNldFllc0J1dHRvbkNhbGxiYWNrLFxuICBzZXROb0J1dHRvbkNhbGxiYWNrLFxuICBzZXRCdXR0b25WaXNpYmlsaXR5LFxufSBmcm9tICcuL2Fubm91bmNlbWVudCc7XG5pbXBvcnQge1xuICBQT01PRE9ST19BTk5PVU5DRU1FTlQsXG4gIFNIT1JUX0JSRUFLX0FOTk9VTkNFTUVOVCxcbiAgTE9OR19CUkVBS19BTk5PVU5DRU1FTlQsXG4gIFBPTU9ET1JPX0lOVEVSVkFMLFxuICBTSE9SVF9CUkVBS19JTlRFUlZBTCxcbiAgTE9OR19CUkVBS19JTlRFUlZBTCxcbiAgRU5EX09GX1NFU1NJT05fQU5OT1VOQ0VNRU5ULFxuICBUQVNLX0NPTVBMRVRJT05fUVVFU1RJT04sXG4gIE5PX1RBU0tTX0FOTk9VTkNFTUVOVCxcbn0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IGluaXRpYWxpemVJbnRlcnZhbExlbmd0aHMsIHRpY2sgfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgndGltZXItY29tcG9uZW50JywgVGltZXIpO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdwcm9ncmVzcy1yaW5nJywgUHJvZ3Jlc3NSaW5nKTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgndGFzay1saXN0JywgVGFza0xpc3QpO1xuXG5sZXQgaXNTZXNzaW9uT25nb2luZyA9IGZhbHNlO1xuXG4vKipcbiAqIFN0YXJ0cyBhbmQgcnVucyBpbnRlcnZhbCB1bnRpbCBpbnRlcnZhbCBpcyBjb21wbGV0ZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbExlbmd0aCAtIGxlbmd0aCBvZiBpbnRlcnZhbCAoaW4gc2Vjb25kcylcbiAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IC0gaW1wbGljaXRseSByZXR1cm5zIFByb21pc2UgYWZ0ZXIgY3VyclRpbWUgcmVhY2hlcyAwXG4gKi9cbmNvbnN0IHN0YXJ0SW50ZXJ2YWwgPSBhc3luYyAoaW50ZXJ2YWxMZW5ndGgpID0+IHtcbiAgbGV0IGN1cnJUaW1lID0gaW50ZXJ2YWxMZW5ndGg7XG4gIHdoaWxlIChjdXJyVGltZSA+PSAwKSB7XG4gICAgLy8gcXVpdCBpZiBzZXNzaW9uIHN0b3BzXG4gICAgaWYgKCFpc1Nlc3Npb25PbmdvaW5nKSB7XG4gICAgICBzZXRUaW1lcigwKTtcbiAgICAgIHNldFByb2dyZXNzKDApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBjdXJyUHJvZ3Jlc3MgPSAoMTAwICogY3VyclRpbWUpIC8gaW50ZXJ2YWxMZW5ndGg7XG4gICAgc2V0VGltZXIoY3VyclRpbWUpO1xuICAgIHNldFByb2dyZXNzKGN1cnJQcm9ncmVzcyk7XG4gICAgYXdhaXQgdGljaygxKTtcbiAgICBjdXJyVGltZS0tO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuY29uc3Qge1xuICBwb21vZG9yb0xlbmd0aCxcbiAgc2hvcnRCcmVha0xlbmd0aCxcbiAgbG9uZ0JyZWFrTGVuZ3RoLFxufSA9IGluaXRpYWxpemVJbnRlcnZhbExlbmd0aHMoKTtcblxuLyoqXG4gKiBIYW5kbGVzIHBvbW9kb3JvIGFwcCwgZGlzcGF0Y2hlcyBhY3Rpb25zIHRvIGNvbXBvbmVudHMgZGVwZW5kaW5nIG9uIHRoZSBjdXJyZW50IGludGVydmFsXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaGFuZ2VTZXNzaW9uQnV0dG9uIC0gY2hhbmdlcyBzZXNzaW9uIGJ1dHRvbiBmcm9tIHN0YXJ0IHRvIGVuZFxuICogQHJldHVybiB7UHJvbWlzZTxudW1iZXI+fSAtIG51bWJlciBvZiBwb21vZG9yb3MgY29tcGxldGVkIGR1cmluZyBzZXNzaW9uXG4gKi9cbmNvbnN0IHN0YXJ0U2Vzc2lvbiA9IGFzeW5jIChjaGFuZ2VTZXNzaW9uQnV0dG9uKSA9PiB7XG4gIGxldCBudW1Qb21vZG9yb3MgPSAwO1xuICBsZXQgY3VyckludGVydmFsID0gUE9NT0RPUk9fSU5URVJWQUw7XG4gIGxldCBjdXJyU2VsZWN0ZWRUYXNrID0gbnVsbDtcblxuICAvLyBjb250aW51ZSBsb29waW5nIGlmIHNlc3Npb24gaGFzIG5vdCBiZWVuIGVuZGVkXG4gIHdoaWxlIChpc1Nlc3Npb25PbmdvaW5nKSB7XG4gICAgaWYgKGN1cnJJbnRlcnZhbCA9PT0gUE9NT0RPUk9fSU5URVJWQUwpIHtcbiAgICAgIC8vIHVzZSBwcmV2aW91cyBjdXJyVGFzayBvciBuZXh0IGF2YWlsYWJsZVxuICAgICAgLy8gc3RvcCBpZiBubyB0YXNrcyBhcmUgYXZhaWxhYmxlXG4gICAgICBjdXJyU2VsZWN0ZWRUYXNrID0gZ2V0Q3VycmVudGx5U2VsZWN0ZWRUYXNrKCk7XG4gICAgICBpZiAoIWN1cnJTZWxlY3RlZFRhc2spIGN1cnJTZWxlY3RlZFRhc2sgPSBzZWxlY3RGaXJzdFRhc2soKTtcbiAgICAgIGlmICghY3VyclNlbGVjdGVkVGFzaykgcmV0dXJuIG51bVBvbW9kb3JvcyA9PT0gMCA/IC0xIDogbnVtUG9tb2Rvcm9zO1xuXG4gICAgICBpZiAobnVtUG9tb2Rvcm9zID09PSAwKSBjaGFuZ2VTZXNzaW9uQnV0dG9uKCk7XG5cbiAgICAgIC8vIGRpc2FibGUgdGFza2xpc3RcbiAgICAgIHNldFRhc2tsaXN0VXNhYmlsaXR5KGZhbHNlKTtcbiAgICAgIHNldEFubm91bmNlbWVudChQT01PRE9ST19BTk5PVU5DRU1FTlQpO1xuXG4gICAgICAvLyBzdGFydCBwb21vZG9yb1xuICAgICAgaWYgKCEoYXdhaXQgc3RhcnRJbnRlcnZhbChwb21vZG9yb0xlbmd0aCkpKSByZXR1cm4gbnVtUG9tb2Rvcm9zO1xuXG4gICAgICBjdXJyU2VsZWN0ZWRUYXNrID0gaW5jcmVtZW50UG9tb2Rvcm8oY3VyclNlbGVjdGVkVGFzayk7IC8vIGluY3JlbWVudCB0YXNrIGlmIHBvbW8gaXMgZnVsbHkgY29tcGxldGVkXG5cbiAgICAgIC8vIGNoZWNrIGlmIGJyZWFrIHNob3VsZCBiZSBzaG9ydCBvciBsb25nXG4gICAgICBudW1Qb21vZG9yb3MrKztcbiAgICAgIGNvbnN0IHNob3VsZEJlTG9uZ0JyZWFrID0gbnVtUG9tb2Rvcm9zID4gMCAmJiBudW1Qb21vZG9yb3MgJSA0ID09PSAwO1xuICAgICAgY3VyckludGVydmFsID0gc2hvdWxkQmVMb25nQnJlYWtcbiAgICAgICAgPyBMT05HX0JSRUFLX0lOVEVSVkFMXG4gICAgICAgIDogU0hPUlRfQlJFQUtfSU5URVJWQUw7XG5cbiAgICAgIC8vIHJlZW5hYmxlIHRhc2sgbGlzdFxuICAgICAgc2V0VGFza2xpc3RVc2FiaWxpdHkodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHByb21wdCB1c2VyXG4gICAgICBzZXRCdXR0b25WaXNpYmlsaXR5KCd2aXNpYmxlJyk7XG4gICAgICBzZXRBbm5vdW5jZW1lbnQoVEFTS19DT01QTEVUSU9OX1FVRVNUSU9OKTtcblxuICAgICAgLy8gY29weSBjdXJyIHNlbGVjdGVkIHRhc2sgZHVlIHRvIHdlaXJkIGxvb3AgY2xvc3VyZXNcbiAgICAgIGNvbnN0IGN1cnJTZWxlY3RlZFRhc2tDb3B5ID0gY3VyclNlbGVjdGVkVGFzaztcbiAgICAgIGNvbnN0IGN1cnJBbm5vdW5jZW1lbnQgPVxuICAgICAgICBjdXJySW50ZXJ2YWwgPT09IExPTkdfQlJFQUtfQU5OT1VOQ0VNRU5UXG4gICAgICAgICAgPyBMT05HX0JSRUFLX0FOTk9VTkNFTUVOVFxuICAgICAgICAgIDogU0hPUlRfQlJFQUtfQU5OT1VOQ0VNRU5UO1xuXG4gICAgICBsZXQgd2FzQnV0dG9uQ2xpY2tlZCA9IGZhbHNlO1xuICAgICAgc2V0WWVzQnV0dG9uQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBjb21wbGV0ZVRhc2soY3VyclNlbGVjdGVkVGFza0NvcHkpO1xuICAgICAgICBzZWxlY3RGaXJzdFRhc2soKTtcbiAgICAgICAgc2V0QW5ub3VuY2VtZW50KGN1cnJBbm5vdW5jZW1lbnQpO1xuICAgICAgICBzZXRCdXR0b25WaXNpYmlsaXR5KCdoaWRkZW4nKTtcbiAgICAgICAgd2FzQnV0dG9uQ2xpY2tlZCA9IHRydWU7XG4gICAgICB9KTtcbiAgICAgIHNldE5vQnV0dG9uQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBzZXRBbm5vdW5jZW1lbnQoY3VyckFubm91bmNlbWVudCk7XG4gICAgICAgIHNldEJ1dHRvblZpc2liaWxpdHkoJ2hpZGRlbicpO1xuICAgICAgICB3YXNCdXR0b25DbGlja2VkID0gdHJ1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoXG4gICAgICAgICEoYXdhaXQgc3RhcnRJbnRlcnZhbChcbiAgICAgICAgICBjdXJySW50ZXJ2YWwgPT09IExPTkdfQlJFQUtfSU5URVJWQUxcbiAgICAgICAgICAgID8gbG9uZ0JyZWFrTGVuZ3RoXG4gICAgICAgICAgICA6IHNob3J0QnJlYWtMZW5ndGgsXG4gICAgICAgICkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG51bVBvbW9kb3JvcztcbiAgICAgIH1cblxuICAgICAgaWYgKCF3YXNCdXR0b25DbGlja2VkKSB7XG4gICAgICAgIHNldEJ1dHRvblZpc2liaWxpdHkoJ2hpZGRlbicpO1xuICAgICAgfVxuICAgICAgY3VyckludGVydmFsID0gUE9NT0RPUk9fSU5URVJWQUw7XG4gICAgfVxuXG4gICAgLy8gcmVzZXQgcHJvZ3Jlc3MgYW5kIGdpdmUgaXQgdGltZSB0byByZXNldCAocHJvZ3Jlc3MtcmluZyB0cmFuc2l0aW9uIGlzIDM1cylcbiAgICBzZXRQcm9ncmVzcygxMDApO1xuICAgIGF3YWl0IHRpY2soMC4yNSk7XG4gIH1cbiAgcmV0dXJuIG51bVBvbW9kb3Jvcztcbn07XG5cbi8qKlxuICogSGFuZGxlIGVuZCBvZiBzZXNzaW9uXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBzZXNzaW9uQnV0dG9uIC0gc2Vzc2lvbiBidXR0b24gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IG51bVBvbW9kb3JvcyAtIG51bWJlciBvZiBwb21vZG9yb3MgY29tcGxldGVkIGR1cmluZyB0aGUgc2Vzc2lvblxuICovXG5jb25zdCBlbmRTZXNzaW9uID0gKHNlc3Npb25CdXR0b24sIG51bVBvbW9kb3JvcykgPT4ge1xuICBzZXRBbm5vdW5jZW1lbnQoXG4gICAgbnVtUG9tb2Rvcm9zID09PSAtMSA/IE5PX1RBU0tTX0FOTk9VTkNFTUVOVCA6IEVORF9PRl9TRVNTSU9OX0FOTk9VTkNFTUVOVCxcbiAgKTtcbiAgZGVzZWxlY3RBbGxUYXNrcygpO1xuICBzZXNzaW9uQnV0dG9uLmlubmVyVGV4dCA9ICdTdGFydCc7XG4gIHNlc3Npb25CdXR0b24uY2xhc3NOYW1lID0gJ3Nlc3Npb24tYnV0dG9uJztcbiAgLy8gVE9ETzogc3RvcCBzZXNzaW9uXG4gIC8vIFRPRE86IGRpc3BsYXkgbWV0cmljc1xufTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gIGNvbnN0IHByb2dyZXNzUmluZ0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZ3Jlc3MtcmluZycpO1xuICBjb25zdCB0aW1lckVsZW1lbnQgPSBwcm9ncmVzc1JpbmdFbGVtZW50LnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnRpbWVyJyk7XG4gIGNvbnN0IGFubm91bmNlbWVudEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYW5ub3VuY2VtZW50LWNvbnRhaW5lcicpO1xuXG4gIGluaXRpYWxpemVQcm9ncmVzc1JpbmcocHJvZ3Jlc3NSaW5nRWxlbWVudCk7XG4gIGluaXRpYWxpemVUaW1lcih0aW1lckVsZW1lbnQpO1xuICBpbml0aWFsaXplVGFza0xpc3QoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhc2stbGlzdCcpKTtcbiAgaW5pdGlhbGl6ZUFubm91bmNlbWVudChhbm5vdW5jZW1lbnRFbGVtZW50KTtcblxuICBkZXNlbGVjdEFsbFRhc2tzKCk7XG4gIHNldFRpbWVyKHBvbW9kb3JvTGVuZ3RoKTtcblxuICAvLyBzdGFydCBzZXNzaW9uIHdoZW4gc3RhcnQgYnV0dG9uIGlzIGNsaWNrZWRcbiAgY29uc3Qgc3RhcnRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2Vzc2lvbi1idXR0b24nKTtcbiAgc3RhcnRCdXR0b24ub25tb3VzZWRvd24gPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfTtcbiAgc3RhcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZSkgPT4ge1xuICAgIGlmIChlLnRhcmdldC5pbm5lclRleHQgPT09ICdTdGFydCcpIHtcbiAgICAgIGlzU2Vzc2lvbk9uZ29pbmcgPSB0cnVlO1xuICAgICAgY29uc3QgY2hhbmdlU2Vzc2lvbkJ1dHRvbiA9ICgpID0+IHtcbiAgICAgICAgZS50YXJnZXQuaW5uZXJUZXh0ID0gJ0VuZCc7XG4gICAgICAgIGUudGFyZ2V0LmNsYXNzTmFtZSA9ICdzZXNzaW9uLWJ1dHRvbiBpbi1zZXNzaW9uJztcbiAgICAgIH07XG4gICAgICBjb25zdCBudW1Qb21vZG9yb3MgPSBhd2FpdCBzdGFydFNlc3Npb24oY2hhbmdlU2Vzc2lvbkJ1dHRvbik7XG4gICAgICAvLyByZXNldCBwcm9ncmVzcyBhbmQgZ2l2ZSBpdCB0aW1lIHRvIHJlc2V0IChwcm9ncmVzcy1yaW5nIHRyYW5zaXRpb24gaXMgMzVzKVxuICAgICAgc2V0UHJvZ3Jlc3MoMTAwKTtcbiAgICAgIGF3YWl0IHRpY2soMC4yNSk7XG4gICAgICBzZXRUYXNrbGlzdFVzYWJpbGl0eSh0cnVlKTtcbiAgICAgIGVuZFNlc3Npb24oZS50YXJnZXQsIG51bVBvbW9kb3Jvcyk7XG4gICAgICBzZXRCdXR0b25WaXNpYmlsaXR5KCdoaWRkZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXNTZXNzaW9uT25nb2luZyA9IGZhbHNlO1xuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=