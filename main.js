(()=>{"use strict";const t=({element:t,...e})=>{const n=document.createElement(t);return Object.entries(e).forEach((([t,e])=>{"innerText"===t||"innerHTML"===t?n[t]=e:n.setAttribute(t,e)})),n};class e extends HTMLElement{static get observedAttributes(){return["title","description"]}constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.styleElement=document.createElement("style"),this.styleElement.innerText="\n      .container {\n        background: lightblue;\n        font-family: Roboto, sans-serif;\n        margin: 1em;\n        padding: 0.5em;\n        position: relative;\n        border-radius: 5px;\n      }\n\n      .title {\n        font-size: 1.25rem;\n      }\n\n      .description {\n        font-size: 1rem;\n        color: darkgray;\n      }\n\n      .task-button {\n        position: absolute;\n        padding: 0.5em;\n        color: rgba(51, 51, 51, 0.5);\n      }\n\n      .task-button:hover {\n        border-radius: 50%;\n        background: rgba(238, 238, 238, 0.5);\n        color: rgba(51, 51, 51, 1);\n        cursor: pointer;\n      }\n\n      #edit-button {\n        display: none;\n      }\n\n      .container:hover > #edit-button {\n        display: initial;\n        top: 0;\n        right: 0;\n      }\n\n      #finish-button {\n        bottom: 0;\n        right: 1.5em;\n      }\n\n      #delete-button {\n        bottom: 0;\n        right: 0;\n      }\n    ",this.materialIconLinkElement=t({element:"link",rel:"stylesheet",href:"https://fonts.googleapis.com/icon?family=Material+Icons"}),this.containerElement=t({element:"div",class:"container"}),this.titleElement=t({element:"h1",class:"title"}),this.descriptionElement=t({element:"h2",class:"description"}),this.editTaskButton=t({element:"span",class:"material-icons task-button",id:"edit-button",innerText:"mode"}),this.finishTaskButton=t({element:"span",class:"material-icons task-button",id:"finish-button",innerText:"done"}),this.deleteTaskButton=t({element:"span",class:"material-icons task-button",id:"delete-button",innerText:"delete"}),this.shadow.append(this.materialIconLinkElement,this.styleElement,this.containerElement),this.containerElement.append(this.titleElement,this.descriptionElement,this.editTaskButton,this.finishTaskButton,this.deleteTaskButton)}attributeChangedCallback(t,e,n){switch(t){case"title":this.titleElement.innerText=n;break;case"description":this.descriptionElement.innerText=n}}}customElements.define("task-item",e);class n extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.styleElement=document.createElement("style"),this.styleElement.innerText="\n      .task-form {\n        margin: 1em;\n        padding: 1em 20%;\n        font-family: Roboto, sans-serif;\n        display: flex;\n        flex-direction: column;\n        border-radius: 5px;\n      }\n\n      .task-input[type='text'] {\n        margin-bottom: 1em;\n        padding: 0.75em;\n        border-radius: 5px;\n        border: 1px solid #777;\n        font-size: 0.9rem;\n        color: #444;\n      }\n\n      .task-input[type='text']:focus {\n        border: 2px solid #0077b6;\n        outline: none;\n        box-shadow: none;\n      }\n\n      .task-input[type='text']::placeholder {\n        color: #777;\n      }\n\n      #submit-input {\n        width: 100%;\n        margin: auto;\n        background: rgba(51, 51, 51, 0.75);\n        border-radius: 5px;\n        outline: none;\n        border: none;\n        color: white;\n        padding: 1em;\n        font-size: 1rem;\n      }\n\n      #submit-input:hover {\n        cursor: pointer;\n        background: rgba(51, 51, 51, 1);\n      }\n    ",this.containerElement=t({element:"form",class:"task-form"}),this.titleInputLabel=t({element:"label",for:"title-input",innerText:"Title"}),this.titleInputElement=t({element:"input",class:"task-input",id:"title-input",type:"text",name:"title",placeholder:"task title"}),this.descriptionInputLabel=t({element:"label",for:"description-input",innerText:"Description"}),this.descriptionInputElement=t({element:"input",class:"task-input",id:"description-input",type:"text",name:"description",placeholder:"task description"}),this.submitInputElement=t({element:"input",class:"task-input",id:"submit-input",type:"submit",value:"Add"}),this.shadow.append(this.styleElement,this.containerElement),this.containerElement.append(this.titleInputLabel,this.titleInputElement,this.descriptionInputLabel,this.descriptionInputElement,this.submitInputElement)}}customElements.define("task-item-form",n);class i extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.styleElement=document.createElement("style"),this.styleElement.innerText="\n      .container {\n        margin: 1em;\n        font-family: Roboto, sans-serif;\n        border: 1px solid #aaa;\n        border-radius: 5px;\n      }\n\n      .title {\n        text-align: center;\n      }\n    ",this.containerElement=t({element:"div",class:"container"}),this.titleElement=t({element:"h1",class:"title",innerText:"Task List"}),this.taskItemListContainerElement=t({element:"div",class:"task-item-container"}),this.taskItemFormElement=t({element:"task-item-form",class:"task-item-form"}),this.shadow.append(this.styleElement,this.containerElement),this.containerElement.append(this.titleElement,this.taskItemListContainerElement,this.taskItemFormElement)}}customElements.define("task-list",i);let s=[];const o=t({element:"task-list"}),r=Array.from(o.shadowRoot.childNodes).find((t=>"container"===t.getAttribute("class"))),a=r.querySelector(".task-item-container"),l=r.querySelector(".task-item-form"),d=Array.from(l.shadowRoot.childNodes).find((t=>"task-form"===t.getAttribute("class"))),m=Array.from(d.querySelectorAll('.task-input[type="text"]')).reduce(((t,e)=>({...t,[e.name]:e})),{}),c=t=>{const{title:e,description:n}=t,i=s.findIndex((({title:t,description:i})=>e===t&&n===i));s.splice(i,1),window.localStorage.setItem("tasks",JSON.stringify(s)),a.querySelector(`[title="${e}"][description="${n}"]`).remove()},p=e=>{const{title:n,description:i}=e,s=t({element:"task-item",title:n,description:i}),o=(t=>{const e=Array.from(Array.from(t.shadowRoot.childNodes).find((t=>"container"===t.getAttribute("class"))).querySelectorAll(".task-button"));return{finish:e.find((t=>"finish-button"===t.getAttribute("id"))),delete:e.find((t=>"delete-button"===t.getAttribute("id"))),edit:e.find((t=>"edit-button"===t.getAttribute("id")))}})(s);o.finish.addEventListener("click",(()=>c(e))),o.delete.addEventListener("click",(()=>c(e))),o.edit.addEventListener("click",(()=>window.alert("editting task!"))),a.append(s)},u=t=>{t.preventDefault();const{title:{value:e},description:{value:n}}=m,[i,o]=[e.trim(),n.trim()];var r;i&&o?s.some((({title:t,description:e})=>i===t&&o===e))?console.error({title:i,description:o}," already defined"):(r={title:i,description:o},s.push(r),window.localStorage.setItem("tasks",JSON.stringify(s)),p(r),Object.values(m).forEach((t=>({...t,value:""})))):console.error("task fields cannot be empty")};window.addEventListener("DOMContentLoaded",(()=>{document.body.appendChild(o),d.addEventListener("submit",u),window.localStorage.getItem("tasks")||window.localStorage.setItem("tasks",JSON.stringify([])),s=JSON.parse(window.localStorage.getItem("tasks")),s.forEach((t=>p(t)))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,