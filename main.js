(()=>{var e={757:(e,t,n)=>{e.exports=n(666)},666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof b?t:b,a=Object.create(o.prototype),i=new O(r||[]);return a._invoke=function(e,t,n){var r=m;return function(o,a){if(r===f)throw new Error("Generator is already running");if(r===p){if("throw"===o)throw a;return _()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var s=L(i,n);if(s){if(s===h)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===m)throw r=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=f;var c=l(e,t,n);if("normal"===c.type){if(r=n.done?p:d,c.arg===h)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=p,n.method="throw",n.arg=c.arg)}}}(e,n,i),a}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var m="suspendedStart",d="suspendedYield",f="executing",p="completed",h={};function b(){}function v(){}function g(){}var y={};y[a]=function(){return this};var k=Object.getPrototypeOf,w=k&&k(k(P([])));w&&w!==n&&r.call(w,a)&&(y=w);var S=g.prototype=b.prototype=Object.create(y);function E(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function n(o,a,i,s){var c=l(e[o],e,a);if("throw"!==c.type){var u=c.arg,m=u.value;return m&&"object"==typeof m&&r.call(m,"__await")?t.resolve(m.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(m).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,s)}))}s(c.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function L(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,L(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=l(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function P(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:_}}function _(){return{value:t,done:!0}}return v.prototype=S.constructor=g,g.constructor=v,v.displayName=c(g,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,c(e,s,"GeneratorFunction")),e.prototype=Object.create(S),e},e.awrap=function(e){return{__await:e}},E(x.prototype),x.prototype[i]=function(){return this},e.AsyncIterator=x,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new x(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},E(S),c(S,s,"Generator"),S[a]=function(){return this},S.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=P,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;T(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:P(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";function e(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function m(e,t,n){return(m=l()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&a(o,n.prototype),o}).apply(null,arguments)}function d(e){var t="function"==typeof Map?new Map:void 0;return(d=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return m(e,arguments,u(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),a(r,e)})(e)}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function p(e,t){if(e){if("string"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?f(e,t):void 0}}function h(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}}(e,t)||p(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var b="Focus.",v="Enjoy your short break!",g="Good work. Enjoy a longer break!",y="Did you finish the task?",k="pomodoroInterval",w="shortBreakInterval",S="longBreakInterval",E="shortBreakLength",x="longBreakLength",L="timerAudio",C="tasks",T={calm:"assets/calm-alarm.mp3",annoying:"assets/original-alarm.mp3",kanye:"assets/kanye-stop.mp3"},O={changeSession:"change current session",changeCurrentTime:"change current time",changeCurrentInterval:"change current interval",changeNumberOfPomodoros:"change number of pomodoros completed",changePomodoroLength:"change pomodoro length",changeShortBreakLength:"change short break length",changeLongBreakLength:"change long break length",changeTimerAudio:"change timer audio",changeSelectedTask:"change currently selected task",incrementSelectedTask:"increment current task",completeSelectedTask:"complete current task",doNotCompleteSelectedTask:"do not complete current task",addToCompletedTasks:"add to completed tasks",clearCompletedTasks:"clear completed tasks"};function P(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?P(Object(r),!0).forEach((function(n){e(t,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):P(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var I=new Audio;I.volume=.2;var A={session:"inactive",numberOfPomodorosCompleted:0,currentTime:0,currentInterval:k,currentSelectedTask:null,completedTasks:[],pomodoroLength:.05,shortBreakLength:0,longBreakLength:0,timerAudio:I},B=Object.values(O).reduce((function(t,n){return _(_({},t),{},e({},n,[]))}),{}),N=function(e){return"object"===s(e)&&null!==e&&Object.entries(e).forEach((function(e){var t=h(e,2),n=t[0],r=t[1];Object.prototype.hasOwnProperty.call(B,n)&&B[n].push(r)})),A},j=function(e,t){switch(e){case O.changeSession:A.session=t;break;case O.changeCurrentTime:A.currentTime=t;break;case O.changeCurrentInterval:A.currentInterval=t;break;case O.changeSelectedTask:A.currentSelectedTask=t;break;case O.incrementSelectedTask:case O.completeSelectedTask:case O.doNotCompleteSelectedTask:break;case O.addToCompletedTasks:A.completedTasks.push(t);break;case O.clearCompletedTasks:A.completedTasks=[];break;case O.changeNumberOfPomodoros:A.numberOfPomodorosCompleted=t;break;case O.changePomodoroLength:A.pomodoroLength=t;break;case O.changeShortBreakLength:A.shortBreakLength=t;break;case O.changeLongBreakLength:A.longBreakLength=t;break;case O.changeTimerAudio:A.timerAudio.src=t;break;default:return}B[e].forEach((function(e){return e(A)}))};function R(e,t,n,r,o,a,i){try{var s=e[a](i),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}function q(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){R(a,r,o,i,s,"next",e)}function s(e){R(a,r,o,i,s,"throw",e)}i(void 0)}))}}var D=n(757),M=n.n(D),F=function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=r.namespace;return t=o?document.createElementNS(o,e):document.createElement(e),Object.entries(n).forEach((function(e){var n=h(e,2),r=n[0],a=n[1];o||!(r in t)?t.setAttribute(r,a):t[r]=a})),t},G=function(e){return"string"==typeof e||e instanceof String?e:null},z=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n="number"==typeof e||e instanceof Number||null!==G(e),r=Number(e);return!n||Number.isNaN(r)?null:t?Math.floor(r):r},H=function(e){if("boolean"==typeof e||e instanceof Boolean)return e;var t=null!==G(e);return!(!t||"true"!==e)||(!t||"false"!==e)&&null},J=function(){var e=q(M().mark((function e(t){return M().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e){return setTimeout(e,1e3*t)})));case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Y=function(e){var t=z(e,!0);return null===t||t<0?null:t},V=function(e){try{var t=e.name,n=e.usedPomodoros,r=e.estimatedPomodoros,o=e.selected,a=e.completed,i=null!==G(t),s=null!==Y(n),c=null!==Y(r),u=null!==H(o),l=null!==H(a);return i&&s&&c&&l&&u?{name:t,usedPomodoros:n,estimatedPomodoros:r,selected:o,completed:a}:null}catch(e){return null}};const K=function(n){i(l,n);var r,a,s=(r=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(r);if(a){var n=u(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return c(this,e)});function l(){var n,r;return t(this,l),(r=s.call(this))._name="",r._usedPomodoros=0,r._estimatedPomodoros=0,r._selected=!1,r._completed=!1,r.shadow=r.attachShadow({mode:"open"}),r.styleElement=document.createElement("style"),r.styleElement.innerText="\n      .item-container {\n        margin-bottom: 1em;\n        padding: 0.5em 2em;\n        border-radius: 5px;\n        position: relative;\n        cursor: pointer;\n      }\n\n      .item-container:focus {\n        outline: none;\n      }\n\n      .item-container.selected.pomodoro {\n        background: #90e0ef;\n      }\n\n      .item-container.selected.short-break {\n        background: #7ce407;\n      }\n\n      .item-container.selected.long-break {\n        background: #f99e3d;\n      }\n\n      .text-container {\n        background: rgba(255, 255, 255, 1);\n        color: #555;\n        position: relative;\n        padding: 0.5em;\n        border-radius: 5px;\n        width: 100%;\n        text-align: left;\n        font: 1rem Source Sans Pro, sans-serif;\n        border: none;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n      }\n\n      .item-container:not(.disabled):not(.selected):not(.completed) > .text-container:hover {\n        background: rgba(255, 255, 255, 0.8);\n      }\n\n      .text-container:focus {\n        outline: none;\n        box-shadow: 0 0 0 2pt #90e0ef;\n      }\n\n      .item-container.selected > .text-container:focus {\n        box-shadow: 0 0 0 2pt #00b4d8;\n      }\n      \n      .task-name {\n        width: 80%;\n        display: inline-block;\n        margin: 0.5em 0;\n      }\n\n      .item-container.completed .task-name {\n        text-decoration: line-through;\n      }\n      \n      .task-pomodoro-container {\n        width: 20%;\n        height: 100%;\n        display: inline-block;\n        position: relative;\n        text-align: right;\n      }\n\n      .task-pomodoro-label {\n        position: absolute;\n        top: -0.5em;\n        right: 0;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      .task-pomodoro {\n        display: inline-block;\n        margin: 1em 0 0 0;\n      }\n\n      .task-button {\n        opacity: 0;\n        position: absolute;\n        border: none;\n        padding: 0.25em;\n        color: rgba(255, 255, 255, 1); \n        background: transparent;\n        border-radius: 50%;\n      }\n\n      .item-container:hover:not(.disabled) > .task-button,\n      .task-button:focus {\n        opacity: 1;\n      }\n\n      .task-button:focus {\n        outline: none;\n        z-index: 1;\n        position: absolute;\n      }\n\n      .task-button:focus {\n        box-shadow: inset 0 0 0 2pt #90e0ef;\n      }\n\n      .item-container.selected > .task-button:focus {\n        box-shadow: inset 0 0 0 2pt #00b4d8;\n      }\n\n      .task-button:hover {\n        border-radius: 50%;\n        color: rgba(255, 255, 255, 0.8); \n        cursor: pointer;\n        background: rgba(255, 255, 255, 0.3);\n      }\n\n      .item-container.selected > .task-button,\n      .item-container.selected > .task-button:hover {\n        color: rgba(0, 0, 0, 0.54);\n      }\n\n      .task-button:disabled {\n        opacity: 0;\n      }\n\n      .task-button-icon {\n        font-size: 1.2rem;\n      }\n\n      #delete-button {\n        top: 50%;\n        right: 0;\n        transform: translate(0, -50%);\n      }\n    ",r.materialIconLinkElement=F("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/icon?family=Material+Icons"}),r.itemContainerElement=F("div",{className:"item-container pomodoro"}),r.textContainerElement=F("button",{className:"text-container",onmouseout:function(e){e.target.blur()},onmousedown:function(e){e.preventDefault()}}),r.nameElement=F("p",{className:"task-name"}),r.pomodoroContainer=F("span",{className:"task-pomodoro-container"}),r.pomodoroLabel=F("label",{className:"task-pomodoro-label",for:"task-pomodoro",innerText:"Pomodoros"}),r.pomodoroElement=F("p",{className:"task-pomodoro",id:"task-pomodoro"}),r.deleteTaskButton=F("button",{className:"task-button",id:"delete-button",onmouseout:function(e){e.target.blur()},onmousedown:function(e){e.preventDefault()}}),r.deleteTaskIcon=F("span",{className:"material-icons task-button-icon",innerText:"delete"}),r.shadow.append(r.materialIconLinkElement,r.styleElement,r.itemContainerElement),r.itemContainerElement.append(r.textContainerElement,r.deleteTaskButton),r.deleteTaskButton.appendChild(r.deleteTaskIcon),r.textContainerElement.append(r.nameElement,r.pomodoroContainer),r.pomodoroContainer.append(r.pomodoroLabel,r.pomodoroElement),N((e(n={},O.changeSession,(function(e){"inactive"===e.session&&(r.itemContainerElement.classList.add("pomodoro"),r.itemContainerElement.classList.remove("short-break"),r.itemContainerElement.classList.remove("long-break"))})),e(n,O.changeCurrentInterval,(function(e){if("active"===e.session)switch(e.currentInterval){case k:r.itemContainerElement.classList.add("pomodoro"),r.itemContainerElement.classList.remove("short-break"),r.itemContainerElement.classList.remove("long-break");break;case w:r.itemContainerElement.classList.remove("pomodoro"),r.itemContainerElement.classList.add("short-break"),r.itemContainerElement.classList.remove("long-break");break;case S:r.itemContainerElement.classList.remove("pomodoro"),r.itemContainerElement.classList.remove("short-break"),r.itemContainerElement.classList.add("long-break");break;default:r.itemContainerElement.classList.add("pomodoro"),r.itemContainerElement.classList.remove("short-break"),r.itemContainerElement.classList.remove("long-break")}})),n)),r}return o(l,[{key:"attributeChangedCallback",value:function(e,t,n){switch(e){case"name":var r=G(n);this.nameElement.innerText=r,this._name=r;break;case"used-pomodoros":var o=Y(n);if(null===o)return void this.setAttribute(e,t);this._usedPomodoros=o,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"estimated-pomodoros":var a=Y(n);if(null===a)return void this.setAttribute(e,t);this._estimatedPomodoros=a,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"selected":var i=H(n);if(null===i)return void this.setAttribute(e,t);this._selected=i,i?this.itemContainerElement.classList.add("selected"):this.itemContainerElement.classList.remove("selected");break;case"completed":var s=H(n);if(null===s)return void this.setAttribute(e,t);this._completed=s,s?this.itemContainerElement.classList.add("completed"):this.itemContainerElement.classList.remove("completed")}}},{key:"name",get:function(){return this._name},set:function(e){var t=G(e);null!==t&&(this._name=t,this.setAttribute("name",this._name))}},{key:"usedPomodoros",get:function(){return this._usedPomodoros},set:function(e){var t=Y(e);null!==t&&(this._usedPomodoros=t,this.setAttribute("used-pomodoros",this._usedPomodoros))}},{key:"estimatedPomodoros",get:function(){return this._estimatedPomodoros},set:function(e){var t=Y(e);null!==t&&(this._estimatedPomodoros=t,this.setAttribute("estimated-pomodoros",this._estimatedPomodoros))}},{key:"selected",get:function(){return this._selected},set:function(e){var t=H(e);null!==t&&(this._selected=t,this.setAttribute("selected",this._selected))}},{key:"completed",get:function(){return this._completed},set:function(e){var t=H(e);null!==t&&(this._completed=t,this.setAttribute("completed",this._completed))}}],[{key:"observedAttributes",get:function(){return["name","estimated-pomodoros","used-pomodoros","selected","completed"]}}]),l}(d(HTMLElement));const U=function(n){i(s,n);var r,o,a=(r=s,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(r);if(o){var n=u(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return c(this,e)});function s(){var n,r;return t(this,s),(r=a.call(this)).shadow=r.attachShadow({mode:"open"}),r.styleElement=document.createElement("style"),r.styleElement.innerText="\n      .task-form {\n        margin: 1em;\n        padding: 1em ;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .field-input-container {\n        margin-bottom: 1em;\n        border-radius: 5px;\n        position: relative;\n        width: 100%;\n        display: flex;\n      }\n\n      .name-input-container {\n        flex: 4;\n        position: relative;\n      }\n\n      .pomodoro-input-container {\n        flex: 1;\n        min-width: 95px;\n        position: relative;\n      }\n\n      .task-input-label {\n        position: absolute;\n        z-index: 2;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      #name-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      #pomodoro-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      .task-input[type='text'],\n      .task-input[type='number'] {\n        padding: 1.5em 0.75em 0.75em 0.75em;\n        border: none;\n        font: 1rem 'Source Sans Pro', sans-serif;\n        color: #444;\n        box-sizing: border-box;\n        width: 100%;\n      }\n\n      .task-input:focus {\n        box-shadow: 0 0 0 2pt #c8c8c8;\n        outline: none;\n        z-index: 1;\n        position: relative;\n      }\n\n      #name-input {\n        border-top-left-radius: 5px;\n        border-bottom-left-radius: 5px;\n      }\n\n      #pomodoro-input {\n        border-top-right-radius: 5px;\n        border-bottom-right-radius: 5px;\n      }\n\n      .task-input[type='text']::placeholder,\n      .task-input[type='number']::placeholder {\n        color: #c8c8c8;\n      }\n\n      #submit-input {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        width: 50%;\n        margin: auto;\n        border-radius: 5px;\n        outline: none;\n        border: none;\n        color: white;\n        padding: 0.5em;\n        font: 1.2rem 'Source Sans Pro', sans-serif;\n      }\n\n      #submit-input.pomodoro {\n        background: rgb(77, 207, 233);\n      }\n\n      #submit-input.short-break {\n        background: #69da00;\n      }\n\n      #submit-input.long-break {\n        background: #f98f38;\n      }\n\n      #submit-input.pomodoro:hover {\n        background: rgb(112, 216, 237);\n        cursor: pointer;\n      }\n\n      #submit-input.short-break:hover {\n        background: #7ce407;\n        cursor: pointer;\n      }\n\n      #submit-input.long-break:hover {\n        background: #f99e3d;\n        cursor: pointer;\n      }\n    ",r.containerElement=F("form",{className:"task-form"}),r.fieldInputContainer=F("div",{className:"field-input-container"}),r.nameInputContainer=F("div",{className:"name-input-container"}),r.nameInputLabel=F("label",{className:"task-input-label",id:"name-input-label",for:"name-input",innerText:"Name"}),r.nameInputElement=F("input",{className:"task-input",id:"name-input",type:"text",name:"name",placeholder:"Task Description...",required:!0}),r.pomodoroInputContainer=F("div",{className:"pomodoro-input-container"}),r.pomodoroInputLabel=F("label",{className:"task-input-label",id:"pomodoro-input-label",for:"pomodoro-input",innerText:"Est Pomodoros"}),r.pomodoroInputElement=F("input",{className:"task-input",id:"pomodoro-input",type:"number",name:"pomodoro",placeholder:"#",min:"1",required:!0}),r.submitInputElement=F("input",{className:"task-input pomodoro",id:"submit-input",type:"submit",value:"ADD"}),r.shadow.append(r.styleElement,r.containerElement),r.containerElement.append(r.fieldInputContainer,r.submitInputElement),r.fieldInputContainer.append(r.nameInputContainer,r.pomodoroInputContainer),r.nameInputContainer.append(r.nameInputLabel,r.nameInputElement),r.pomodoroInputContainer.append(r.pomodoroInputLabel,r.pomodoroInputElement),N((e(n={},O.changeSession,(function(e){"inactive"===e.session&&(r.submitInputElement.className="pomodoro")})),e(n,O.changeCurrentInterval,(function(e){if("active"===e.session)switch(e.currentInterval){case k:r.submitInputElement.className="pomodoro";break;case w:r.submitInputElement.className="short-break";break;case S:r.submitInputElement.className="long-break";break;default:r.submitInputElement.className="pomodoro"}})),n)),r}return s}(d(HTMLElement));customElements.define("task-item",K),customElements.define("task-item-form",U);const W=function(n){i(s,n);var r,o,a=(r=s,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(r);if(o){var n=u(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return c(this,e)});function s(){var n,r;return t(this,s),(r=a.call(this)).shadow=r.attachShadow({mode:"open"}),r.styleElement=document.createElement("style"),r.styleElement.innerText="\n      .container {\n        padding: 1em;\n        font: normal 1rem 'Source Sans Pro', sans-serif;\n        border-radius: 5px;\n        height: 100%;\n        flex: 1 1 0;\n        display: flex;\n        flex-direction: column;\n        box-sizing: border-box;\n      }\n\n      .container.pomodoro {\n        background: #00b4d8;\n      }\n\n      .container.short-break {\n        background: #54C800;\n      }\n\n      .container.long-break {\n        background: #f87335;\n      }\n\n      .task-item-container {\n        flex: 1;\n        overflow: auto;\n      }\n\n      .title {\n        text-align: center;\n        color: #fff;\n        margin-top: 0;\n      }\n    ",r.containerElement=F("div",{className:"container pomodoro"}),r.titleElement=F("h1",{className:"title",innerText:"Task List"}),r.taskItemListContainerElement=F("div",{className:"task-item-container"}),r.taskItemFormElement=F("task-item-form",{className:"task-item-form"}),r.shadow.append(r.styleElement,r.containerElement),r.containerElement.append(r.titleElement,r.taskItemListContainerElement,r.taskItemFormElement),N((e(n={},O.changeSession,(function(e){"inactive"===e.session&&(r.containerElement.className="container pomodoro")})),e(n,O.changeCurrentInterval,(function(e){if("active"===e.session)switch(e.currentInterval){case k:r.containerElement.className="container pomodoro";break;case w:r.containerElement.className="container short-break";break;case S:r.containerElement.className="container long-break";break;default:r.containerElement.className="container pomodoro"}})),n)),r}return s}(d(HTMLElement));var $=function(e){var t=z(e,!0);return null===t||t<0||t>=3600?null:t},Q=function(e){var t=z(e);return null===t||t<0?null:t};const X=function(e){i(s,e);var n,r,a=(n=s,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(n);if(r){var o=u(this).constructor;e=Reflect.construct(t,arguments,o)}else e=t.apply(this,arguments);return c(this,e)});function s(){var e;return t(this,s),(e=a.call(this))._time=0,e._containerRadius=0,e.styleElement=F("style",{innerText:"\n        .container {\n          font: initial 'Duru-Sans', sans-serif;\n          color: #fff;\n        }\n      "}),e.shadow=e.attachShadow({mode:"open"}),e.timerContainer=F("div",{className:"container"}),e.shadow.append(e.styleElement,e.timerContainer),e}return o(s,[{key:"attributeChangedCallback",value:function(e,t,n){switch(e){case"time":var r=$(n);if(null===r)return void this.setAttribute(e,t);this._time=r,this.timerContainer.innerText=(a=this._time,s=(i=h([Math.floor(a/60),Math.floor(a%60)].map((function(e){return e<10?"0".concat(e):e})),2))[0],c=i[1],"".concat(s,":").concat(c));break;case"container-radius":var o=Q(n);if(null===o)return void this.setAttribute(e,t);this._containerRadius=o,this.styleElement.innerText="\n            .container {\n              font: ".concat(this._containerRadius/2,"px 'Duru-Sans', sans-serif; \n              color: #fff;\n            }\n          ")}var a,i,s,c}},{key:"time",get:function(){return this._time},set:function(e){var t=$(e);null!==t&&(this._time=t,this.setAttribute("time",this._time))}},{key:"containerRadius",get:function(){return this._containerRadius},set:function(e){var t=Q(e);null!==t&&(this._containerRadius=t,this.setAttribute("container-radius",this._containerRadius))}}],[{key:"observedAttributes",get:function(){return["time","container-radius"]}}]),s}(d(HTMLElement));var Z=function(e){var t=z(e);return null===t||t<0?null:t},ee=function(e){var t=z(e);return null===t||t<0||t>100?null:t};const te=function(n){i(l,n);var r,a,s=(r=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(r);if(a){var n=u(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return c(this,e)});function l(){var e;t(this,l),(e=s.call(this)).root=e.attachShadow({mode:"open"}),e.styleElement=document.createElement("style");var n="http://www.w3.org/2000/svg";return e.svgElement=F("svg",{class:"svg"},{namespace:n}),e.overlayCircleElement=F("circle",{class:"overlay-circle pomodoro"},{namespace:n}),e.baseCircleElement=F("circle",{class:"base-circle"},{namespace:n}),e.foreignObjectElement=F("foreignObject",{class:"foreign-object"},{namespace:n}),e.foreignObjectContainer=F("div",{class:"foreign-object-container"}),e.timerComponent=F("timer-component",{className:"timer",time:0}),e.circleComponent=F("pomodoro-circles",{className:"circles",circleCount:0}),e.root.append(e.styleElement,e.svgElement),e.svgElement.append(e.baseCircleElement,e.overlayCircleElement,e.foreignObjectElement),e.foreignObjectElement.appendChild(e.foreignObjectContainer),e.foreignObjectContainer.append(e.timerComponent,e.circleComponent),e._radius=0,e._stroke=0,e._progress=0,e.updateComponent(e._radius,e._stroke,e._progress),e}return o(l,[{key:"updateComponent",value:function(t,n,r){var o,a=this,i=t-2*n,s=2*i*Math.PI;this.styleElement.innerText="\n      .svg {\n        overflow: hidden;\n        width: ".concat(2*t,"px;\n        height: ").concat(2*t,"px;\n      }\n\n      .base-circle {\n        stroke: #fff;\n        stroke-dasharray: ").concat(s," ").concat(s,";\n        stroke-dashoffset: 0;\n        stroke-width: ").concat(n,";\n        fill: transparent;\n      }\n\n      .overlay-circle {\n        stroke-dasharray: ").concat(s," ").concat(s,";\n        stroke-dashoffset: ").concat((1-r/100)*s,";\n        stroke-width: ").concat(n,";\n        fill: transparent;\n\n        transition: stroke-dashoffset 0.5s;\n        transform: rotate(-90deg);\n        transform-origin: 50% 50%;\n      }\n\n      .overlay-circle.pomodoro {\n        stroke: #0095b3;\n      }\n\n      .overlay-circle.short-break {\n        stroke: #4ab717;\n      }\n\n      .overlay-circle.long-break {\n        stroke: #f87335;\n      }\n\n      .foreign-object {\n      }\n\n      .foreign-object-container {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n      }\n    "),this.foreignObjectElement.setAttribute("width",2*t),this.foreignObjectElement.setAttribute("height",2*t),this.overlayCircleElement.setAttribute("r",i),this.overlayCircleElement.setAttribute("cx",t),this.overlayCircleElement.setAttribute("cy",t),this.baseCircleElement.setAttribute("r",i),this.baseCircleElement.setAttribute("cx",t),this.baseCircleElement.setAttribute("cy",t),this.timerComponent.containerRadius=t,N((e(o={},O.changeSession,(function(e){"inactive"===e.session&&a.overlayCircleElement.setAttribute("class","overlay-circle pomodoro")})),e(o,O.changeCurrentInterval,(function(e){if("active"===e.session)switch(e.currentInterval){case k:a.overlayCircleElement.setAttribute("class","overlay-circle pomodoro");break;case w:a.overlayCircleElement.setAttribute("class","overlay-circle short-break");break;case S:a.overlayCircleElement.setAttribute("class","overlay-circle long-break");break;default:a.overlayCircleElement.setAttribute("class","overlay-circle pomodoro")}})),o))}},{key:"attributeChangedCallback",value:function(e,t,n){switch(e){case"radius":var r=Z(n);if(null===r)return void this.setAttribute(e,t);this._radius=r;break;case"stroke":var o=Z(n);if(null===o)return void this.setAttribute(e,t);this._stroke=o;break;case"progress":var a=ee(n);if(null===a)return void this.setAttribute(e,t);this._progress=a}this.updateComponent(this._radius,this._stroke,this._progress)}},{key:"radius",get:function(){return this._radius},set:function(e){var t=Z(e);null!==t&&(this._radius=t,this.setAttribute("radius",this._radius))}},{key:"stroke",get:function(){return this._stroke},set:function(e){var t=Z(e);null!==t&&(this._stroke=t,this.setAttribute("stroke",this._stroke))}},{key:"progress",get:function(){return this._progress},set:function(e){var t=ee(e);null!==t&&(this._progress=t,this.setAttribute("progress",this._progress))}}],[{key:"observedAttributes",get:function(){return["radius","stroke","progress"]}}]),l}(d(HTMLElement));function ne(e){return function(e){if(Array.isArray(e))return f(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||p(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var re=function(e){var t=z(e,!0);return null===t||t<0||t>4?null:t};const oe=function(e){i(s,e);var n,r,a=(n=s,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(n);if(r){var o=u(this).constructor;e=Reflect.construct(t,arguments,o)}else e=t.apply(this,arguments);return c(this,e)});function s(){var e,n;return t(this,s),(n=a.call(this))._circleCount=0,n.styleElement=F("style",{innerText:"\n      .circle-container {\n        display: flex;\n      }\n      \n      .circle {\n        height: 15px;\n        width: 15px;\n        border: 1px solid white;\n        border-radius: 50%;\n        margin: 15px 7px 0px;\n        display: inline-block;\n      }\n\n      .circle.active {\n        background-color: #fff;\n      }\n      "}),n.shadow=n.attachShadow({mode:"open"}),n.counterContainer=F("div",{className:"circle-container"}),n.circles=new Array(4).fill(null).map((function(){return F("div",{className:"circle"})})),(e=n.counterContainer).append.apply(e,ne(n.circles)),n.shadow.append(n.styleElement,n.counterContainer),n}return o(s,[{key:"attributeChangedCallback",value:function(e,t,n){if("circle-count"===e){var r=re(n);if(null===r)return void this.setAttribute(e,t);this._circleCount=r,this.circles.forEach((function(e,t){t<r?e.classList.add("active"):e.classList.remove("active")}))}}},{key:"circleCount",get:function(){return this._circleCount},set:function(e){var t=re(e);null!==t&&(this._circleCount=t,this.setAttribute("circle-count",this._circleCount))}}],[{key:"observedAttributes",get:function(){return["circle-count"]}}]),s}(d(HTMLElement));var ae=function(e){var t=z(e,!0);return null===t||t<3||t>5?null:t},ie=function(e){var t=z(e,!0);return null===t||t<15||t>30?null:t},se=function(e){var t=G(e);return null!==t&&Object.values(T).includes(t)?t:null};const ce=function(e){i(s,e);var n,r,a=(n=s,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(n);if(r){var o=u(this).constructor;e=Reflect.construct(t,arguments,o)}else e=t.apply(this,arguments);return c(this,e)});function s(){var e;return t(this,s),(e=a.call(this))._shortBreakLength=0,e._longBreakLength=0,e._timerAudio="",e.styleElement=F("style",{innerText:"\n          .popup {\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%) scale(0);\n            transition: 200ms ease-in-out;\n            border-radius: 10px;\n            z-index: 5;\n            background-color: white;\n            width: 700px;\n            max-width: 80%;\n          }\n          \n          .popup.active {\n            transform: translate(-50%, -50%) scale(1);\n          }\n          \n          .settings-title {\n            font: 2rem 'Source Sans Pro', sans-serif;\n            color: #777;\n            letter-spacing: 0.1em;\n            margin: 0;\n          }\n          \n          .settings-hr {\n            margin-top: 0;\n            margin-bottom: 1.5em;\n          }\n          \n          .content {\n            font: 1.1rem 'Duru Sans', sans-serif;\n            padding: 20px;\n          }\n          \n          .content .form-input input {\n            text-decoration: none;\n            font: 1.1rem 'Duru Sans', sans-serif;\n            border: none;\n            text-align: center;\n            margin-left: 0.5em;\n          }\n          \n          .content .form-input {\n            text-align: center;\n            margin-bottom: 1em;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n          }\n          \n          .content .form-input .bounds {\n            color: #808080;\n            margin-left: 1em;\n          }\n\n          .content .form-input label {\n            line-height: 35px;\n            margin-right: 0.5em\n          }\n\n          select {\n            cursor: pointer;\n            font: 0.85rem 'Duru Sans', sans-serif;\n            display: inline-block;\n            vertical-align: middle;\n            padding: 5px;\n            width: 225px;\n            border: 1px solid #FFF;\n            height: 34px;\n            -webkit-appearance: none;\n            -moz-appearance: none;\n            appearance: none;\n            background: url(assets/sound.png) 96% / 10% no-repeat #EEE;\n          }\n          \n          .content button {\n            background-color: rgba(176, 176, 176, 1);\n            border: none;\n            border-radius: .25rem;\n            color: #2b2b2b;\n            font: 1.1rem 'Duru Sans', sans-serif;\n            text-align: center;\n            text-decoration: none;\n            margin: 1.5em auto 0.5em auto;\n            padding: 0.5em;\n            display: block;\n            width: 75%;\n            cursor: pointer;\n          }\n\n          .content button:hover {\n            background-color: rgba(176, 176, 176, 0.8);\n          }\n          \n          .content .error {\n            color: red;\n            position: absolute;\n            margin-top: 25px;\n            visibility: hidden;\n          }\n          \n          #overlay {\n            position: fixed;\n            opacity: 0;\n            transition: 200ms ease-in-out;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n            pointer-events: none;\n            z-index: 4;\n            cursor: pointer;\n          }\n          \n          #overlay.active {\n            opacity: 1;\n            pointer-events: all;\n          }\n        "}),e.shadow=e.attachShadow({mode:"open"}),e.popupContainer=F("div",{className:"popup",id:"popup"}),e.contentContainer=F("div",{className:"content"}),e.popupTitle=F("h1",{className:"settings-title",innerText:"SETTINGS"}),e.popupTitleLine=F("hr",{className:"settings-hr"}),e.inputContainerShort=F("div",{className:"form-input"}),e.inputLabelShort=F("label",{innerText:"Short Break: ",for:"short-number"}),e.inputBoxShort=F("input",{id:"short-number",name:"short-number",type:"number",min:"3",max:"5",value:e._shortBreakLength}),e.inputBoundShort=F("span",{className:"bounds",innerText:"3 - 5 minutes"}),e.inputErrorShort=F("p",{className:"error",innerText:"Please enter valid entry"}),e.inputErrorShort.style.visibility="hidden",e.inputContainerLong=F("div",{className:"form-input"}),e.inputLabelLong=F("label",{innerText:"Long Break: ",for:"long-number"}),e.inputBoxLong=F("input",{id:"long-number",name:"long-number",type:"number",min:"15",max:"30",value:e._longBreakLength}),e.inputBoundLong=F("span",{className:"bounds",innerText:"15 - 30 minutes"}),e.inputErrorLong=F("p",{className:"error",innerText:"Please enter valid entry"}),e.inputErrorLong.style.visibility="hidden",e.inputContainerSound=F("div",{className:"form-input"}),e.inputLabelSound=F("label",{for:"sound",innerText:"Sound: "}),e.inputBoxSound=F("select",{name:"sound",id:"sound"}),e.soundOption1=F("option",{value:"assets/calm-alarm.mp3",innerText:"Calm Alarm"}),e.soundOption2=F("option",{value:"assets/original-alarm.mp3",innerText:"Orginal Alarm"}),e.soundOption3=F("option",{value:"assets/kanye-stop.mp3",innerText:"Kanye Telling You to Stop"}),e.saveButton=F("button",{innerText:"SAVE",className:"save-button"}),e.overlayEl=F("div",{id:"overlay"}),e.inputContainerShort.append(e.inputLabelShort,e.inputBoxShort,e.inputBoundShort,e.inputErrorShort),e.inputContainerLong.append(e.inputLabelLong,e.inputBoxLong,e.inputBoundLong,e.inputErrorLong),e.inputBoxSound.append(e.soundOption1,e.soundOption2,e.soundOption3),e.inputContainerSound.append(e.inputLabelSound,e.inputBoxSound),e.contentContainer.append(e.popupTitle,e.popupTitleLine,e.inputContainerShort,e.inputContainerLong,e.inputContainerSound,e.saveButton),e.popupContainer.append(e.contentContainer),e.shadow.append(e.styleElement,e.popupContainer,e.overlayEl),e}return o(s,[{key:"attributeChangedCallback",value:function(e,t,n){switch(e){case"short-break-length":var r=ae(n);if(null===r)return void this.setAttribute(e,t);this._shortBreakLength=r,this.inputBoxShort.value=this._shortBreakLength,this.inputErrorShort.visibility="hidden";break;case"long-break-length":var o=ie(n);if(null===o)return void this.setAttribute(e,t);this._longBreakLength=o,this.inputBoxLong.value=this._longBreakLength,this.inputErrorLong.visibility="hidden";break;case"timer-audio":var a=se(n);if(null===a)return void this.setAttribute(e,t);this._timerAudio=a,this.inputBoxSound.value=this._timerAudio}}},{key:"shortBreakLength",get:function(){return this._shortBreakLength},set:function(e){var t=ae(e);null!==t&&(this._shortBreakLength=t,this.setAttribute("short-break-length",this._shortBreakLength))}},{key:"longBreakLength",get:function(){return this._longBreakLength},set:function(e){var t=ie(e);null!==t&&(this._longBreakLength=t,this.setAttribute("long-break-length",this._longBreakLength))}},{key:"timerAudio",get:function(){return this._timerAudio},set:function(e){var t=se(e);null!==t&&(this._timerAudio=t,this.setAttribute("timer-audio",this._timerAudio))}}],[{key:"observedAttributes",get:function(){return["short-break-length","long-break-length","timer-audio"]}}]),s}(d(HTMLElement));function ue(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function le(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?ue(Object(r),!0).forEach((function(n){e(t,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ue(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var me,de,fe,pe,he,be,ve,ge,ye,ke,we,Se,Ee,xe,Le,Ce,Te,Oe=[],Pe=function(){window.localStorage.setItem(C,JSON.stringify(Oe))},_e=function(e){var t=e.name;return{taskIndex:Oe.findIndex((function(e){return e.name===t})),taskElement:de.querySelector('[name="'.concat(t,'"]'))}},Ie=function(e){return{delete:Array.from(e.shadowRoot.querySelectorAll(".task-button")).find((function(e){return"delete-button"===e.getAttribute("id")}))}},Ae=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"end";if("end"!==t&&"start"!==t){var n=_e(t),r=n.taskElement;r.before(e)}else"end"===t?de.append(e):"start"===t&&de.prepend(e);return e},Be=function(e){var t=_e(e).taskElement;return t.remove(),t},Ne=function(e,t){var n=_e(e),r=n.taskIndex,o=n.taskElement;return Oe[r]=t,Pe(),Object.getOwnPropertyNames(t).forEach((function(e){o[e]=t[e]})),t},je=function(e){var t=Oe.find((function(e){return e.selected}));t&&Ne(t,le(le({},t),{},{selected:!1}));var n=_e(e),r=n.taskElement,o=n.taskIndex;Be(e),Ae(r,"start"),Oe.splice(o,1),Oe.unshift(e);var a=le(le({},e),{},{selected:!0});return j(O.changeSelectedTask,a),Ne(e,a)},Re=function(e){var t=e.name,n=e.usedPomodoros,r=e.estimatedPomodoros,o=e.selected,a=e.completed,i=F("task-item",{name:t,usedPomodoros:n,estimatedPomodoros:r,selected:o}),s=i.shadowRoot.querySelector(".text-container"),c=Ie(i).delete;return a||(s.onclick=function(){return je(e)}),c.onclick=function(){return n=_e(t=e).taskIndex,Oe.splice(n,1),window.localStorage.setItem(C,JSON.stringify(Oe)),void Be(t);var t,n},i},qe=function(e){e.preventDefault();var t,n,r,o=he,a=o.name,i=o.pomodoro,s=a.value,c=i.value,u=s.trim(),l=Number(c);a.focus(),n=Re(t={name:u,estimatedPomodoros:l,usedPomodoros:0,selected:!1,completed:!1}),-1!==(r=Oe.findIndex((function(e){return e.completed})))?(Oe.splice(r,0,t),Ae(n,Oe[r+1])):(Oe.push(t),Ae(n)),Pe(),Object.values(he).forEach((function(e){e.value=""}))},De=function(e){var t=e.target.value.trim();Oe.some((function(e){return e.name===t}))?e.target.setCustomValidity("Duplicate task."):e.target.setCustomValidity("")},Me=function(){return Oe.length>0&&!Oe[0].completed?je(Oe[0]):null},Fe=function(){Oe.forEach((function(e){Ne(e,le(le({},e),{},{selected:!1}))}))},Ge=function(e){Oe.forEach((function(t){var n=_e(t).taskElement,r=n.shadowRoot,o=r.querySelector(".item-container"),a=r.querySelector(".text-container");e?o.classList.remove("disabled"):o.classList.add("disabled"),e&&!t.completed?a.onclick=function(){return je(t)}:a.onclick=null;var i=Ie(n);Object.values(i).forEach((function(t){t.disabled=!e}))}))},ze=function(e){var t=ee(e);null!==t&&(be.progress=t)},He=function(t){var n,r=(be=t).shadowRoot.querySelector(".overlay-circle");N((e(n={},O.changeSession,(function(e){"inactive"===e.session&&(ze(100),r.setAttribute("class","overlay-circle pomodoro"))})),e(n,O.changeCurrentInterval,(function(e){switch(ze(100),e.currentInterval){case k:r.setAttribute("class","overlay-circle pomodoro");break;case w:r.setAttribute("class","overlay-circle short-break");break;case S:r.setAttribute("class","overlay-circle long-break")}})),e(n,O.changeCurrentTime,(function(e){if("active"===e.session){var t;switch(e.currentInterval){case k:t=e.pomodoroLength;break;case w:t=e.shortBreakLength;break;case S:t=e.longBreakLength;break;default:return}var n=100*e.currentTime/(60*t);ze(n)}})),n))},Je=function(e){ve.time=e},Ye=function(t){var n;ve=t;var r=N((e(n={},O.changeSession,(function(e){"inactive"===e.session&&Je(60*e.pomodoroLength)})),e(n,O.changeCurrentTime,(function(e){"active"===e.session&&Je(e.currentTime)})),n)).pomodoroLength;Je(60*r)},Ve=function(e){var t=re(e);null!==t&&(ge.circleCount=t)},Ke=function(t){var n;ge=t,N((e(n={},O.changeSession,(function(e){"inactive"===e.session&&Ve(0)})),e(n,O.changeCurrentInterval,(function(e){"active"===e.session&&(e.currentInterval===k?e.numberOfPomodorosCompleted%4==0&&Ve(0):Ve((e.numberOfPomodorosCompleted-1)%4+1))})),n))},Ue=new Audio;Ue.volume=.2;var We,$e,Qe,Xe,Ze,et,tt,nt,rt,ot,at,it,st,ct,ut=function(e){var t=ae(e);null!==t&&(ye.shortBreakLength=t)},lt=function(e){var t=ie(e);null!==t&&(ye.longBreakLength=t)},mt=function(e){var t=se(e);null!==t&&(ye.timerAudio=t)},dt=function(){Ue.src="",Ue.play().catch((function(){return!0})),ke.classList.add("active"),Se.classList.add("active"),Ee.value=ye.shortBreakLength,xe.value=ye.longBreakLength,Ce.value=ye.timerAudio},ft=function(){Ue.pause(),ke.classList.remove("active"),Se.classList.remove("active")},pt=ft,ht=function(e){var t=function(){var e,t;try{e=JSON.parse(window.localStorage.getItem(E)),t=JSON.parse(window.localStorage.getItem(x))}catch(n){e=null,t=null}return e&&null!==ae(e)||(e=5,window.localStorage.setItem(E,e)),t&&null!==ie(t)||(t=15,window.localStorage.setItem(x,t)),{shortBreakLength:e,longBreakLength:t}}(),n=t.shortBreakLength,r=t.longBreakLength;!function(e){var t=(ye=e).shadowRoot;ke=t.querySelector(".popup"),we=t.querySelector(".save-button"),Se=t.querySelector("#overlay"),Ee=t.querySelector("#short-number"),xe=t.querySelector("#long-number"),Le=t.querySelector("#sound"),Ce=t.querySelector("#sound"),Te=t.querySelectorAll(".error")}(e),ut(n),lt(r),j(O.changeShortBreakLength,n),j(O.changeLongBreakLength,r);var o=window.localStorage.getItem(L);null===se(o)?(mt(T.calm),window.localStorage.setItem(L,T.calm),j(O.changeTimerAudio,T.calm)):(mt(o),j(O.changeTimerAudio,o)),Se.onclick=ft,we.addEventListener("click",(function(){var e=function(){var e=ae(Ee.value),t=ie(xe.value),n=se(Le.value),r=null!==e,o=null!==t;return Te[0].style.visibility=r?"hidden":"visible",Te[1].style.visibility=o?"hidden":"visible",r&&o?(ut(e),lt(t),mt(n),j(O.changeShortBreakLength,e),j(O.changeLongBreakLength,t),j(O.changeTimerAudio,n),window.localStorage.setItem(E,e),window.localStorage.setItem(x,t),window.localStorage.setItem(L,n),[e,t]):null}();e&&(pt(),j(O.changeShortBreakLength,e[0]),j(O.changeLongBreakLength,e[1]))})),Ce.onchange=function(){Ue.pause(),Ue.src=Ce.value,Ue.play().catch((function(){return!0}))}},bt=function(e){$e.innerText=e},vt=function(e){"visible"===e?(Qe.classList.remove("hidden"),Xe.classList.remove("hidden")):(Qe.classList.add("hidden"),Xe.classList.add("hidden"))},gt=function(t){var n;$e=(We=t).querySelector(".announcement"),Qe=We.querySelector(".announcement-yes-button"),Xe=We.querySelector(".announcement-no-button"),Qe.onmousedown=function(e){return e.preventDefault()},Xe.onmousedown=function(e){return e.preventDefault()},Qe.onclick=function(){return j(O.completeSelectedTask)},Xe.onclick=function(){return j(O.doNotCompleteSelectedTask)},bt("What do you need to work on today?"),N((e(n={},O.changeSession,(function(e){"inactive"===e.session?(null!==e.currentSelectedTask||e.completedTasks.length>0?bt("Good work today!"):bt("Add a task to get started!"),vt("hidden")):"active"===e.session&&bt(b)})),e(n,O.changeCurrentInterval,(function(e){if("active"===e.session)switch(e.currentInterval){case k:bt(b),[Qe,Xe].forEach((function(e){e.classList.add("pomodoro"),e.classList.remove("short-break"),e.classList.remove("long-break")}));break;case w:bt(y),vt("visible"),[Qe,Xe].forEach((function(e){e.classList.remove("pomodoro"),e.classList.add("short-break"),e.classList.remove("long-break")}));break;case S:bt(y),vt("visible"),[Qe,Xe].forEach((function(e){e.classList.remove("pomodoro"),e.classList.remove("short-break"),e.classList.add("long-break")}))}})),e(n,O.changeSelectedTask,(function(e){null!==e.currentSelectedTask&&("inactive"===e.session?bt("Hit start to begin your pomodoro session!"):"active"===e.session&&(e.currentInterval===w?bt(v):e.currentInterval===S&&bt(g)))})),e(n,O.completeSelectedTask,(function(e){vt("hidden"),bt("Select a new task!")})),e(n,O.doNotCompleteSelectedTask,(function(e){vt("hidden"),e.currentInterval===w?bt(v):e.currentInterval===S&&bt(g)})),n))},yt=function(){Ze.classList.remove("active")},kt=function(e){!function(e){et=(Ze=e).querySelector("#confirmation-popup"),tt=et.querySelector(".confirmation-no-button"),nt=et.querySelector(".confirmation-yes-button")}(e),tt.onmousedown=function(e){return e.preventDefault()},nt.onmousedown=function(e){return e.preventDefault()},nt.onclick=function(){yt(),j(O.changeSession,"inactive")},tt.onclick=yt,Ze.onclick=yt,et.onclick=function(e){return e.stopPropagation()}};function wt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function St(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?wt(Object(r),!0).forEach((function(n){e(t,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):wt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var Et,xt,Lt,Ct,Tt,Ot,Pt,_t,It,At,Bt=function(){rt.classList.remove("active"),at.innerHTML=""},Nt=function(e,t){!function(e){ot=(rt=e).querySelector("#summary-popup"),at=rt.querySelector(".task-summary-list"),it=rt.querySelector("#summary-pomodoros"),st=rt.querySelector("#summary-tasks"),ct=rt.querySelector(".summary-close-button")}(e);var n=N(),r=(n.currentSelectedTask,n.completedTasks),o=n.numberOfPomodorosCompleted;(function(e,t,n){var r=e.filter((function(e){return e.completed&&e.usedPomodoros<=e.estimatedPomodoros&&t.some((function(t){return t.name===e.name}))})).map((function(e){return St(St({},e),{},{status:"complete under-budget"})})),o=e.filter((function(e){return e.completed&&e.usedPomodoros>e.estimatedPomodoros&&t.some((function(t){return t.name===e.name}))})).map((function(e){return St(St({},e),{},{status:"complete over-budget"})})),a=e.filter((function(e){return!e.completed&&e.usedPomodoros>0})).map((function(e){return St(St({},e),{},{status:"in-progress"})})),i=e.filter((function(e){return!e.completed&&0===e.usedPomodoros})).map((function(e){return St(St({},e),{},{status:"not-started"})})),s=e.filter((function(e){return e.completed&&!t.some((function(t){return t.name===e.name}))})).map((function(e){return St(St({},e),{},{status:"complete old"})}));[].concat(ne(r),ne(o),ne(a),ne(i),ne(s)).forEach((function(e){var t=function(e){var t=e.name,n=e.usedPomodoros,r=e.estimatedPomodoros,o=e.status,a=F("div",{className:"task-summary-item ".concat(o)}),i=F("span",{className:"task-summary-name",innerText:t}),s=F("span",{className:"task-summary-pomodoros",innerText:"".concat(n,"/").concat(r)});return a.append(i,s),a}(e);at.append(t)}))})(t,r),it.innerText="Number of pomodoros completed: ".concat(o),st.innerText="Number of tasks completed: ".concat(r.length),ct.onclick=Bt,ct.onmousedown=function(e){return e.preventDefault()},rt.onclick=Bt,ot.onclick=function(e){return e.stopPropagation()}},jt=function(){var e=q(M().mark((function e(t){return M().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:j(O.changeCurrentTime,t);case 1:if(!(Lt>=0)){e.next=9;break}if("inactive"!==Et){e.next=4;break}return e.abrupt("return",!1);case 4:return e.next=6,J(1);case 6:"active"===Et&&j(O.changeCurrentTime,Lt-1),e.next=1;break;case 9:return e.abrupt("return",!0);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Rt=function(){var e=q(M().mark((function e(){var t,n;return M().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("active"!==Et){e.next=28;break}if(Ct!==k){e.next=17;break}if(Tt){e.next=5;break}return j(O.changeSession,"inactive"),e.abrupt("return");case 5:return e.next=7,jt(60*Ot);case 7:if(e.sent){e.next=10;break}return e.abrupt("return");case 10:j(O.incrementSelectedTask),j(O.changeNumberOfPomodoros,xt+1),j(O.changeCurrentInterval,xt>0&&xt%4==0?S:w),e.next=26;break;case 17:return At=!1,t=Ct===S?_t:Pt,e.next=21,jt(60*t);case 21:if(n=e.sent,At||j(O.doNotCompleteSelectedTask),n){e.next=25;break}return e.abrupt("return");case 25:j(O.changeCurrentInterval,k);case 26:e.next=0;break;case 28:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();const qt=function(){var t,n=document.querySelector("#main"),r=document.querySelector(".navbar"),o=document.querySelector(".footer"),a=document.querySelector(".session-button"),i=document.querySelector(".material-icons"),s=document.querySelector(".progress-ring").shadowRoot.querySelector(".timer"),c=[n,r,a,o],u=N((e(t={},O.changeSession,(function(e){"active"===(Et=e.session)?(a.innerText="End",a.classList.add("session-button","in-session")):"inactive"===Et&&(c.forEach((function(e){e.classList.add("pomodoro"),e.classList.remove("short-break"),e.classList.remove("long-break")})),a.innerText="Start",a.classList.remove("in-session"),xt>0&&(Nt(document.querySelector("#summary-overlay"),Oe),rt.classList.add("active")),j(O.changeCurrentTime,0),j(O.changeCurrentInterval,k),j(O.changeSelectedTask,null),j(O.changeNumberOfPomodoros,0),j(O.clearCompletedTasks))})),e(t,O.changeNumberOfPomodoros,(function(e){xt=e.numberOfPomodorosCompleted})),e(t,O.changeCurrentTime,(function(e){Lt=e.currentTime})),e(t,O.changeCurrentInterval,(function(e){switch(Ct=e.currentInterval){case k:c.forEach((function(e){e.classList.add("pomodoro"),e.classList.remove("short-break"),e.classList.remove("long-break")}));break;case w:c.forEach((function(e){e.classList.remove("pomodoro"),e.classList.add("short-break"),e.classList.remove("long-break")}));break;case S:c.forEach((function(e){e.classList.remove("pomodoro"),e.classList.remove("short-break"),e.classList.add("long-break")}))}e.numberOfPomodorosCompleted>0&&(It.pause(),It.play().catch((function(){return!0})))})),e(t,O.changeSelectedTask,(function(e){Tt=e.currentSelectedTask})),e(t,O.changePomodoroLength,(function(e){Ot=e.pomodoroLength})),e(t,O.changeShortBreakLength,(function(e){Pt=e.shortBreakLength})),e(t,O.changeLongBreakLength,(function(e){_t=e.longBreakLength})),e(t,O.changeTimerAudio,(function(e){It=e.timerAudio})),e(t,O.completeSelectedTask,(function(){At=!0})),e(t,O.doNotCompleteSelectedTask,(function(){At=!0})),t));Et=u.session,xt=u.numberOfPomodorosCompleted,Lt=u.currentTime,Ct=u.currentInterval,Tt=u.currentSelectedTask,Ot=u.pomodoroLength,Pt=u.shortBreakLength,_t=u.longBreakLength,It=u.timerAudio,j(O.changeShortBreakLength,.05),j(O.changeLongBreakLength,.05),i.onclick=dt,s.onclick=function(){return It.pause()},a.onmousedown=function(e){e.preventDefault()},ne(document.querySelectorAll(".navbar-link")).forEach((function(e){e.onmousedown=function(e){return e.preventDefault()}})),a.addEventListener("click",q(M().mark((function e(){var t;return M().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("Start"!==a.innerText){e.next=10;break}return t=It.src,It.src="",It.play().catch((function(){return!0})),It.src=t,j(O.changeSession,"active"),e.next=8,Rt();case 8:e.next=11;break;case 10:Ze.classList.add("active");case 11:case"end":return e.stop()}}),e)}))))};customElements.define("timer-component",X),customElements.define("progress-ring",te),customElements.define("task-list",W),customElements.define("settings-component",ce),customElements.define("pomodoro-circles",oe),window.addEventListener("DOMContentLoaded",(function(){var t,n=document.querySelector(".progress-ring"),r=n.shadowRoot.querySelector(".timer"),o=n.shadowRoot.querySelector(".circles"),a=document.querySelector(".announcement-container"),i=document.querySelector(".task-list"),s=document.querySelector("#confirmation-overlay"),c=document.querySelector(".settings");He(n),Ye(r),Ke(o),gt(a),function(e){me=e.shadowRoot.querySelector(".container"),de=me.querySelector(".task-item-container"),fe=me.querySelector(".task-item-form"),pe=fe.shadowRoot.querySelector(".task-form"),he={name:pe.querySelector("#name-input"),pomodoro:pe.querySelector("#pomodoro-input")}}(i),pe.addEventListener("submit",qe),function(){var e;try{e=JSON.parse(window.localStorage.getItem(C))}catch(t){e=null}e||(window.localStorage.setItem(C,JSON.stringify([])),e=[]),e=e.filter(V),(Oe=e).forEach((function(e){return Ae(Re(e))}))}(),he.name.oninput=De,Fe(),N((e(t={},O.changeSession,(function(e){"inactive"===e.session?(Fe(),Ge(!0)):"active"===e.session&&(null===e.currentSelectedTask&&Me(),Ge(!1))})),e(t,O.changeCurrentInterval,(function(e){"active"===e.session&&e.currentInterval===k&&(null===e.currentSelectedTask&&Me(),Ge(!1))})),e(t,O.incrementSelectedTask,(function(e){if("active"===e.session){var t=(r=(n=e.currentSelectedTask).usedPomodoros,Ne(n,le(le({},n),{},{usedPomodoros:r+1})));j(O.changeSelectedTask,t)}var n,r})),e(t,O.completeSelectedTask,(function(e){if("active"===e.session){var t=function(e){var t=_e(e).taskIndex,n=Be(e);return Ae(n,"end"),n.shadowRoot.querySelector(".text-container").onclick=null,Oe.splice(t,1),Oe.push(e),Ne(e,le(le({},e),{},{selected:!1,completed:!0}))}(e.currentSelectedTask);j(O.changeSelectedTask,null),j(O.addToCompletedTasks,t),Ge(!0)}})),t)),kt(s),ht(c),qt();var u=document.querySelector(".navbar");window.onscroll=function(){0===window.scrollY?u.classList.remove("scrolled"):u.classList.add("scrolled")}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,