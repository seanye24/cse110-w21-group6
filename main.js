(()=>{var t={228:t=>{t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}},858:t=>{t.exports=function(t){if(Array.isArray(t))return t}},646:(t,e,n)=>{var r=n(228);t.exports=function(t){if(Array.isArray(t))return r(t)}},506:t=>{t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},926:t=>{function e(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}t.exports=function(t){return function(){var n=this,r=arguments;return new Promise((function(o,i){var a=t.apply(n,r);function s(t){e(a,o,i,s,c,"next",t)}function c(t){e(a,o,i,s,c,"throw",t)}s(void 0)}))}}},575:t=>{t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},100:(t,e,n)=>{var r=n(489),o=n(67);function i(e,n,a){return o()?t.exports=i=Reflect.construct:t.exports=i=function(t,e,n){var o=[null];o.push.apply(o,e);var i=new(Function.bind.apply(t,o));return n&&r(i,n.prototype),i},i.apply(null,arguments)}t.exports=i},913:t=>{function e(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}},713:t=>{t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},754:t=>{function e(n){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},e(n)}t.exports=e},205:(t,e,n)=>{var r=n(489);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&r(t,e)}},430:t=>{t.exports=function(t){return-1!==Function.toString.call(t).indexOf("[native code]")}},67:t=>{t.exports=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}},860:t=>{t.exports=function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}},884:t=>{t.exports=function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}}},521:t=>{t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},206:t=>{t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},585:(t,e,n)=>{var r=n(8),o=n(506);t.exports=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?o(t):e}},489:t=>{function e(n,r){return t.exports=e=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},e(n,r)}t.exports=e},38:(t,e,n)=>{var r=n(858),o=n(884),i=n(379),a=n(521);t.exports=function(t,e){return r(t)||o(t,e)||i(t,e)||a()}},319:(t,e,n)=>{var r=n(646),o=n(860),i=n(379),a=n(206);t.exports=function(t){return r(t)||o(t)||i(t)||a()}},8:t=>{function e(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=e=function(t){return typeof t}:t.exports=e=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(n)}t.exports=e},379:(t,e,n)=>{var r=n(228);t.exports=function(t,e){if(t){if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(t,e):void 0}}},957:(t,e,n)=>{var r=n(754),o=n(489),i=n(430),a=n(100);function s(e){var n="function"==typeof Map?new Map:void 0;return t.exports=s=function(t){if(null===t||!i(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(t))return n.get(t);n.set(t,e)}function e(){return a(t,arguments,r(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o(e,t)},s(e)}t.exports=s},757:(t,e,n)=>{t.exports=n(666)},666:t=>{var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,n){return t[e]=n}}function u(t,e,n,r){var o=e&&e.prototype instanceof b?e:b,i=Object.create(o.prototype),a=new N(r||[]);return i._invoke=function(t,e,n){var r=p;return function(o,i){if(r===m)throw new Error("Generator is already running");if(r===f){if("throw"===o)throw i;return T()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=L(a,n);if(s){if(s===h)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===p)throw r=f,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=m;var c=l(t,e,n);if("normal"===c.type){if(r=n.done?f:d,c.arg===h)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=f,n.method="throw",n.arg=c.arg)}}}(t,n,a),i}function l(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var p="suspendedStart",d="suspendedYield",m="executing",f="completed",h={};function b(){}function y(){}function v(){}var g={};g[i]=function(){return this};var k=Object.getPrototypeOf,x=k&&k(k(_([])));x&&x!==n&&r.call(x,i)&&(g=x);var w=v.prototype=b.prototype=Object.create(g);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function E(t,e){function n(o,i,a,s){var c=l(t[o],t,i);if("throw"!==c.type){var u=c.arg,p=u.value;return p&&"object"==typeof p&&r.call(p,"__await")?e.resolve(p.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(p).then((function(t){u.value=t,a(u)}),(function(t){return n("throw",t,a,s)}))}s(c.arg)}var o;this._invoke=function(t,r){function i(){return new e((function(e,o){n(t,r,e,o)}))}return o=o?o.then(i,i):i()}}function L(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=l(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function C(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function N(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(C,this),this.reset(!0)}function _(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}return{next:T}}function T(){return{value:e,done:!0}}return y.prototype=w.constructor=v,v.constructor=y,y.displayName=c(v,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,c(t,s,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},S(E.prototype),E.prototype[a]=function(){return this},t.AsyncIterator=E,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new E(u(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},S(w),c(w,s,"Generator"),w[i]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return s.type="throw",s.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),O(n),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),h}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}}},e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(8),e=n.n(t),r=n(926),o=n.n(r),i=n(757),a=n.n(i),s=n(575),c=n.n(s),u=n(913),l=n.n(u),p=n(205),d=n.n(p),m=n(585),f=n.n(m),h=n(754),b=n.n(h),y=n(957),v=n.n(y),g=n(38),k=n.n(g),x="Good work. Enjoy a longer break!",w="pomodoroInterval",S="longBreakInterval",E=function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=r.namespace;return e=o?document.createElementNS(o,t):document.createElement(t),Object.entries(n).forEach((function(t){var n=k()(t,2),r=n[0],i=n[1];o||!(r in e)?e.setAttribute(r,i):e[r]=i})),e},L=function(t){var e=parseFloat(t,10);return Number.isNaN(e)?null:e},C=function(t){return t>=3&&t<=5},O=function(t){return t>=15&&t<=30},N=function(){var t=o()(a().mark((function t(e){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise((function(t){return setTimeout(t,1e3*e)})));case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}();var _=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=b()(e);if(n){var o=b()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this)).usedPomodoros=0,t.estimatedPomodoros=0,t.shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .item-container {\n        margin-bottom: 1em;\n        padding: 0.5em 2em;\n        border-radius: 5px;\n        position: relative;\n        cursor: pointer;\n      }\n\n      .item-container:focus {\n        outline: none;\n      }\n\n      .item-container.selected {\n        background: #90e0ef;\n      }\n\n      .text-container {\n        background: rgba(255, 255, 255, 1);\n        color: #555;\n        position: relative;\n        padding: 0.5em;\n        border-radius: 5px;\n        width: 100%;\n        text-align: left;\n        font: 1rem Source Sans Pro, sans-serif;\n        border: none;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n      }\n\n      .item-container:not(.disabled):not(.selected) > .text-container:hover {\n        background: rgba(255, 255, 255, 0.8);\n      }\n\n      .text-container:focus {\n        outline: none;\n        box-shadow: 0 0 0 2pt #90e0ef;\n      }\n\n      .item-container.selected > .text-container:focus {\n        box-shadow: 0 0 0 2pt #00b4d8;\n      }\n      \n      .completed .name {\n        text-decoration: line-through;\n      }\n\n      .name {\n        width: 80%;\n        display: inline-block;\n        margin: 0.5em 0;\n      }\n      \n      .pomodoro-container {\n        width: 20%;\n        height: 100%;\n        display: inline-block;\n        position: relative;\n        text-align: right;\n      }\n\n      .pomodoro-label {\n        position: absolute;\n        top: -0.5em;\n        right: 0;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      .pomodoro {\n        display: inline-block;\n        margin: 1em 0 0 0;\n      }\n\n      .task-button {\n        opacity: 0;\n        position: absolute;\n        border: none;\n        padding: 0.25em;\n        color: rgba(255, 255, 255, 1); \n        background: transparent;\n        border-radius: 50%;\n      }\n\n      .item-container:hover:not(.disabled) > .task-button,\n      .task-button:focus {\n        opacity: 1;\n      }\n\n      .task-button:focus {\n        outline: none;\n        z-index: 1;\n        position: absolute;\n      }\n\n      .task-button:focus {\n        box-shadow: inset 0 0 0 2pt #90e0ef;\n      }\n\n      .item-container.selected > .task-button:focus {\n        box-shadow: inset 0 0 0 2pt #00b4d8;\n      }\n\n      .task-button:hover {\n        border-radius: 50%;\n        color: rgba(255, 255, 255, 0.8); \n        cursor: pointer;\n        background: rgba(255, 255, 255, 0.3);\n      }\n\n      .item-container.selected > .task-button,\n      .item-container.selected > .task-button:hover {\n        color: rgba(0, 0, 0, 0.54);\n      }\n\n      .task-button:disabled {\n        opacity: 0;\n      }\n\n      .task-button-icon {\n        font-size: 1.2rem;\n      }\n\n      #delete-button {\n        top: 50%;\n        right: 0;\n        transform: translate(0, -50%);\n      }\n    ",t.materialIconLinkElement=E("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/icon?family=Material+Icons"}),t.itemContainerElement=E("div",{className:"item-container"}),t.textContainerElement=E("button",{className:"text-container",onmouseout:function(t){t.target.blur()},onmousedown:function(t){t.preventDefault()}}),t.nameElement=E("p",{className:"name"}),t.pomodoroContainer=E("span",{className:"pomodoro-container"}),t.pomodoroLabel=E("label",{className:"pomodoro-label",for:"pomodoro",innerText:"Pomodoros"}),t.pomodoroElement=E("p",{className:"pomodoro",id:"pomodoro"}),t.deleteTaskButton=E("button",{className:"task-button",id:"delete-button",onmouseout:function(t){t.target.blur()},onmousedown:function(t){t.preventDefault()}}),t.deleteTaskIcon=E("span",{className:"material-icons task-button-icon",innerText:"delete"}),t.shadow.append(t.materialIconLinkElement,t.styleElement,t.itemContainerElement),t.itemContainerElement.append(t.textContainerElement,t.deleteTaskButton),t.deleteTaskButton.appendChild(t.deleteTaskIcon),t.textContainerElement.append(t.nameElement,t.pomodoroContainer),t.pomodoroContainer.append(t.pomodoroLabel,t.pomodoroElement),t}return l()(o,[{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"name":this.nameElement.innerText=n;break;case"used-pomodoros":this.usedPomodoros=n,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"estimated-pomodoros":this.estimatedPomodoros=n,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"selected":"true"===n?this.itemContainerElement.classList.add("selected"):this.itemContainerElement.classList.remove("selected");break;case"completed":"true"===n?this.itemContainerElement.classList.add("completed"):this.itemContainerElement.classList.remove("completed")}}}],[{key:"observedAttributes",get:function(){return["name","estimated-pomodoros","used-pomodoros","selected","completed"]}}]),o}(v()(HTMLElement));customElements.define("task-item",_);const T=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=b()(e);if(n){var o=b()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this)).shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .container {\n        padding: 1em;\n        font: normal 1rem 'Source Sans Pro', sans-serif;\n        border-radius: 5px;\n        background: #00b4d8;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        box-sizing: border-box;\n      }\n\n      .task-item-container {\n        flex: 1;\n        overflow: auto;\n      }\n\n      .title {\n        text-align: center;\n        color: #fff;\n        margin-top: 0;\n      }\n    ",t.containerElement=E("div",{className:"container"}),t.titleElement=E("h1",{className:"title",innerText:"Task List"}),t.taskItemListContainerElement=E("div",{className:"task-item-container"}),t.taskItemFormElement=E("task-item-form",{className:"task-item-form"}),t.shadow.append(t.styleElement,t.containerElement),t.containerElement.append(t.titleElement,t.taskItemListContainerElement,t.taskItemFormElement),t}return o}(v()(HTMLElement));var P=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=b()(e);if(n){var o=b()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this)).shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .task-form {\n        margin: 1em;\n        padding: 1em ;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .field-input-container {\n        margin-bottom: 1em;\n        border-radius: 5px;\n        position: relative;\n        width: 100%;\n        display: flex;\n      }\n\n      .name-input-container {\n        flex: 4;\n        position: relative;\n      }\n\n      .pomodoro-input-container {\n        flex: 1;\n        min-width: 95px;\n        position: relative;\n      }\n\n      .task-input-label {\n        position: absolute;\n        z-index: 2;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      #name-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      #pomodoro-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      .task-input[type='text'],\n      .task-input[type='number'] {\n        padding: 1.5em 0.75em 0.75em 0.75em;\n        border: none;\n        font: 1rem 'Source Sans Pro', sans-serif;\n        color: #444;\n        box-sizing: border-box;\n        width: 100%;\n      }\n\n      .task-input:focus {\n        box-shadow: 0 0 0 2pt #90e0ef;\n        outline: none;\n        z-index: 1;\n        position: relative;\n      }\n\n      #name-input {\n        border-top-left-radius: 5px;\n        border-bottom-left-radius: 5px;\n      }\n\n      #pomodoro-input {\n        border-top-right-radius: 5px;\n        border-bottom-right-radius: 5px;\n      }\n\n      .task-input[type='text']::placeholder,\n      .task-input[type='number']::placeholder {\n        color: #c8c8c8;\n      }\n\n      #submit-input {\n        width: 50%;\n        margin: auto;\n        background: rgb(77, 207, 233);\n        border-radius: 5px;\n        outline: none;\n        border: none;\n        color: white;\n        padding: 0.5em;\n        font: 1.2rem 'Source Sans Pro', sans-serif;\n      }\n\n      #submit-input:hover {\n        background: rgb(112, 216, 237);\n        cursor: pointer;\n      }\n    ",t.containerElement=E("form",{className:"task-form"}),t.fieldInputContainer=E("div",{className:"field-input-container"}),t.nameInputContainer=E("div",{className:"name-input-container"}),t.nameInputLabel=E("label",{className:"task-input-label",id:"name-input-label",for:"name-input",innerText:"Name"}),t.nameInputElement=E("input",{className:"task-input",id:"name-input",type:"text",name:"name",placeholder:"Task Description...",required:!0}),t.pomodoroInputContainer=E("div",{className:"pomodoro-input-container"}),t.pomodoroInputLabel=E("label",{className:"task-input-label",id:"pomodoro-input-label",for:"pomodoro-input",innerText:"Est Pomodoros"}),t.pomodoroInputElement=E("input",{className:"task-input",id:"pomodoro-input",type:"number",name:"pomodoro",placeholder:"#",min:"1",required:!0}),t.submitInputElement=E("input",{className:"task-input",id:"submit-input",type:"submit",value:"ADD"}),t.shadow.append(t.styleElement,t.containerElement),t.containerElement.append(t.fieldInputContainer,t.submitInputElement),t.fieldInputContainer.append(t.nameInputContainer,t.pomodoroInputContainer),t.nameInputContainer.append(t.nameInputLabel,t.nameInputElement),t.pomodoroInputContainer.append(t.pomodoroInputLabel,t.pomodoroInputElement),t}return o}(v()(HTMLElement));customElements.define("task-item-form",P);const I=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=b()(e);if(n){var o=b()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this))._time=t.getAttribute("time"),t._containerRadius=t.getAttribute("container-radius"),t.styleElement=E("style",{innerText:"\n        .container {\n          font: initial 'Duru-Sans', sans-serif;\n          color: #fff;\n        }\n      "}),t.shadow=t.attachShadow({mode:"open"}),t.timerContainer=E("div",{className:"container"}),t.shadow.append(t.styleElement,t.timerContainer),t}return l()(o,[{key:"attributeChangedCallback",value:function(t,e,n){var r,o,i,a,s,c,u=parseInt(n,10);if(!Number.isNaN(u))switch(t){case"time":(c=n)>=0&&c<3600&&(this._time=u,this.timerContainer.innerText=(r=this._time,o=[Math.floor(r/60),Math.floor(r%60)].map((function(t){return t<10?"0".concat(t):t})),a=(i=k()(o,2))[0],s=i[1],"".concat(a,":").concat(s)));break;case"container-radius":this._containerRadius=u,this.styleElement.innerText="\n            .container {\n              font: ".concat(this._containerRadius/30,"em 'Duru-Sans', sans-serif; \n              color: #fff;\n            }\n          ")}}},{key:"time",get:function(){return this._time},set:function(t){this._time=t,this.setAttribute("time",this._time)}},{key:"containerRadius",get:function(){return this._containerRadius},set:function(t){this._containerRadius=t,this.setAttribute("container-radius",this._containerRadius)}}],[{key:"observedAttributes",get:function(){return["time","container-radius"]}}]),o}(v()(HTMLElement));const j=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=b()(e);if(n){var o=b()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;c()(this,o),(t=r.call(this)).root=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style");var e="http://www.w3.org/2000/svg";return t.svgElement=E("svg",{class:"svg"},{namespace:e}),t.circleElement=E("circle",{class:"circle"},{namespace:e}),t.baseCircleElement=E("circle",{class:"base-circle"},{namespace:e}),t.foreignObjectElement=E("foreignObject",{class:"foreign-object"},{namespace:e}),t.foreignObjectContainer=E("div",{class:"foreign-object-container"}),t.timerComponent=E("timer-component",{className:"timer",time:0}),t.circleComponent=E("pomodoro-circles",{className:"circles",circleCount:0}),t.root.append(t.styleElement,t.svgElement),t.svgElement.append(t.baseCircleElement,t.circleElement,t.foreignObjectElement),t.foreignObjectElement.appendChild(t.foreignObjectContainer),t.foreignObjectContainer.append(t.timerComponent,t.circleComponent),t._radius=0,t._stroke=0,t._progress=0,t.updateComponent(t._radius,t._stroke,t._progress),t}return l()(o,[{key:"updateComponent",value:function(t,e,n){var r=t-2*e,o=2*r*Math.PI;this.styleElement.innerText="\n      .svg {\n        overflow: hidden;\n        width: ".concat(2*t,"px;\n        height: ").concat(2*t,"px;\n      }\n\n      .base-circle {\n        stroke: #fff;\n        stroke-dasharray: ").concat(o," ").concat(o,";\n        stroke-dashoffset: 0;\n        stroke-width: ").concat(e,";\n        fill: #48cae4;\n      }\n\n      .circle {\n        stroke: #0095b3;\n        stroke-dasharray: ").concat(o," ").concat(o,";\n        stroke-dashoffset: ").concat((1-n/100)*o,";\n        stroke-width: ").concat(e+2,";\n        fill: transparent;\n\n        transition: stroke-dashoffset 0.5s;\n        transform: rotate(-90deg);\n        transform-origin: 50% 50%;\n      }\n\n      .foreign-object {\n      }\n\n      .foreign-object-container {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n      }\n    "),this.foreignObjectElement.setAttribute("width",2*t),this.foreignObjectElement.setAttribute("height",2*t),this.circleElement.setAttribute("r",r),this.circleElement.setAttribute("cx",t),this.circleElement.setAttribute("cy",t),this.baseCircleElement.setAttribute("r",r),this.baseCircleElement.setAttribute("cx",t),this.baseCircleElement.setAttribute("cy",t),this.timerComponent.containerRadius=t}},{key:"attributeChangedCallback",value:function(t,e,n){var r=L(n);if(null!==r){switch(t){case"radius":case"stroke":if(r<0)return;break;case"progress":if("progress"===t&&(r<0||r>100))return;break;default:return}this["_".concat(t)]=r,this.updateComponent(this._radius,this._stroke,this._progress)}}},{key:"radius",get:function(){return this._radius},set:function(t){var e=L(t);this.setAttribute("radius",e)}},{key:"stroke",get:function(){return this._stroke},set:function(t){var e=L(t);this.setAttribute("stroke",e)}},{key:"progress",get:function(){return this._progress},set:function(t){var e=L(t);this.setAttribute("progress",e)}}],[{key:"observedAttributes",get:function(){return["radius","stroke","progress"]}}]),o}(v()(HTMLElement));const A=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=b()(e);if(n){var o=b()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this))._circleCount=t.getAttribute("circleCount"),t.styleElement=E("style",{innerText:"\n      .circle-container {\n        display: flex;\n      }\n      \n      .circle {\n        height: 15px;\n        width: 15px;\n        border: 1px solid white;\n        border-radius: 50%;\n        margin: 15px 7px 0px;\n        display: inline-block;\n      }\n\n      .circle.active {\n        background-color: #fff;\n      }\n      "}),t.shadow=t.attachShadow({mode:"open"}),t.counterContainer=E("div",{className:"cirlce-container"}),t.circle1=E("div",{className:"circle"}),t.circle2=E("div",{className:"circle"}),t.circle3=E("div",{className:"circle"}),t.circle4=E("div",{className:"circle"}),t.counterContainer.append(t.circle1,t.circle2,t.circle3,t.circle4),t.shadow.append(t.styleElement,t.counterContainer),t}return l()(o,[{key:"attributeChangedCallback",value:function(t,e,n){for(var r=Number(n),o=1;o<=r;o++)o<=r?this["circle".concat(o)].classList.add("active"):this["circle".concat(o)].classList.remove("active")}},{key:"circleCount",get:function(){return this._circleCount},set:function(t){t>=0&&t<=4&&(this._circleCount=t,this.setAttribute("circleCount",this._circleCount))}}],[{key:"observedAttributes",get:function(){return["circleCount"]}}]),o}(v()(HTMLElement));const R=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=b()(e);if(n){var o=b()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this))._shortBreak=t.getAttribute("shortBreakLength"),t._longBreak=t.getAttribute("longBreakLength"),t._timerSound=t.getAttribute("timerSound"),t.styleElement=E("style",{innerText:"\n          .popup {\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%) scale(0);\n            transition: 200ms ease-in-out;\n            border-radius: 10px;\n            z-index: 5;\n            background-color: white;\n            width: 700px;\n            max-width: 80%;\n          }\n          \n          .popup.active {\n            transform: translate(-50%, -50%) scale(1);\n          }\n          \n          .settings-title {\n            font: 2rem 'Source Sans Pro', sans-serif;\n            color: #777;\n            letter-spacing: 0.1em;\n            margin: 0;\n          }\n          \n          .settings-hr {\n            margin-top: 0;\n            margin-bottom: 1.5em;\n          }\n          \n          .content {\n            font: 1.1rem 'Duru Sans', sans-serif;\n            padding: 20px;\n          }\n          \n          .content .form-input input {\n            text-decoration: none;\n            font: 1.1rem 'Duru Sans', sans-serif;\n            border: none;\n            text-align: center;\n            margin-left: 0.5em;\n          }\n          \n          .content .form-input {\n            text-align: center;\n            margin-bottom: 1em;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n          }\n          \n          .content .form-input .bounds {\n            color: #808080;\n            margin-left: 1em;\n          }\n\n          .content .form-input label {\n            line-height: 35px;\n            margin-right: 0.5em\n          }\n\n          select {\n            cursor: pointer;\n            font: 0.85rem 'Duru Sans', sans-serif;\n            display: inline-block;\n            vertical-align: middle;\n            padding: 5px;\n            width: 225px;\n            border: 1px solid #FFF;\n            height: 34px;\n            -webkit-appearance: none;\n            -moz-appearance: none;\n            appearance: none;\n            background: url(assets/sound.png) 96% / 10% no-repeat #EEE;\n          }\n          \n          .content button {\n            background-color: rgba(72, 202, 228, 1);\n            border: none;\n            border-radius: .25rem;\n            color: white;\n            font: 1.1rem 'Duru Sans', sans-serif;\n            text-align: center;\n            text-decoration: none;\n            margin: 1.5em auto 0.5em auto;\n            padding: 0.5em;\n            display: block;\n            width: 75%;\n            cursor: pointer;\n          }\n\n          .content button:hover {\n            background-color: rgba(72, 202, 228, 0.8);\n          }\n          \n          .content .error {\n            color: red;\n            position: absolute;\n            margin-top: 50px;\n            visibility: hidden;\n          }\n          \n          #overlay {\n            position: fixed;\n            opacity: 0;\n            transition: 200ms ease-in-out;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n            pointer-events: none;\n            z-index: 4;\n            cursor: pointer;\n          }\n          \n          #overlay.active {\n            opacity: 1;\n            pointer-events: all;\n          }\n        "}),t.shadow=t.attachShadow({mode:"open"}),t.popupContainer=E("div",{className:"popup",id:"popup"}),t.contentContainer=E("div",{className:"content"}),t.popupTitle=E("h1",{className:"settings-title",innerText:"SETTINGS"}),t.popupTitleLine=E("hr",{className:"settings-hr"}),t.inputContainerShort=E("div",{className:"form-input"}),t.inputLabelShort=E("label",{innerText:"Short Break: ",for:"short-number"}),t.inputBoxShort=E("input",{id:"short-number",name:"short-number",type:"number",min:"3",max:"5",value:t._shortBreak}),t.inputBoundShort=E("span",{className:"bounds",innerText:"3 - 5 minutes"}),t.inputErrorShort=E("p",{className:"error",innerText:"Please enter valid entry"}),t.inputErrorShort.style.visibility="hidden",t.inputContainerLong=E("div",{className:"form-input"}),t.inputLabelLong=E("label",{innerText:"Long Break: ",for:"long-number"}),t.inputBoxLong=E("input",{id:"long-number",name:"long-number",type:"number",min:"15",max:"30",value:t._longBreak}),t.inputBoundLong=E("span",{className:"bounds",innerText:"15 - 30 minutes"}),t.inputErrorLong=E("p",{className:"error",innerText:"Please enter valid entry"}),t.inputErrorLong.style.visibility="hidden",t.inputContainerSound=E("div",{className:"form-input"}),t.inputLabelSound=E("label",{for:"sound",innerText:"Sound: "}),t.inputBoxSound=E("select",{name:"sound",id:"sound"}),t.soundOption1=E("option",{value:"assets/calm-alarm.mp3",innerText:"Calm Alarm"}),t.soundOption2=E("option",{value:"assets/original-alarm.mp3",innerText:"Orginal Alarm"}),t.soundOption3=E("option",{value:"assets/kanye-stop.mp3",innerText:"Kanye Telling You to Stop"}),t.saveButton=E("button",{innerText:"SAVE",className:"save-button"}),t.overlayEl=E("div",{id:"overlay"}),t.inputContainerShort.append(t.inputLabelShort,t.inputBoxShort,t.inputBoundShort,t.inputErrorShort),t.inputContainerLong.append(t.inputLabelLong,t.inputBoxLong,t.inputBoundLong,t.inputErrorLong),t.inputBoxSound.append(t.soundOption1,t.soundOption2,t.soundOption3),t.inputContainerSound.append(t.inputLabelSound,t.inputBoxSound),t.contentContainer.append(t.popupTitle,t.popupTitleLine,t.inputContainerShort,t.inputContainerLong,t.inputContainerSound,t.saveButton),t.popupContainer.append(t.contentContainer),t.shadow.append(t.styleElement,t.popupContainer,t.overlayEl),t}return l()(o,[{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"shortBreakLength":C(n)&&(this._shortBreak=n,this.inputBoxShort.value=n,this.inputErrorShort.visibility="hidden");break;case"longBreakLength":O(n)&&(this._longBreak=n,this.inputBoxLong.value=n,this.inputErrorLong.visibility="hidden");break;case"timerSound":this._timerSound=n,this.inputBoxSound.value=n}}},{key:"shortBreak",get:function(){return this._shortBreak},set:function(t){this._shortBreak=t,this.setAttribute("shortBreakLength",this._shortBreak)}},{key:"longBreak",get:function(){return this._longBreak},set:function(t){this._longBreak=t,this.setAttribute("longBreakLength",this._longBreak)}},{key:"timerSound",get:function(){return this._timerSound},set:function(t){this._timerSound=t,this.setAttribute("timerSound",this._timerSound)}}],[{key:"observedAttributes",get:function(){return["shortBreakLength","longBreakLength","timerSound"]}}]),o}(v()(HTMLElement));var B=n(713),q=n.n(B);function D(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function M(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?D(Object(n),!0).forEach((function(e){q()(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):D(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var F,G,z,H,J,Y,V,K,U,$,Q,W,X,Z,tt,et=[],nt=function(){window.localStorage.setItem("tasks",JSON.stringify(et))},rt=function(t){var e=t.name;return{taskIndex:et.findIndex((function(t){return t.name===e})),taskElement:G.querySelector('[name="'.concat(e,'"]'))}},ot=function(t){return{delete:Array.from(t.shadowRoot.querySelectorAll(".task-button")).find((function(t){return"delete-button"===t.getAttribute("id")}))}},it=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"end";if("end"!==e&&"start"!==e){var n=rt(e),r=n.taskElement;r.before(t)}else"end"===e?G.append(t):"start"===e&&G.prepend(t);return t},at=function(t){var e=rt(t).taskElement;return e.remove(),e},st=function(t,e){var n=e.name,r=e.usedPomodoros,o=e.estimatedPomodoros,i=e.selected,a=e.completed,s=rt(t),c=s.taskIndex,u=s.taskElement;return et[c]=e,nt(),u.setAttribute("name",n),u.setAttribute("used-pomodoros",r),u.setAttribute("estimated-pomodoros",o),u.setAttribute("selected",i),u.setAttribute("completed",a),e},ct=function(){return et.find((function(t){return t.selected}))},ut=function(t){var e=ct();e&&st(e,M(M({},e),{},{selected:!1}));var n=rt(t),r=n.taskElement,o=n.taskIndex;return at(t),it(r,"start"),et.splice(o,1),et.unshift(t),st(t,M(M({},t),{},{selected:!0}))},lt=function(t){var e=t.name,n=t.usedPomodoros,r=t.estimatedPomodoros,o=t.selected,i=t.completed,a=E("task-item",{name:e,"used-pomodoros":n,"estimated-pomodoros":r,selected:o}),s=a.shadowRoot.querySelector(".text-container"),c=ot(a).delete;return i||(s.onclick=function(){return ut(t)}),c.onclick=function(){return n=rt(e=t).taskIndex,et.splice(n,1),window.localStorage.setItem("tasks",JSON.stringify(et)),void at(e);var e,n},a},pt=function(t){t.preventDefault();var e,n,r,o=J,i=o.name,a=o.pomodoro,s=i.value,c=a.value,u=s.trim(),l=Number(c);Number.isNaN(l)||(i.focus(),n=lt(e={name:u,estimatedPomodoros:l,usedPomodoros:0,selected:!1,completed:!1}),-1!==(r=et.findIndex((function(t){return t.completed})))?(et.splice(r,0,e),it(n,et[r+1])):(et.push(e),it(n)),nt(),Object.values(J).forEach((function(t){t.value=""})))},dt=function(t){var e=t.target.value.trim();et.some((function(t){return t.name===e}))?t.target.setCustomValidity("Duplicate task."):t.target.setCustomValidity("")},mt=function(){return et.length>0&&!et[0].completed?ut(et[0]):null},ft=function(){et.forEach((function(t){st(t,M(M({},t),{},{selected:!1}))}))},ht=function(t){et.forEach((function(e){var n=rt(e).taskElement.shadowRoot,r=n.querySelector(".item-container"),o=n.querySelector(".text-container");t?r.classList.remove("disabled"):r.classList.add("disabled"),t&&!e.completed?o.onclick=function(){return ut(e)}:o.onclick=null;var i=ot(rt(e).taskElement);Object.values(i).forEach((function(e){e.disabled=!t}))}))},bt=function(t){Y=t},yt=function(t){Y.progress=JSON.stringify(t)},vt=function(t){V=t},gt=function(t){V.time=t},kt=n(319),xt=n.n(kt),wt=new Audio;wt.volume=.2;var St,Et,Lt,Ct,Ot,Nt,_t,Tt,Pt,It,jt,At,Rt,Bt,qt=function(){return K.shortBreakLength},Dt=function(){return K.longBreakLength},Mt=function(){return K.timerSound},Ft=function(t){K.shortBreakLength=t},Gt=function(t){K.longBreakLength=t},zt=function(t){K.timerSound=t,window.localStorage.setItem("timerAudio",t)},Ht=function(){U.classList.add("active"),Q.classList.add("active"),W.value=qt(),X.value=Dt(),Z.value=Mt()},Jt=function(){wt.pause(),U.classList.remove("active"),Q.classList.remove("active")},Yt=function(t,e){var n=function(){var t=window.localStorage.getItem("shortBreakLength"),e=window.localStorage.getItem("longBreakLength");return t&&C(t)||(t=5,window.localStorage.setItem("shortBreakLength",t)),e&&O(e)||(e=15,window.localStorage.setItem("longBreakLength",e)),{shortBreakLength:t,longBreakLength:e}}(),r=n.shortBreakLength,o=n.longBreakLength;!function(t){var e=(K=t).shadowRoot;U=e.querySelector(".popup"),$=e.querySelector(".save-button"),Q=e.querySelector("#overlay"),W=e.querySelector("#short-number"),X=e.querySelector("#long-number"),Z=e.querySelector("#sound"),tt=e.querySelectorAll(".error")}(t),Ft(r),Gt(o);var i=window.localStorage.getItem("timerAudio");zt(["assets/calm-alarm.mp3","assets/kanye-stop.mp3","assets/original-alarm.mp3"].includes(i)?i:"assets/calm-alarm.mp3"),Q.onclick=Jt,$.addEventListener("click",(function(){var t,n,r,o,i=(t=W.value,n=X.value,r=C(t),o=O(n),tt[0].style.visibility=r?"hidden":"visible",tt[1].style.visibility=o?"hidden":"visible",r&&o?(zt(Z.value),Ft(t),Gt(n),localStorage.setItem("shortBreakLength",t),localStorage.setItem("longBreakLength",n),[t,n]):null);i&&(Jt(),e.apply(void 0,xt()(i)))})),Z.onchange=function(){wt.pause(),wt.src=Z.value,wt.play()}},Vt=function(t){Et=(St=t).querySelector(".announcement"),Lt=St.querySelector(".announcement-yes-button"),Ct=St.querySelector(".announcement-no-button"),Lt.onmousedown=function(t){return t.preventDefault()},Ct.onmousedown=function(t){return t.preventDefault()}},Kt=function(t){Et.innerText=t},Ut=function(t){Ct.onclick=t},$t=function(t){"visible"===t?(Lt.classList.remove("hidden"),Ct.classList.remove("hidden")):(Lt.classList.add("hidden"),Ct.classList.add("hidden"))},Qt=function(){Ot.classList.add("active")},Wt=function(){Ot.classList.remove("active")},Xt=function(t,e){!function(t){Nt=(Ot=t).querySelector("#confirmation-popup"),_t=Nt.querySelector(".confirmation-no-button"),Tt=Nt.querySelector(".confirmation-yes-button")}(t),_t.onmousedown=function(t){return t.preventDefault()},Tt.onmousedown=function(t){return t.preventDefault()},Tt.onclick=function(){Wt(),e()},_t.onclick=Wt,Ot.onclick=Wt,Nt.onclick=function(t){return t.stopPropagation()}},Zt=function(){Pt.classList.remove("active"),jt.innerHTML=""},te=function(t,e){var n,r,o;!function(t){It=(Pt=t).querySelector("#summary-popup"),jt=Pt.querySelector(".task-summary-list"),At=Pt.querySelector(".summary-actual-pomos"),Rt=Pt.querySelector(".summary-estimated-pomos"),Bt=Pt.querySelector(".summary-close-button")}(t),r=(n=e).filter((function(t){return t.completed})),o=n.filter((function(t){return!t.completed})),[].concat(xt()(r),xt()(o)).forEach((function(t){var e=function(t){var e=t.name,n=t.usedPomodoros,r=t.estimatedPomodoros,o=t.completed,i=E("div",{className:"task-summary-item ".concat(o?"completed":"incompleted")}),a=E("span",{className:"task-summary-name",innerText:e}),s=E("span",{className:"task-summary-pomodoros",innerText:"".concat(n,"/").concat(r)});return i.append(a,s),i}(t);jt.append(e)}));var i=e.reduce((function(t,e){return{actual:t.actual+e.usedPomodoros,estimated:t.estimated+e.estimatedPomodoros}}),{actual:0,estimated:0}),a=i.actual,s=i.estimated;At.innerText="Actual: ".concat(a),Rt.innerText="Estimated: ".concat(s),Bt.onclick=Zt,Bt.onmousedown=function(t){return t.preventDefault()},Pt.onclick=Zt,It.onclick=function(t){return t.stopPropagation()}};customElements.define("timer-component",I),customElements.define("progress-ring",j),customElements.define("task-list",T),customElements.define("settings-component",R),customElements.define("pomodoro-circles",A);var ee,ne,re=!1,oe=new Audio;oe.volume=.2;var ie=function(){var t=o()(a().mark((function t(e){var n,r;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e;case 1:if(!(n>=0)){t.next=12;break}if(re){t.next=4;break}return t.abrupt("return",!1);case 4:return r=100*n/e,gt(n),yt(r),t.next=9,N(1);case 9:n--,t.next=1;break;case 12:return t.abrupt("return",!0);case 13:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),ae=function(){var t=o()(a().mark((function t(n){var r,o,i,s;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=0,o=w,i=null;case 3:if(!re){t.next=35;break}if(o!==w){t.next=26;break}if((i=ct())||(i=mt()),i){t.next=9;break}return t.abrupt("return",0===r?-1:r);case 9:return 0===r&&n(),ht(!1),Kt("Focus."),oe.pause(),t.next=15,ie(6);case 15:if(t.sent){t.next=18;break}return t.abrupt("return",r);case 18:void 0,u=(c=i).usedPomodoros,i=st(c,M(M({},c),{},{usedPomodoros:u+1})),oe.src=Mt(),oe.play(),r++,o=r>0&&r%4==0?S:"shortBreakInterval",t.next=30;break;case 26:return t.delegateYield(a().mark((function t(){var e,n,s;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return $t("visible"),Kt("Did you finish the task?"),e=i,n=o===x?x:"Enjoy your short break!",s=!1,a=function(){var t,r,o,i;o=(r=rt(t=e)).taskIndex,i=r.taskElement,at(t),it(i,"end"),i.setAttribute("selected",!1),i.setAttribute("completed",!0),i.shadowRoot.querySelector(".text-container").onclick=null,et.splice(o,1),et.push(t),st(t,M(M({},t),{},{selected:!1,completed:!0})),mt(),Kt(n),$t("hidden"),s=!0,ht(!0)},Lt.onclick=a,Ut((function(){Kt(n),$t("hidden"),s=!0})),t.next=9,ie(o===S?60*ne:60*ee);case 9:if(t.sent){t.next=12;break}return t.abrupt("return",{v:r});case 12:s||$t("hidden"),o=w;case 14:case"end":return t.stop()}var a}),t)}))(),"t0",27);case 27:if(s=t.t0,"object"!==e()(s)){t.next=30;break}return t.abrupt("return",s.v);case 30:return yt(100),t.next=33,N(.5);case 33:t.next=3;break;case 35:return t.abrupt("return",r);case 36:case"end":return t.stop()}var c,u}),t)})));return function(e){return t.apply(this,arguments)}}(),se=function(t,e){Kt(-1===e?"No work to be done.":"Good work today!"),ft(),t.innerText="Start",t.className="session-button",te(document.querySelector("#summary-overlay"),et),Pt.classList.add("active")};window.addEventListener("DOMContentLoaded",(function(){var t=document.querySelector(".settings-icon"),e=document.querySelector(".progress-ring"),n=e.shadowRoot.querySelector(".timer"),r=(e.shadowRoot.querySelector(".circles"),document.querySelector(".session-button")),i=document.querySelector(".announcement-container"),s=document.querySelector(".task-list"),c=document.querySelector("#confirmation-overlay"),u=document.querySelector(".settings");bt(e),vt(n),Vt(i),function(t){F=t.shadowRoot.querySelector(".container"),G=F.querySelector(".task-item-container"),z=F.querySelector(".task-item-form"),H=z.shadowRoot.querySelector(".task-form"),J={name:H.querySelector("#name-input"),pomodoro:H.querySelector("#pomodoro-input")}}(s),H.addEventListener("submit",pt),JSON.parse(window.localStorage.getItem("tasks"))||window.localStorage.setItem("tasks",JSON.stringify([])),(et=JSON.parse(window.localStorage.getItem("tasks"))).forEach((function(t){return it(lt(t))})),J.name.oninput=dt,Xt(c,(function(){re=!1})),Yt(u,(function(t,e){ee=t,ne=e}));var l=document.querySelector(".navbar");window.onscroll=function(){0===window.scrollY?l.classList.remove("scrolled"):l.classList.add("scrolled")},ee=qt(),ne=Dt(),t.onclick=Ht,r.onmousedown=function(t){t.preventDefault()},n.onclick=function(){return oe.pause()},gt(6),ft(),r.addEventListener("click",o()(a().mark((function t(){var e,n;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if("Start"!==r.innerText){t.next=13;break}return re=!0,e=function(){r.innerText="End",r.classList.add("session-button","in-session")},t.next=5,ae(e);case 5:n=t.sent,ht(!0),$t("hidden"),yt(100),gt(6),se(r,n),t.next=14;break;case 13:Qt();case 14:case"end":return t.stop()}}),t)}))))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pc05hdGl2ZUZ1bmN0aW9uLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVSZXN0LmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvd3JhcE5hdGl2ZVN1cGVyLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL2dyb3VwNi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9ncm91cDYvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vZ3JvdXA2L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9ncm91cDYvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy91dGlscy91dGlscy5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvY29tcG9uZW50cy9UYXNrSXRlbS5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvY29tcG9uZW50cy9UYXNrTGlzdC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvY29tcG9uZW50cy9UYXNrSXRlbUZvcm0uanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL2NvbXBvbmVudHMvVGltZXIuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL2NvbXBvbmVudHMvUHJvZ3Jlc3NSaW5nLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9jb21wb25lbnRzL1BvbW9kb3JvQ2lyY2xlcy5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvY29tcG9uZW50cy9TZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvc2NyaXB0cy90YXNrTGlzdC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvc2NyaXB0cy9wcm9ncmVzc1JpbmcuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL3NjcmlwdHMvdGltZXIuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL3NjcmlwdHMvc2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL3NjcmlwdHMvYW5ub3VuY2VtZW50LmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9zY3JpcHRzL2NvbmZpcm1hdGlvblBvcHVwLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9zY3JpcHRzL3N1bW1hcnlQb3B1cC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvc2NyaXB0cy9pbmRleC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXJyIiwibGVuIiwibGVuZ3RoIiwiaSIsImFycjIiLCJBcnJheSIsImlzQXJyYXkiLCJhcnJheUxpa2VUb0FycmF5Iiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVzb2x2ZSIsInJlamVjdCIsIl9uZXh0IiwiX3Rocm93Iiwia2V5IiwiYXJnIiwiaW5mbyIsInZhbHVlIiwiZXJyb3IiLCJkb25lIiwiUHJvbWlzZSIsInRoZW4iLCJmbiIsInRoaXMiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJlcnIiLCJ1bmRlZmluZWQiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwic2V0UHJvdG90eXBlT2YiLCJpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY29uc3RydWN0IiwiUGFyZW50IiwiQ2xhc3MiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYSIsInB1c2giLCJGdW5jdGlvbiIsImJpbmQiLCJwcm90b3R5cGUiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwib2JqIiwiX2dldFByb3RvdHlwZU9mIiwibyIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ0b1N0cmluZyIsImNhbGwiLCJpbmRleE9mIiwic2hhbSIsIlByb3h5IiwiRGF0ZSIsImUiLCJpdGVyIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJmcm9tIiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsIl9zIiwiX2kiLCJuZXh0IiwiX3R5cGVvZiIsImFzc2VydFRoaXNJbml0aWFsaXplZCIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJhcnJheVdpdGhIb2xlcyIsIml0ZXJhYmxlVG9BcnJheUxpbWl0IiwidW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVJlc3QiLCJhcnJheVdpdGhvdXRIb2xlcyIsIml0ZXJhYmxlVG9BcnJheSIsIm5vbkl0ZXJhYmxlU3ByZWFkIiwibWluTGVuIiwibiIsInNsaWNlIiwibmFtZSIsInRlc3QiLCJpc05hdGl2ZUZ1bmN0aW9uIiwiX3dyYXBOYXRpdmVTdXBlciIsIl9jYWNoZSIsIk1hcCIsImhhcyIsImdldCIsInNldCIsIldyYXBwZXIiLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJjb250ZXh0IiwiQ29udGV4dCIsIl9pbnZva2UiLCJzdGF0ZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJtZXRob2QiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkVycm9yIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsInR5cGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXN1bHQiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNOYU4iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJrZXlzIiwib2JqZWN0IiwicmV2ZXJzZSIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJwcmV2IiwiY2hhckF0Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJkZWZpbml0aW9uIiwicHJvcCIsIkxPTkdfQlJFQUtfQU5OT1VOQ0VNRU5UIiwiUE9NT0RPUk9fSU5URVJWQUwiLCJMT05HX0JSRUFLX0lOVEVSVkFMIiwiY3JlYXRlRWxlbWVudCIsImVsZW1lbnRUeXBlIiwiZWxlbWVudCIsIm9wdGlvbnMiLCJuYW1lc3BhY2UiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImVudHJpZXMiLCJzZXRBdHRyaWJ1dGUiLCJ2YWxpZGF0ZU51bWJlciIsIm51bSIsInBhcnNlRmxvYXQiLCJOdW1iZXIiLCJjaGVja0lmU2hvcnRJbnB1dFZhbGlkIiwiaW5wdXQiLCJjaGVja0lmTG9uZ0lucHV0VmFsaWQiLCJ0aWNrIiwiZHVyYXRpb24iLCJyZXMiLCJzZXRUaW1lb3V0IiwiVGFza0l0ZW0iLCJ1c2VkUG9tb2Rvcm9zIiwiZXN0aW1hdGVkUG9tb2Rvcm9zIiwic2hhZG93IiwiYXR0YWNoU2hhZG93IiwibW9kZSIsInN0eWxlRWxlbWVudCIsImlubmVyVGV4dCIsIm1hdGVyaWFsSWNvbkxpbmtFbGVtZW50IiwicmVsIiwiaHJlZiIsIml0ZW1Db250YWluZXJFbGVtZW50IiwiY2xhc3NOYW1lIiwidGV4dENvbnRhaW5lckVsZW1lbnQiLCJvbm1vdXNlb3V0IiwiYmx1ciIsIm9ubW91c2Vkb3duIiwicHJldmVudERlZmF1bHQiLCJuYW1lRWxlbWVudCIsInBvbW9kb3JvQ29udGFpbmVyIiwicG9tb2Rvcm9MYWJlbCIsImZvciIsInBvbW9kb3JvRWxlbWVudCIsImlkIiwiZGVsZXRlVGFza0J1dHRvbiIsImRlbGV0ZVRhc2tJY29uIiwiYXBwZW5kIiwiYXBwZW5kQ2hpbGQiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiSFRNTEVsZW1lbnQiLCJjdXN0b21FbGVtZW50cyIsImNvbnRhaW5lckVsZW1lbnQiLCJ0aXRsZUVsZW1lbnQiLCJ0YXNrSXRlbUxpc3RDb250YWluZXJFbGVtZW50IiwidGFza0l0ZW1Gb3JtRWxlbWVudCIsIlRhc2tJdGVtRm9ybSIsImZpZWxkSW5wdXRDb250YWluZXIiLCJuYW1lSW5wdXRDb250YWluZXIiLCJuYW1lSW5wdXRMYWJlbCIsIm5hbWVJbnB1dEVsZW1lbnQiLCJwbGFjZWhvbGRlciIsInJlcXVpcmVkIiwicG9tb2Rvcm9JbnB1dENvbnRhaW5lciIsInBvbW9kb3JvSW5wdXRMYWJlbCIsInBvbW9kb3JvSW5wdXRFbGVtZW50IiwibWluIiwic3VibWl0SW5wdXRFbGVtZW50IiwiX3RpbWUiLCJnZXRBdHRyaWJ1dGUiLCJfY29udGFpbmVyUmFkaXVzIiwidGltZXJDb250YWluZXIiLCJ0b3RhbFNlY29uZHMiLCJtaW51dGVzIiwic2Vjb25kcyIsInRpbWUiLCJuZXdWYWwiLCJwYXJzZUludCIsIk1hdGgiLCJmbG9vciIsIm1hcCIsInQiLCJyYWRpdXMiLCJyb290Iiwic3ZnTmFtZXNwYWNlIiwic3ZnRWxlbWVudCIsImNsYXNzIiwiY2lyY2xlRWxlbWVudCIsImJhc2VDaXJjbGVFbGVtZW50IiwiZm9yZWlnbk9iamVjdEVsZW1lbnQiLCJmb3JlaWduT2JqZWN0Q29udGFpbmVyIiwidGltZXJDb21wb25lbnQiLCJjaXJjbGVDb21wb25lbnQiLCJjaXJjbGVDb3VudCIsIl9yYWRpdXMiLCJfc3Ryb2tlIiwiX3Byb2dyZXNzIiwidXBkYXRlQ29tcG9uZW50Iiwic3Ryb2tlIiwicHJvZ3Jlc3MiLCJub3JtYWxpemVkUmFkaXVzIiwiY2lyY3VtZmVyZW5jZSIsIlBJIiwiY29udGFpbmVyUmFkaXVzIiwibmV3VmFsdWVOdW1iZXIiLCJ2YWwiLCJfY2lyY2xlQ291bnQiLCJjb3VudGVyQ29udGFpbmVyIiwiY2lyY2xlMSIsImNpcmNsZTIiLCJjaXJjbGUzIiwiY2lyY2xlNCIsIl9zaG9ydEJyZWFrIiwiX2xvbmdCcmVhayIsIl90aW1lclNvdW5kIiwicG9wdXBDb250YWluZXIiLCJjb250ZW50Q29udGFpbmVyIiwicG9wdXBUaXRsZSIsInBvcHVwVGl0bGVMaW5lIiwiaW5wdXRDb250YWluZXJTaG9ydCIsImlucHV0TGFiZWxTaG9ydCIsImlucHV0Qm94U2hvcnQiLCJtYXgiLCJpbnB1dEJvdW5kU2hvcnQiLCJpbnB1dEVycm9yU2hvcnQiLCJzdHlsZSIsInZpc2liaWxpdHkiLCJpbnB1dENvbnRhaW5lckxvbmciLCJpbnB1dExhYmVsTG9uZyIsImlucHV0Qm94TG9uZyIsImlucHV0Qm91bmRMb25nIiwiaW5wdXRFcnJvckxvbmciLCJpbnB1dENvbnRhaW5lclNvdW5kIiwiaW5wdXRMYWJlbFNvdW5kIiwiaW5wdXRCb3hTb3VuZCIsInNvdW5kT3B0aW9uMSIsInNvdW5kT3B0aW9uMiIsInNvdW5kT3B0aW9uMyIsInNhdmVCdXR0b24iLCJvdmVybGF5RWwiLCJzaG9ydEJyZWFrIiwibG9uZ0JyZWFrIiwidGltZXJTb3VuZCIsInRhc2tMaXN0Q29udGFpbmVyIiwidGFza0xpc3RJdGVtQ29udGFpbmVyIiwidGFza0l0ZW1Gb3JtIiwidGFza0l0ZW1Gb3JtQ29udGFpbmVyIiwidGFza0l0ZW1Gb3JtSW5wdXRzIiwicHJvZ3Jlc3NSaW5nRWxlbWVudCIsInRpbWVyRWxlbWVudCIsInNldHRpbmdzRWxlbWVudCIsInBvcHVwRWwiLCJvdmVybGF5Iiwic2hvcnRCcmVha0lucHV0IiwibG9uZ0JyZWFrSW5wdXQiLCJzb3VuZElucHV0IiwiZXJyb3JNZXNzYWdlcyIsInRhc2tzIiwic2F2ZVRhc2tzIiwid2luZG93IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXRUYXNrIiwidGFza0luZGV4IiwiZmluZEluZGV4IiwidGFzayIsInRhc2tFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImdldFRhc2tJdGVtQnV0dG9ucyIsImRlbGV0ZSIsInNoYWRvd1Jvb3QiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZmluZCIsImJ0biIsImFkZFRhc2tUb0RvbSIsIm5ld1Rhc2tFbGVtZW50IiwicG9zaXRpb24iLCJiZWZvcmUiLCJwcmVwZW5kIiwicmVtb3ZlVGFza0Zyb21Eb20iLCJ0YXNrVG9SZW1vdmUiLCJ1cGRhdGVUYXNrIiwicHJldlRhc2siLCJuZXh0VGFzayIsIm5leHROYW1lIiwic2VsZWN0ZWQiLCJjb21wbGV0ZWQiLCJnZXRDdXJyZW50bHlTZWxlY3RlZFRhc2siLCJzZWxlY3RUYXNrIiwicHJldlNlbGVjdGVkVGFzayIsInNwbGljZSIsInVuc2hpZnQiLCJjcmVhdGVUYXNrRWxlbWVudCIsIm5ld1Rhc2siLCJ0ZXh0Q29udGFpbmVyIiwiZGVsZXRlQnV0dG9uIiwib25jbGljayIsInRhc2tUb0RlbGV0ZSIsImhhbmRsZVRhc2tGb3JtU3VibWl0IiwiaW5kZXhPZkZpcnN0Q29tcGxldGVkIiwibmFtZUlucHV0IiwicG9tb2Rvcm9JbnB1dCIsInBvbW9kb3JvIiwidHJpbW1lZE5hbWUiLCJ0cmltIiwicG9tb2Rvcm9OdW1iZXIiLCJmb2N1cyIsImNoZWNrRHVwbGljYXRlVGFzayIsInNvbWUiLCJzZXRDdXN0b21WYWxpZGl0eSIsInNlbGVjdEZpcnN0VGFzayIsImRlc2VsZWN0QWxsVGFza3MiLCJzZXRUYXNrbGlzdFVzYWJpbGl0eSIsInNob3VsZFRhc2tsaXN0QmVVc2FibGUiLCJpdGVtQ29udGFpbmVyIiwiYnV0dG9ucyIsImRpc2FibGVkIiwiaW5pdGlhbGl6ZVByb2dyZXNzUmluZyIsInNldFByb2dyZXNzIiwiaW5pdGlhbGl6ZVRpbWVyIiwic2V0VGltZXIiLCJ0aW1lckF1ZGlvIiwiQXVkaW8iLCJ2b2x1bWUiLCJhbm5vdW5jZW1lbnRDb250YWluZXIiLCJhbm5vdW5jZW1lbnRFbGVtZW50IiwieWVzQnV0dG9uIiwibm9CdXR0b24iLCJjb25maXJtYXRpb25PdmVybGF5IiwiY29uZmlybWF0aW9uUG9wdXAiLCJzdW1tYXJ5T3ZlcmxheSIsInN1bW1hcnlQb3B1cCIsInRhc2tTdW1tYXJ5TGlzdCIsImFjdHVhbFBvbW9zRWxlbWVudCIsImVzdGltYXRlZFBvbW9zRWxlbWVudCIsImNsb3NlU3VtbWFyeUJ1dHRvbiIsImdldFNob3J0QnJlYWtMZW5ndGgiLCJzaG9ydEJyZWFrTGVuZ3RoIiwiZ2V0TG9uZ0JyZWFrTGVuZ3RoIiwibG9uZ0JyZWFrTGVuZ3RoIiwiZ2V0VGltZXJBdWRpbyIsInNldFNob3J0QnJlYWtMZW5ndGgiLCJzZXRMb25nQnJlYWtMZW5ndGgiLCJzZXRUaW1lckF1ZGlvIiwib3BlblBvcHVwIiwiY2xvc2VQb3B1cCIsInBhdXNlIiwiaW5pdGlhbGl6ZVBvcHVwIiwic2F2ZVNldHRpbmdzQ2FsbGJhY2siLCJnZXRJdGVtIiwiaW5pdGlhbGl6ZUludGVydmFsTGVuZ3RocyIsImluaXRpYWxpemVFbGVtZW50cyIsInNhdmVkQXVkaW8iLCJpbmNsdWRlcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJuZXdTaG9ydEJyZWFrTGVuZ3RoIiwibmV3TG9uZ0JyZWFrTGVuZ3RoIiwiaXNTaG9ydElucHV0VmFsaWQiLCJpc0xvbmdJbnB1dFZhbGlkIiwibmV3QnJlYWtMZW5ndGhzIiwib25jaGFuZ2UiLCJzcmMiLCJwbGF5IiwiaW5pdGlhbGl6ZUFubm91bmNlbWVudCIsInNldEFubm91bmNlbWVudCIsImFubm91bmNlbWVudCIsInNldE5vQnV0dG9uQ2FsbGJhY2siLCJjYWxsYmFjayIsInNldEJ1dHRvblZpc2liaWxpdHkiLCJvbkFjY2VwdENhbGxiYWNrIiwic3RvcFByb3BhZ2F0aW9uIiwiaW5uZXJIVE1MIiwidGFza0xpc3QiLCJjb21wbGV0ZWRUYXNrcyIsImluY29tcGxldGVkVGFza3MiLCJmaWx0ZXIiLCJ0YXNrU3VtbWFyeSIsInBvbW9kb3Jvc0VsZW1lbnQiLCJjcmVhdGVUYXNrU3VtbWFyeSIsInJlZHVjZSIsImFjYyIsImFjdHVhbCIsImVzdGltYXRlZCIsIlRpbWVyIiwiUHJvZ3Jlc3NSaW5nIiwiVGFza0xpc3QiLCJTZXR0aW5ncyIsIlBvbW9kb3JvQ2lyY2xlcyIsImlzU2Vzc2lvbk9uZ29pbmciLCJzdGFydEludGVydmFsIiwiaW50ZXJ2YWxMZW5ndGgiLCJjdXJyVGltZSIsImN1cnJQcm9ncmVzcyIsInN0YXJ0U2Vzc2lvbiIsImNoYW5nZVNlc3Npb25CdXR0b24iLCJudW1Qb21vZG9yb3MiLCJjdXJySW50ZXJ2YWwiLCJjdXJyU2VsZWN0ZWRUYXNrIiwiY3VyclNlbGVjdGVkVGFza0NvcHkiLCJjdXJyQW5ub3VuY2VtZW50Iiwid2FzQW5ub3VuY2VtZW50QnV0dG9uQ2xpY2tlZCIsImNvbXBsZXRlZFRhc2siLCJzZXRBbm5vdW5jZW1lbnROb0J1dHRvbkNhbGxiYWNrIiwiZW5kU2Vzc2lvbiIsInNlc3Npb25CdXR0b24iLCJpbml0aWFsaXplU3VtbWFyeVBvcHVwIiwic2V0dGluZ3NJY29uIiwidGFza0xpc3RFbGVtZW50IiwicGFyc2UiLCJvbmlucHV0IiwiaW5pdGlhbGl6ZUNvbmZpcm1hdGlvblBvcHVwIiwiaW5pdGlhbGl6ZVNldHRpbmdzUG9wdXAiLCJuYXZCYXIiLCJvbnNjcm9sbCIsInNjcm9sbFkiLCJvcGVuU2V0dGluZ3NQb3B1cCIsIm9wZW5Db25maXJtYXRpb25Qb3B1cCJdLCJtYXBwaW5ncyI6InFCQVVBQSxFQUFPQyxRQVZQLFNBQTJCQyxFQUFLQyxJQUNuQixNQUFQQSxHQUFlQSxFQUFNRCxFQUFJRSxVQUFRRCxFQUFNRCxFQUFJRSxRQUUvQyxJQUFLLElBQUlDLEVBQUksRUFBR0MsRUFBTyxJQUFJQyxNQUFNSixHQUFNRSxFQUFJRixFQUFLRSxJQUM5Q0MsRUFBS0QsR0FBS0gsRUFBSUcsR0FHaEIsT0FBT0MsSSxRQ0hUTixFQUFPQyxRQUpQLFNBQXlCQyxHQUN2QixHQUFJSyxNQUFNQyxRQUFRTixHQUFNLE9BQU9BLEks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QVksTUFDMUIwUixFQUFjblEsVUFBVUMsSUFBSSxpQkFBa0IsZUFMWixTQU9UdVAsR0FBYUMsR0FQSixPQU85QkMsRUFQOEIsT0FVcENuRixJQUFxQixHQUNyQndELEdBQW9CLFVBR3BCbEQsR0FBWSxLQUNaRSxHQUFTLEdBRVRtRixHQUFXQyxFQUFlVCxHQWpCVSx3QkFtQnBDcUIsS0FuQm9DLGlEIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5TGlrZVRvQXJyYXk7IiwiZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheVdpdGhIb2xlczsiLCJ2YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXlcIik7XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRob3V0SG9sZXM7IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkOyIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3luY1RvR2VuZXJhdG9yOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsInZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mXCIpO1xuXG52YXIgaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gcmVxdWlyZShcIi4vaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0XCIpO1xuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgaWYgKGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBzZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY29uc3RydWN0OyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5OyIsImZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZjsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0czsiLCJmdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbihmbikge1xuICByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikgIT09IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pc05hdGl2ZUZ1bmN0aW9uOyIsImZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0OyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5OyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5TGltaXQ7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVSZXN0OyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gcmVxdWlyZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpO1xuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuOyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mOyIsInZhciBhcnJheVdpdGhIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5TGltaXQgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdFwiKTtcblxudmFyIHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciBub25JdGVyYWJsZVJlc3QgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVJlc3RcIik7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NsaWNlZFRvQXJyYXk7IiwidmFyIGFycmF5V2l0aG91dEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRob3V0SG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQ29uc3VtYWJsZUFycmF5OyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCJ2YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXlcIik7XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5OyIsInZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL2dldFByb3RvdHlwZU9mXCIpO1xuXG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxudmFyIGlzTmF0aXZlRnVuY3Rpb24gPSByZXF1aXJlKFwiLi9pc05hdGl2ZUZ1bmN0aW9uXCIpO1xuXG52YXIgY29uc3RydWN0ID0gcmVxdWlyZShcIi4vY29uc3RydWN0XCIpO1xuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gIHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzcztcblxuICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtcblxuICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgIHJldHVybiBjb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7XG4gIH07XG5cbiAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF93cmFwTmF0aXZlU3VwZXI7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvKipcbiAqIEBmaWxlIENvbnN0YW50cyBmaWxlXG4gKi9cblxuLy8gZGVmYXVsdCBpbnRlcnZhbCBkdXJhdGlvbnMgKGluIG1pbnV0ZXMpXG5leHBvcnQgY29uc3QgREVGQVVMVF9QT01PRE9ST19JTlRFUlZBTCA9IDI1O1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0hPUlRfQlJFQUtfSU5URVJWQUwgPSA1O1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfTE9OR19CUkVBS19JTlRFUlZBTCA9IDE1O1xuXG4vLyBhbm5vdW5jZW1lbnRzXG5leHBvcnQgY29uc3QgUE9NT0RPUk9fQU5OT1VOQ0VNRU5UID0gJ0ZvY3VzLic7XG5leHBvcnQgY29uc3QgU0hPUlRfQlJFQUtfQU5OT1VOQ0VNRU5UID0gJ0Vuam95IHlvdXIgc2hvcnQgYnJlYWshJztcbmV4cG9ydCBjb25zdCBMT05HX0JSRUFLX0FOTk9VTkNFTUVOVCA9ICdHb29kIHdvcmsuIEVuam95IGEgbG9uZ2VyIGJyZWFrISc7XG5leHBvcnQgY29uc3QgSU5UUk9fQU5OT1VOQ0VNRU5UID0gJ1doYXQgZG8geW91IG5lZWQgdG8gd29yayBvbiB0b2RheT8nO1xuZXhwb3J0IGNvbnN0IElOVFJPX1NFTEVDVF9UQVNLX0FOTk9VTkNFTUVOVCA9ICdTZWxlY3QgYSB0YXNrIHRoZW4gaGl0IHN0YXJ0ISc7XG5leHBvcnQgY29uc3QgTkVXX1NFTEVDVF9UQVNLX0FOTk9VTkNFTUVOVCA9ICdTZWxlY3QgYW5vdGhlciB0YXNrLic7XG5leHBvcnQgY29uc3QgQ09OVElOVUlOR19TRUxFQ1RfVEFTS19BTk5PVU5DRU1FTlQgPVxuICAnU2VsZWN0IGFub3RoZXIgdGFzayBpZiB5b3Ugd291bGQgbGlrZS4nO1xuZXhwb3J0IGNvbnN0IFRBU0tfQ09NUExFVElPTl9RVUVTVElPTiA9ICdEaWQgeW91IGZpbmlzaCB0aGUgdGFzaz8nO1xuZXhwb3J0IGNvbnN0IEVORF9PRl9TRVNTSU9OX0FOTk9VTkNFTUVOVCA9ICdHb29kIHdvcmsgdG9kYXkhJztcbmV4cG9ydCBjb25zdCBOT19UQVNLU19BTk5PVU5DRU1FTlQgPSAnTm8gd29yayB0byBiZSBkb25lLic7XG5cbi8vIGludGVydmFsIG5hbWVzXG5leHBvcnQgY29uc3QgUE9NT0RPUk9fSU5URVJWQUwgPSAncG9tb2Rvcm9JbnRlcnZhbCc7XG5leHBvcnQgY29uc3QgU0hPUlRfQlJFQUtfSU5URVJWQUwgPSAnc2hvcnRCcmVha0ludGVydmFsJztcbmV4cG9ydCBjb25zdCBMT05HX0JSRUFLX0lOVEVSVkFMID0gJ2xvbmdCcmVha0ludGVydmFsJztcbiIsIi8qKlxuICogQGZpbGUgVmFyaW91cyB1dGlsaXR5IG1ldGhvZHNcbiAqL1xuXG5pbXBvcnQge1xuICBERUZBVUxUX1NIT1JUX0JSRUFLX0lOVEVSVkFMLFxuICBERUZBVUxUX0xPTkdfQlJFQUtfSU5URVJWQUwsXG59IGZyb20gJy4vY29uc3RhbnRzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIEhUTUxFbGVtZW50IGFuZCBzZXQgaXRzIGF0dHJpYnV0ZXNcbiAqIENyZWF0ZWQgdG8gcmVkdWNlIGJvaWxlcnBsYXRlIGZyb20gZWxlbWVudCBjcmVhdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnRUeXBlIC0gZWxlbWVudCB0YWcgbmFtZVxuICogQHBhcmFtIHt7a2V5OiBzdHJpbmd9fSBwcm9wcyAtIGVsZW1lbnQncyBhdHRyaWJ1dGVzL3Byb3BlcnRpZXNcbiAqIEBwYXJhbSB7e29wdGlvbjogc3RyaW5nfX0gb3B0aW9ucyAtIGVsZW1lbnQgb3B0aW9ucyBzdWNoIGFzIG5hbWVzcGFjZVxuICogQHJldHVybiBlbGVtZW50IC0gbmV3IEhUTUxFbGVtZW50IGNyZWF0ZWRcbiAqL1xuY29uc3QgY3JlYXRlRWxlbWVudCA9IChlbGVtZW50VHlwZSwgcHJvcHMgPSB7fSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IHsgbmFtZXNwYWNlIH0gPSBvcHRpb25zO1xuICBsZXQgZWxlbWVudDtcbiAgaWYgKG5hbWVzcGFjZSkge1xuICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCBlbGVtZW50VHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbWVudFR5cGUpO1xuICB9IC8vIGNyZWF0ZSBlbGVtZW50XG5cbiAgLy8gc2V0IGF0dHJpYnV0ZXMvcHJvcGVydGllc1xuICBPYmplY3QuZW50cmllcyhwcm9wcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKG5hbWVzcGFjZSB8fCAhKGtleSBpbiBlbGVtZW50KSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnRba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVsZW1lbnQ7XG59O1xuXG4vKipcbiAqIFRyaWVzIHRvIGNvbnZlcnQgaW5wdXQgdG8gYSBudW1iZXJcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSAtIHRvIGJlIGNvbnZlcnRlZCB0byBudW1iZXJcbiAqIEByZXR1cm4ge251bWJlciB8IG51bGx9IC0gbnVtYmVyIGlmIHN1Y2Nlc3NmdWwsIG51bGwgb3RoZXJ3aXNlXG4gKi9cbmNvbnN0IHZhbGlkYXRlTnVtYmVyID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IG51bSA9IHBhcnNlRmxvYXQodmFsdWUsIDEwKTtcbiAgcmV0dXJuIE51bWJlci5pc05hTihudW0pID8gbnVsbCA6IG51bTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRpbWUgaXMgdmFsaWQgZm9yIHRpbWVyLCBiZXR3ZWVuIDAgc2Vjb25kcyBhbmQgMSBob3VyXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZSAtIHRpbWUgdG8gYmUgY2hlY2tlZCAoaW4gc2Vjb25kcylcbiAqL1xuY29uc3QgY2hlY2tJZlRpbWVWYWxpZCA9ICh0aW1lKSA9PiB7XG4gIGNvbnN0IHNlY29uZHNJbkFuSG91ciA9IDYwICogNjA7XG4gIHJldHVybiB0aW1lID49IDAgJiYgdGltZSA8IHNlY29uZHNJbkFuSG91cjtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIHNob3J0IGJyZWFrIGxlbmd0aCBpcyB2YWxpZFxuICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IC0gc2hvcnQgYnJlYWsgaW5wdXQgdG8gYmUgY2hlY2tlZCAoaW4gbWludXRlcylcbiAqL1xuY29uc3QgY2hlY2tJZlNob3J0SW5wdXRWYWxpZCA9IChpbnB1dCkgPT4ge1xuICByZXR1cm4gaW5wdXQgPj0gMyAmJiBpbnB1dCA8PSA1O1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgbG9uZyBicmVhayBsZW5ndGggaXMgdmFsaWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCAtIGxvbmcgYnJlYWsgaW5wdXQgdG8gYmUgY2hlY2tlZCAoaW4gbWludXRlcylcbiAqL1xuY29uc3QgY2hlY2tJZkxvbmdJbnB1dFZhbGlkID0gKGlucHV0KSA9PiB7XG4gIHJldHVybiBpbnB1dCA+PSAxNSAmJiBpbnB1dCA8PSAzMDtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdGltZXIgYXVkaW8gc3JjIGlzIHZhbGlkXG4gKi9cbmNvbnN0IGNoZWNrSWZUaW1lckF1ZGlvVmFsaWQgPSAoaW5wdXQpID0+IHtcbiAgcmV0dXJuIFtcbiAgICAnYXNzZXRzL2NhbG0tYWxhcm0ubXAzJyxcbiAgICAnYXNzZXRzL2thbnllLXN0b3AubXAzJyxcbiAgICAnYXNzZXRzL29yaWdpbmFsLWFsYXJtLm1wMycsXG4gIF0uaW5jbHVkZXMoaW5wdXQpO1xufTtcblxuLyoqXG4gKiBVc2UgcHJvbWlzZXMgdG8gdGljayBieSBzcGVjaWZpZWQgdGlja0xlbmd0aFxuICogTk9URTogdGlja3MgbWF5IGJlIHNsaWdodGx5IGxvbmdlciB0aGFuIHRoZSBkdXJhdGlvbiBkdWUgdGhlIHNpbmdsZSB0aHJlYWRlZCBuYXR1cmUgb2YgSmF2YVNjcmlwdFxuICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIC0gZHVyYXRpb24gb2YgdGljayAoaW4gc2Vjb25kcylcbiAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IC0gcHJvbWlzZSB0aGF0IHJlc29sdmVzIGFmdGVyIHRpY2sgZHVyYXRpb25cbiAqL1xuY29uc3QgdGljayA9IGFzeW5jIChkdXJhdGlvbikgPT5cbiAgbmV3IFByb21pc2UoKHJlcykgPT4gc2V0VGltZW91dChyZXMsIDEwMDAgKiBkdXJhdGlvbikpO1xuXG4vKipcbiAqIENvbnZlcnRzIHNlY29uZHMgaW50byBNTSA6IFNTXG4gKiBAcGFyYW0ge3N0cmluZ30gc2Vjb25kcyAtIHNlY29uZHMgdG8gY29udmVydFxuICogQHJldHVybiB7c3RyaW5nfSAtIHRpbWUgaW4gZm9ybWF0IE1NOlNTXG4gKi9cbmNvbnN0IGdldE1pbnV0ZXNBbmRTZWNvbmRzID0gKHRvdGFsU2Vjb25kcykgPT4ge1xuICBjb25zdCBbbWludXRlcywgc2Vjb25kc10gPSBbXG4gICAgTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgLyA2MCksXG4gICAgTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgJSA2MCksXG4gIF0ubWFwKCh0KSA9PiAodCA8IDEwID8gYDAke3R9YCA6IHQpKTsgLy8gbGVmdCB0aW1lIHVuaXQgd2l0aCAwIGlmIG5lY2Vzc2FyeVxuICByZXR1cm4gYCR7bWludXRlc306JHtzZWNvbmRzfWA7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgaW50ZXJ2YWwgbGVuZ3RocywgcmV0cmlldmUgZnJvbSBsb2NhbFN0b3JhZ2UgaWYgcG9zc2libGVcbiAqIEByZXR1cm4ge3tzaG9ydEJyZWFrTGVuZ3RoOiBudW1iZXIsIGxvbmdCcmVha0xlbmd0aDogbnVtYmVyfX0gLSBsZW5ndGhzIG9mIGludGVydmFsc1xuICovXG5jb25zdCBpbml0aWFsaXplSW50ZXJ2YWxMZW5ndGhzID0gKCkgPT4ge1xuICBsZXQgc2hvcnRCcmVha0xlbmd0aCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2hvcnRCcmVha0xlbmd0aCcpO1xuICBsZXQgbG9uZ0JyZWFrTGVuZ3RoID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsb25nQnJlYWtMZW5ndGgnKTtcbiAgaWYgKCFzaG9ydEJyZWFrTGVuZ3RoIHx8ICFjaGVja0lmU2hvcnRJbnB1dFZhbGlkKHNob3J0QnJlYWtMZW5ndGgpKSB7XG4gICAgc2hvcnRCcmVha0xlbmd0aCA9IERFRkFVTFRfU0hPUlRfQlJFQUtfSU5URVJWQUw7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzaG9ydEJyZWFrTGVuZ3RoJywgc2hvcnRCcmVha0xlbmd0aCk7XG4gIH1cbiAgaWYgKCFsb25nQnJlYWtMZW5ndGggfHwgIWNoZWNrSWZMb25nSW5wdXRWYWxpZChsb25nQnJlYWtMZW5ndGgpKSB7XG4gICAgbG9uZ0JyZWFrTGVuZ3RoID0gREVGQVVMVF9MT05HX0JSRUFLX0lOVEVSVkFMO1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbG9uZ0JyZWFrTGVuZ3RoJywgbG9uZ0JyZWFrTGVuZ3RoKTtcbiAgfVxuICByZXR1cm4geyBzaG9ydEJyZWFrTGVuZ3RoLCBsb25nQnJlYWtMZW5ndGggfTtcbn07XG5cbmV4cG9ydCB7XG4gIGNyZWF0ZUVsZW1lbnQsXG4gIGluaXRpYWxpemVJbnRlcnZhbExlbmd0aHMsXG4gIGNoZWNrSWZTaG9ydElucHV0VmFsaWQsXG4gIGNoZWNrSWZMb25nSW5wdXRWYWxpZCxcbiAgY2hlY2tJZlRpbWVyQXVkaW9WYWxpZCxcbiAgZ2V0TWludXRlc0FuZFNlY29uZHMsXG4gIHRpY2ssXG4gIGNoZWNrSWZUaW1lVmFsaWQsXG4gIHZhbGlkYXRlTnVtYmVyLFxufTtcbiIsIi8qKlxuICogQGZpbGUgdGFzay1pdGVtIHdlYiBjb21wb25lbnRcbiAqL1xuXG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG4vKipcbiAqIEN1c3RvbSB3ZWIgY29tcG9uZW50IHJlcHJlc2VudGluZyBhIHRhc2sgaXRlbS5cbiAqIEBleHRlbmRzIEhUTUxFbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gbmFtZSAtIG5hbWUgb2YgdGFza1xuICogQHBhcmFtIHtudW1iZXJ9IGVzdGltYXRlZC1wb21vZG9yb3MgLSBlc3RpbWF0ZWQgbnVtYmVyIG9mIHBvbW9kb3JvcyBuZWVkZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSB1c2VkLXBvbW9kb3JvcyAtIHBvbW9kb3JvcyB1c2VkIHNvIGZhclxuICogQHBhcmFtIHtib29sZWFufSBzZWxlY3RlZCAtIGluZGljYXRlcyBpZiB0aGUgY3VycmVudCB0YXNrIGlzIHNlbGVjdGVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXBsZXRlZCAtIGluZGljYXRlcyBpZiB0aGUgY3VycmVudCB0YXNrIGlzIGNvbXBsZXRlZFxuICovXG5jbGFzcyBUYXNrSXRlbSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICduYW1lJyxcbiAgICAgICdlc3RpbWF0ZWQtcG9tb2Rvcm9zJyxcbiAgICAgICd1c2VkLXBvbW9kb3JvcycsXG4gICAgICAnc2VsZWN0ZWQnLFxuICAgICAgJ2NvbXBsZXRlZCcsXG4gICAgXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnVzZWRQb21vZG9yb3MgPSAwO1xuICAgIHRoaXMuZXN0aW1hdGVkUG9tb2Rvcm9zID0gMDtcblxuICAgIC8vIGNyZWF0ZSBzaGFkb3cgcm9vdFxuICAgIHRoaXMuc2hhZG93ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG5cbiAgICB0aGlzLnN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgdGhpcy5zdHlsZUVsZW1lbnQuaW5uZXJUZXh0ID0gYFxuICAgICAgLml0ZW0tY29udGFpbmVyIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMWVtO1xuICAgICAgICBwYWRkaW5nOiAwLjVlbSAyZW07XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICB9XG5cbiAgICAgIC5pdGVtLWNvbnRhaW5lcjpmb2N1cyB7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICB9XG5cbiAgICAgIC5pdGVtLWNvbnRhaW5lci5zZWxlY3RlZCB7XG4gICAgICAgIGJhY2tncm91bmQ6ICM5MGUwZWY7XG4gICAgICB9XG5cbiAgICAgIC50ZXh0LWNvbnRhaW5lciB7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMSk7XG4gICAgICAgIGNvbG9yOiAjNTU1O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHBhZGRpbmc6IDAuNWVtO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgICBmb250OiAxcmVtIFNvdXJjZSBTYW5zIFBybywgc2Fucy1zZXJpZjtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICB9XG5cbiAgICAgIC5pdGVtLWNvbnRhaW5lcjpub3QoLmRpc2FibGVkKTpub3QoLnNlbGVjdGVkKSA+IC50ZXh0LWNvbnRhaW5lcjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTtcbiAgICAgIH1cblxuICAgICAgLnRleHQtY29udGFpbmVyOmZvY3VzIHtcbiAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgYm94LXNoYWRvdzogMCAwIDAgMnB0ICM5MGUwZWY7XG4gICAgICB9XG5cbiAgICAgIC5pdGVtLWNvbnRhaW5lci5zZWxlY3RlZCA+IC50ZXh0LWNvbnRhaW5lcjpmb2N1cyB7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDJwdCAjMDBiNGQ4O1xuICAgICAgfVxuICAgICAgXG4gICAgICAuY29tcGxldGVkIC5uYW1lIHtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XG4gICAgICB9XG5cbiAgICAgIC5uYW1lIHtcbiAgICAgICAgd2lkdGg6IDgwJTtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICBtYXJnaW46IDAuNWVtIDA7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC5wb21vZG9yby1jb250YWluZXIge1xuICAgICAgICB3aWR0aDogMjAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICAgIH1cblxuICAgICAgLnBvbW9kb3JvLWxhYmVsIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IC0wLjVlbTtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIGZvbnQ6IDAuOHJlbSAnU291cmNlIFNhbnMgUHJvJywgc2Fucy1zZXJpZjtcbiAgICAgICAgY29sb3I6ICM3Nzc7XG4gICAgICB9XG5cbiAgICAgIC5wb21vZG9ybyB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgbWFyZ2luOiAxZW0gMCAwIDA7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLWJ1dHRvbiB7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBwYWRkaW5nOiAwLjI1ZW07XG4gICAgICAgIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDEpOyBcbiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgIH1cblxuICAgICAgLml0ZW0tY29udGFpbmVyOmhvdmVyOm5vdCguZGlzYWJsZWQpID4gLnRhc2stYnV0dG9uLFxuICAgICAgLnRhc2stYnV0dG9uOmZvY3VzIHtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgIH1cblxuICAgICAgLnRhc2stYnV0dG9uOmZvY3VzIHtcbiAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgfVxuXG4gICAgICAudGFzay1idXR0b246Zm9jdXMge1xuICAgICAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAycHQgIzkwZTBlZjtcbiAgICAgIH1cblxuICAgICAgLml0ZW0tY29udGFpbmVyLnNlbGVjdGVkID4gLnRhc2stYnV0dG9uOmZvY3VzIHtcbiAgICAgICAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMnB0ICMwMGI0ZDg7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLWJ1dHRvbjpob3ZlciB7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTsgXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpO1xuICAgICAgfVxuXG4gICAgICAuaXRlbS1jb250YWluZXIuc2VsZWN0ZWQgPiAudGFzay1idXR0b24sXG4gICAgICAuaXRlbS1jb250YWluZXIuc2VsZWN0ZWQgPiAudGFzay1idXR0b246aG92ZXIge1xuICAgICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjU0KTtcbiAgICAgIH1cblxuICAgICAgLnRhc2stYnV0dG9uOmRpc2FibGVkIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgIH1cblxuICAgICAgLnRhc2stYnV0dG9uLWljb24ge1xuICAgICAgICBmb250LXNpemU6IDEuMnJlbTtcbiAgICAgIH1cblxuICAgICAgI2RlbGV0ZS1idXR0b24ge1xuICAgICAgICB0b3A6IDUwJTtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC01MCUpO1xuICAgICAgfVxuICAgIGA7XG5cbiAgICB0aGlzLm1hdGVyaWFsSWNvbkxpbmtFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnbGluaycsIHtcbiAgICAgIHJlbDogJ3N0eWxlc2hlZXQnLFxuICAgICAgaHJlZjogJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vaWNvbj9mYW1pbHk9TWF0ZXJpYWwrSWNvbnMnLFxuICAgIH0pO1xuXG4gICAgdGhpcy5pdGVtQ29udGFpbmVyRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2l0ZW0tY29udGFpbmVyJyxcbiAgICB9KTtcbiAgICB0aGlzLnRleHRDb250YWluZXJFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1xuICAgICAgY2xhc3NOYW1lOiAndGV4dC1jb250YWluZXInLFxuICAgICAgb25tb3VzZW91dDogKGUpID0+IHtcbiAgICAgICAgZS50YXJnZXQuYmx1cigpO1xuICAgICAgfSxcbiAgICAgIG9ubW91c2Vkb3duOiAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIHRoaXMubmFtZUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdwJywge1xuICAgICAgY2xhc3NOYW1lOiAnbmFtZScsXG4gICAgfSk7XG4gICAgdGhpcy5wb21vZG9yb0NvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICBjbGFzc05hbWU6ICdwb21vZG9yby1jb250YWluZXInLFxuICAgIH0pO1xuICAgIHRoaXMucG9tb2Rvcm9MYWJlbCA9IGNyZWF0ZUVsZW1lbnQoJ2xhYmVsJywge1xuICAgICAgY2xhc3NOYW1lOiAncG9tb2Rvcm8tbGFiZWwnLFxuICAgICAgZm9yOiAncG9tb2Rvcm8nLFxuICAgICAgaW5uZXJUZXh0OiAnUG9tb2Rvcm9zJyxcbiAgICB9KTtcbiAgICB0aGlzLnBvbW9kb3JvRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ3AnLCB7XG4gICAgICBjbGFzc05hbWU6ICdwb21vZG9ybycsXG4gICAgICBpZDogJ3BvbW9kb3JvJyxcbiAgICB9KTtcblxuICAgIHRoaXMuZGVsZXRlVGFza0J1dHRvbiA9IGNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Rhc2stYnV0dG9uJyxcbiAgICAgIGlkOiAnZGVsZXRlLWJ1dHRvbicsXG4gICAgICBvbm1vdXNlb3V0OiAoZSkgPT4ge1xuICAgICAgICBlLnRhcmdldC5ibHVyKCk7XG4gICAgICB9LFxuICAgICAgb25tb3VzZWRvd246IChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgdGhpcy5kZWxldGVUYXNrSWNvbiA9IGNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICBjbGFzc05hbWU6ICdtYXRlcmlhbC1pY29ucyB0YXNrLWJ1dHRvbi1pY29uJyxcbiAgICAgIGlubmVyVGV4dDogJ2RlbGV0ZScsXG4gICAgfSk7XG5cbiAgICB0aGlzLnNoYWRvdy5hcHBlbmQoXG4gICAgICB0aGlzLm1hdGVyaWFsSWNvbkxpbmtFbGVtZW50LFxuICAgICAgdGhpcy5zdHlsZUVsZW1lbnQsXG4gICAgICB0aGlzLml0ZW1Db250YWluZXJFbGVtZW50LFxuICAgICk7XG4gICAgdGhpcy5pdGVtQ29udGFpbmVyRWxlbWVudC5hcHBlbmQoXG4gICAgICB0aGlzLnRleHRDb250YWluZXJFbGVtZW50LFxuICAgICAgdGhpcy5kZWxldGVUYXNrQnV0dG9uLFxuICAgICk7XG4gICAgdGhpcy5kZWxldGVUYXNrQnV0dG9uLmFwcGVuZENoaWxkKHRoaXMuZGVsZXRlVGFza0ljb24pO1xuICAgIHRoaXMudGV4dENvbnRhaW5lckVsZW1lbnQuYXBwZW5kKHRoaXMubmFtZUVsZW1lbnQsIHRoaXMucG9tb2Rvcm9Db250YWluZXIpO1xuICAgIHRoaXMucG9tb2Rvcm9Db250YWluZXIuYXBwZW5kKHRoaXMucG9tb2Rvcm9MYWJlbCwgdGhpcy5wb21vZG9yb0VsZW1lbnQpO1xuICB9XG5cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgIHRoaXMubmFtZUVsZW1lbnQuaW5uZXJUZXh0ID0gbmV3VmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndXNlZC1wb21vZG9yb3MnOlxuICAgICAgICB0aGlzLnVzZWRQb21vZG9yb3MgPSBuZXdWYWx1ZTtcbiAgICAgICAgdGhpcy5wb21vZG9yb0VsZW1lbnQuaW5uZXJUZXh0ID0gYCR7dGhpcy51c2VkUG9tb2Rvcm9zfS8ke3RoaXMuZXN0aW1hdGVkUG9tb2Rvcm9zfWA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZXN0aW1hdGVkLXBvbW9kb3Jvcyc6XG4gICAgICAgIHRoaXMuZXN0aW1hdGVkUG9tb2Rvcm9zID0gbmV3VmFsdWU7XG4gICAgICAgIHRoaXMucG9tb2Rvcm9FbGVtZW50LmlubmVyVGV4dCA9IGAke3RoaXMudXNlZFBvbW9kb3Jvc30vJHt0aGlzLmVzdGltYXRlZFBvbW9kb3Jvc31gO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdGVkJzpcbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSAndHJ1ZScpIHtcbiAgICAgICAgICB0aGlzLml0ZW1Db250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pdGVtQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY29tcGxldGVkJzpcbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSAndHJ1ZScpIHtcbiAgICAgICAgICB0aGlzLml0ZW1Db250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NvbXBsZXRlZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaXRlbUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnY29tcGxldGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3Rhc2staXRlbScsIFRhc2tJdGVtKTtcbmV4cG9ydCBkZWZhdWx0IFRhc2tJdGVtO1xuIiwiLyoqXG4gKiBAZmlsZSB0YXNrLWxpc3Qgd2ViIGNvbXBvbmVudFxuICovXG5cbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbi8qKlxuICogQ3VzdG9tIHdlYiBjb21wb25lbnQgcmVwcmVzZW50aW5nIGEgdGFzayBsaXN0LlxuICogQGV4dGVuZHMgSFRNTEVsZW1lbnRcbiAqL1xuY2xhc3MgVGFza0xpc3QgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgIHRoaXMuc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICB0aGlzLnN0eWxlRWxlbWVudC5pbm5lclRleHQgPSBgXG4gICAgICAuY29udGFpbmVyIHtcbiAgICAgICAgcGFkZGluZzogMWVtO1xuICAgICAgICBmb250OiBub3JtYWwgMXJlbSAnU291cmNlIFNhbnMgUHJvJywgc2Fucy1zZXJpZjtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiAjMDBiNGQ4O1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLWl0ZW0tY29udGFpbmVyIHtcbiAgICAgICAgZmxleDogMTtcbiAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICB9XG5cbiAgICAgIC50aXRsZSB7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICB9XG4gICAgYDtcblxuICAgIHRoaXMuY29udGFpbmVyRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2NvbnRhaW5lcicsXG4gICAgfSk7XG5cbiAgICB0aGlzLnRpdGxlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2gxJywge1xuICAgICAgY2xhc3NOYW1lOiAndGl0bGUnLFxuICAgICAgaW5uZXJUZXh0OiAnVGFzayBMaXN0JyxcbiAgICB9KTtcblxuICAgIHRoaXMudGFza0l0ZW1MaXN0Q29udGFpbmVyRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Rhc2staXRlbS1jb250YWluZXInLFxuICAgIH0pO1xuXG4gICAgdGhpcy50YXNrSXRlbUZvcm1FbGVtZW50ID0gY3JlYXRlRWxlbWVudCgndGFzay1pdGVtLWZvcm0nLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXNrLWl0ZW0tZm9ybScsXG4gICAgfSk7XG5cbiAgICB0aGlzLnNoYWRvdy5hcHBlbmQodGhpcy5zdHlsZUVsZW1lbnQsIHRoaXMuY29udGFpbmVyRWxlbWVudCk7XG4gICAgdGhpcy5jb250YWluZXJFbGVtZW50LmFwcGVuZChcbiAgICAgIHRoaXMudGl0bGVFbGVtZW50LFxuICAgICAgdGhpcy50YXNrSXRlbUxpc3RDb250YWluZXJFbGVtZW50LFxuICAgICAgdGhpcy50YXNrSXRlbUZvcm1FbGVtZW50LFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFza0xpc3Q7XG4iLCIvKipcbiAqIEBmaWxlIHRhc2staXRlbS1mb3JtIHdlYiBjb21wb25lbnRcbiAqL1xuXG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG4vKipcbiAqIEN1c3RvbSB3ZWIgY29tcG9uZW50IHJlcHJlc2VudGluZyBhIHRhc2sgaXRlbSBmb3JtLlxuICogQGV4dGVuZHMgSFRNTEVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBuYW1lIC0gbmFtZSBvZiB0YXNrXG4gKiBAcGFyYW0ge251bWJlcn0gZXN0aW1hdGVkLXBvbW9kb3JvcyAtIGVzdGltYXRlZCBudW1iZXIgb2YgcG9tb2Rvcm9zIG5lZWRlZFxuICovXG5jbGFzcyBUYXNrSXRlbUZvcm0gZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuXG4gICAgdGhpcy5zdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHRoaXMuc3R5bGVFbGVtZW50LmlubmVyVGV4dCA9IGBcbiAgICAgIC50YXNrLWZvcm0ge1xuICAgICAgICBtYXJnaW46IDFlbTtcbiAgICAgICAgcGFkZGluZzogMWVtIDtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIH1cblxuICAgICAgLmZpZWxkLWlucHV0LWNvbnRhaW5lciB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDFlbTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgfVxuXG4gICAgICAubmFtZS1pbnB1dC1jb250YWluZXIge1xuICAgICAgICBmbGV4OiA0O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB9XG5cbiAgICAgIC5wb21vZG9yby1pbnB1dC1jb250YWluZXIge1xuICAgICAgICBmbGV4OiAxO1xuICAgICAgICBtaW4td2lkdGg6IDk1cHg7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIH1cblxuICAgICAgLnRhc2staW5wdXQtbGFiZWwge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHotaW5kZXg6IDI7XG4gICAgICAgIGZvbnQ6IDAuOHJlbSAnU291cmNlIFNhbnMgUHJvJywgc2Fucy1zZXJpZjtcbiAgICAgICAgY29sb3I6ICM3Nzc7XG4gICAgICB9XG5cbiAgICAgICNuYW1lLWlucHV0LWxhYmVsIHtcbiAgICAgICAgdG9wOiAwLjJlbTtcbiAgICAgICAgbGVmdDogMC43NWVtO1xuICAgICAgfVxuXG4gICAgICAjcG9tb2Rvcm8taW5wdXQtbGFiZWwge1xuICAgICAgICB0b3A6IDAuMmVtO1xuICAgICAgICBsZWZ0OiAwLjc1ZW07XG4gICAgICB9XG5cbiAgICAgIC50YXNrLWlucHV0W3R5cGU9J3RleHQnXSxcbiAgICAgIC50YXNrLWlucHV0W3R5cGU9J251bWJlciddIHtcbiAgICAgICAgcGFkZGluZzogMS41ZW0gMC43NWVtIDAuNzVlbSAwLjc1ZW07XG4gICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgZm9udDogMXJlbSAnU291cmNlIFNhbnMgUHJvJywgc2Fucy1zZXJpZjtcbiAgICAgICAgY29sb3I6ICM0NDQ7XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgfVxuXG4gICAgICAudGFzay1pbnB1dDpmb2N1cyB7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDJwdCAjOTBlMGVmO1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICB6LWluZGV4OiAxO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB9XG5cbiAgICAgICNuYW1lLWlucHV0IHtcbiAgICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogNXB4O1xuICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA1cHg7XG4gICAgICB9XG5cbiAgICAgICNwb21vZG9yby1pbnB1dCB7XG4gICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA1cHg7XG4gICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA1cHg7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLWlucHV0W3R5cGU9J3RleHQnXTo6cGxhY2Vob2xkZXIsXG4gICAgICAudGFzay1pbnB1dFt0eXBlPSdudW1iZXInXTo6cGxhY2Vob2xkZXIge1xuICAgICAgICBjb2xvcjogI2M4YzhjODtcbiAgICAgIH1cblxuICAgICAgI3N1Ym1pdC1pbnB1dCB7XG4gICAgICAgIHdpZHRoOiA1MCU7XG4gICAgICAgIG1hcmdpbjogYXV0bztcbiAgICAgICAgYmFja2dyb3VuZDogcmdiKDc3LCAyMDcsIDIzMyk7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgIHBhZGRpbmc6IDAuNWVtO1xuICAgICAgICBmb250OiAxLjJyZW0gJ1NvdXJjZSBTYW5zIFBybycsIHNhbnMtc2VyaWY7XG4gICAgICB9XG5cbiAgICAgICNzdWJtaXQtaW5wdXQ6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiByZ2IoMTEyLCAyMTYsIDIzNyk7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIH1cbiAgICBgO1xuXG4gICAgdGhpcy5jb250YWluZXJFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZm9ybScsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Rhc2stZm9ybScsXG4gICAgfSk7XG5cbiAgICB0aGlzLmZpZWxkSW5wdXRDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICdmaWVsZC1pbnB1dC1jb250YWluZXInLFxuICAgIH0pO1xuXG4gICAgdGhpcy5uYW1lSW5wdXRDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICduYW1lLWlucHV0LWNvbnRhaW5lcicsXG4gICAgfSk7XG5cbiAgICB0aGlzLm5hbWVJbnB1dExhYmVsID0gY3JlYXRlRWxlbWVudCgnbGFiZWwnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXNrLWlucHV0LWxhYmVsJyxcbiAgICAgIGlkOiAnbmFtZS1pbnB1dC1sYWJlbCcsXG4gICAgICBmb3I6ICduYW1lLWlucHV0JyxcbiAgICAgIGlubmVyVGV4dDogJ05hbWUnLFxuICAgIH0pO1xuXG4gICAgdGhpcy5uYW1lSW5wdXRFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXNrLWlucHV0JyxcbiAgICAgIGlkOiAnbmFtZS1pbnB1dCcsXG4gICAgICB0eXBlOiAndGV4dCcsXG4gICAgICBuYW1lOiAnbmFtZScsXG4gICAgICBwbGFjZWhvbGRlcjogJ1Rhc2sgRGVzY3JpcHRpb24uLi4nLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgfSk7XG5cbiAgICB0aGlzLnBvbW9kb3JvSW5wdXRDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICdwb21vZG9yby1pbnB1dC1jb250YWluZXInLFxuICAgIH0pO1xuXG4gICAgdGhpcy5wb21vZG9yb0lucHV0TGFiZWwgPSBjcmVhdGVFbGVtZW50KCdsYWJlbCcsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Rhc2staW5wdXQtbGFiZWwnLFxuICAgICAgaWQ6ICdwb21vZG9yby1pbnB1dC1sYWJlbCcsXG4gICAgICBmb3I6ICdwb21vZG9yby1pbnB1dCcsXG4gICAgICBpbm5lclRleHQ6ICdFc3QgUG9tb2Rvcm9zJyxcbiAgICB9KTtcblxuICAgIHRoaXMucG9tb2Rvcm9JbnB1dEVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Rhc2staW5wdXQnLFxuICAgICAgaWQ6ICdwb21vZG9yby1pbnB1dCcsXG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIG5hbWU6ICdwb21vZG9ybycsXG4gICAgICBwbGFjZWhvbGRlcjogJyMnLFxuICAgICAgbWluOiAnMScsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9KTtcblxuICAgIHRoaXMuc3VibWl0SW5wdXRFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXNrLWlucHV0JyxcbiAgICAgIGlkOiAnc3VibWl0LWlucHV0JyxcbiAgICAgIHR5cGU6ICdzdWJtaXQnLFxuICAgICAgdmFsdWU6ICdBREQnLFxuICAgIH0pO1xuXG4gICAgdGhpcy5zaGFkb3cuYXBwZW5kKHRoaXMuc3R5bGVFbGVtZW50LCB0aGlzLmNvbnRhaW5lckVsZW1lbnQpO1xuICAgIHRoaXMuY29udGFpbmVyRWxlbWVudC5hcHBlbmQoXG4gICAgICB0aGlzLmZpZWxkSW5wdXRDb250YWluZXIsXG4gICAgICB0aGlzLnN1Ym1pdElucHV0RWxlbWVudCxcbiAgICApO1xuICAgIHRoaXMuZmllbGRJbnB1dENvbnRhaW5lci5hcHBlbmQoXG4gICAgICB0aGlzLm5hbWVJbnB1dENvbnRhaW5lcixcbiAgICAgIHRoaXMucG9tb2Rvcm9JbnB1dENvbnRhaW5lcixcbiAgICApO1xuICAgIHRoaXMubmFtZUlucHV0Q29udGFpbmVyLmFwcGVuZCh0aGlzLm5hbWVJbnB1dExhYmVsLCB0aGlzLm5hbWVJbnB1dEVsZW1lbnQpO1xuICAgIHRoaXMucG9tb2Rvcm9JbnB1dENvbnRhaW5lci5hcHBlbmQoXG4gICAgICB0aGlzLnBvbW9kb3JvSW5wdXRMYWJlbCxcbiAgICAgIHRoaXMucG9tb2Rvcm9JbnB1dEVsZW1lbnQsXG4gICAgKTtcbiAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3Rhc2staXRlbS1mb3JtJywgVGFza0l0ZW1Gb3JtKTtcbmV4cG9ydCBkZWZhdWx0IFRhc2tJdGVtRm9ybTtcbiIsIi8qKlxuICogQGZpbGUgcHJvZ3Jlc3MtcmluZyB3ZWIgY29tcG9uZW50XG4gKi9cblxuaW1wb3J0IHtcbiAgY2hlY2tJZlRpbWVWYWxpZCxcbiAgY3JlYXRlRWxlbWVudCxcbiAgZ2V0TWludXRlc0FuZFNlY29uZHMsXG59IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcblxuLyoqXG4gKiBDdXN0b20gd2ViIGNvbXBvbmVudCByZXByZXNlbnRpbmcgYSB0aW1lclxuICogQGV4dGVuZHMgSFRNTEVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIC0gY3VycmVudCByZW1haW5pbmcgdGltZSAoaW4gc2Vjb25kcylcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgLSByYWRpdXMgb2YgY29udGFpbmVyIChwcm9ncmVzcyByaW5nKVxuICovXG5jbGFzcyBUaW1lciBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIFsndGltZScsICdjb250YWluZXItcmFkaXVzJ107XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fdGltZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCd0aW1lJyk7XG4gICAgdGhpcy5fY29udGFpbmVyUmFkaXVzID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2NvbnRhaW5lci1yYWRpdXMnKTtcblxuICAgIHRoaXMuc3R5bGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnc3R5bGUnLCB7XG4gICAgICBpbm5lclRleHQ6IGBcbiAgICAgICAgLmNvbnRhaW5lciB7XG4gICAgICAgICAgZm9udDogaW5pdGlhbCAnRHVydS1TYW5zJywgc2Fucy1zZXJpZjtcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgfVxuICAgICAgYCxcbiAgICB9KTtcblxuICAgIHRoaXMuc2hhZG93ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgdGhpcy50aW1lckNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2NvbnRhaW5lcicsXG4gICAgfSk7XG5cbiAgICB0aGlzLnNoYWRvdy5hcHBlbmQodGhpcy5zdHlsZUVsZW1lbnQsIHRoaXMudGltZXJDb250YWluZXIpO1xuICB9XG5cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgIGNvbnN0IG5ld1ZhbCA9IHBhcnNlSW50KG5ld1ZhbHVlLCAxMCk7XG4gICAgaWYgKE51bWJlci5pc05hTihuZXdWYWwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgY2FzZSAndGltZSc6IHtcbiAgICAgICAgY29uc3QgaXNUaW1lVmFsaWQgPSBjaGVja0lmVGltZVZhbGlkKG5ld1ZhbHVlKTtcbiAgICAgICAgaWYgKGlzVGltZVZhbGlkKSB7XG4gICAgICAgICAgdGhpcy5fdGltZSA9IG5ld1ZhbDtcbiAgICAgICAgICB0aGlzLnRpbWVyQ29udGFpbmVyLmlubmVyVGV4dCA9IGdldE1pbnV0ZXNBbmRTZWNvbmRzKHRoaXMuX3RpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnY29udGFpbmVyLXJhZGl1cyc6IHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyUmFkaXVzID0gbmV3VmFsO1xuICAgICAgICAvLyBzY2FsZSBmb250IHJlbGF0aXZlIHRvIHByb2dyZXNzIHJpbmcgcmFkaXVzXG4gICAgICAgIHRoaXMuc3R5bGVFbGVtZW50LmlubmVyVGV4dCA9IGBcbiAgICAgICAgICAgIC5jb250YWluZXIge1xuICAgICAgICAgICAgICBmb250OiAke3RoaXMuX2NvbnRhaW5lclJhZGl1cyAvIDMwfWVtICdEdXJ1LVNhbnMnLCBzYW5zLXNlcmlmOyBcbiAgICAgICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgYDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxuXG4gIGdldCB0aW1lKCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lO1xuICB9XG5cbiAgc2V0IHRpbWUodGltZSkge1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCd0aW1lJywgdGhpcy5fdGltZSk7XG4gIH1cblxuICBnZXQgY29udGFpbmVyUmFkaXVzKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250YWluZXJSYWRpdXM7XG4gIH1cblxuICBzZXQgY29udGFpbmVyUmFkaXVzKHJhZGl1cykge1xuICAgIHRoaXMuX2NvbnRhaW5lclJhZGl1cyA9IHJhZGl1cztcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnY29udGFpbmVyLXJhZGl1cycsIHRoaXMuX2NvbnRhaW5lclJhZGl1cyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGltZXI7XG4iLCIvKipcbiAqIEBmaWxlIHByb2dyZXNzLXJpbmcgd2ViIGNvbXBvbmVudFxuICovXG5cbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIHZhbGlkYXRlTnVtYmVyIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG4vKipcbiAqIEN1c3RvbSB3ZWIgY29tcG9uZW50IHJlcHJlc2VudGluZyBhIHByb2dyZXNzIHJpbmcuXG4gKiBAZXh0ZW5kcyBIVE1MRWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IHN0cm9rZSAtIHdpZHRoIG9mIGNpcmNsZSBzdHJva2VcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgLSByYWRpdXMgb2YgY2lyY2xlXG4gKiBAcGFyYW0ge251bWJlcn0gcHJvZ3Jlc3MgLSBwcm9ncmVzcyBvZiByaW5nXG4gKi9cbmNsYXNzIFByb2dyZXNzUmluZyBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIFsncmFkaXVzJywgJ3N0cm9rZScsICdwcm9ncmVzcyddO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMucm9vdCA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgIHRoaXMuc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblxuICAgIGNvbnN0IHN2Z05hbWVzcGFjZSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG4gICAgdGhpcy5zdmdFbGVtZW50ID0gY3JlYXRlRWxlbWVudChcbiAgICAgICdzdmcnLFxuICAgICAgeyBjbGFzczogJ3N2ZycgfSxcbiAgICAgIHsgbmFtZXNwYWNlOiBzdmdOYW1lc3BhY2UgfSxcbiAgICApO1xuXG4gICAgdGhpcy5jaXJjbGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudChcbiAgICAgICdjaXJjbGUnLFxuICAgICAgeyBjbGFzczogJ2NpcmNsZScgfSxcbiAgICAgIHsgbmFtZXNwYWNlOiBzdmdOYW1lc3BhY2UgfSxcbiAgICApO1xuICAgIHRoaXMuYmFzZUNpcmNsZUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KFxuICAgICAgJ2NpcmNsZScsXG4gICAgICB7IGNsYXNzOiAnYmFzZS1jaXJjbGUnIH0sXG4gICAgICB7IG5hbWVzcGFjZTogc3ZnTmFtZXNwYWNlIH0sXG4gICAgKTtcblxuICAgIHRoaXMuZm9yZWlnbk9iamVjdEVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KFxuICAgICAgJ2ZvcmVpZ25PYmplY3QnLFxuICAgICAgeyBjbGFzczogJ2ZvcmVpZ24tb2JqZWN0JyB9LFxuICAgICAgeyBuYW1lc3BhY2U6IHN2Z05hbWVzcGFjZSB9LFxuICAgICk7XG4gICAgdGhpcy5mb3JlaWduT2JqZWN0Q29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3M6ICdmb3JlaWduLW9iamVjdC1jb250YWluZXInLFxuICAgIH0pO1xuICAgIHRoaXMudGltZXJDb21wb25lbnQgPSBjcmVhdGVFbGVtZW50KCd0aW1lci1jb21wb25lbnQnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0aW1lcicsXG4gICAgICB0aW1lOiAwLFxuICAgIH0pO1xuICAgIHRoaXMuY2lyY2xlQ29tcG9uZW50ID0gY3JlYXRlRWxlbWVudCgncG9tb2Rvcm8tY2lyY2xlcycsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2NpcmNsZXMnLFxuICAgICAgY2lyY2xlQ291bnQ6IDAsXG4gICAgfSk7XG5cbiAgICB0aGlzLnJvb3QuYXBwZW5kKHRoaXMuc3R5bGVFbGVtZW50LCB0aGlzLnN2Z0VsZW1lbnQpO1xuICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmQoXG4gICAgICB0aGlzLmJhc2VDaXJjbGVFbGVtZW50LFxuICAgICAgdGhpcy5jaXJjbGVFbGVtZW50LFxuICAgICAgdGhpcy5mb3JlaWduT2JqZWN0RWxlbWVudCxcbiAgICApO1xuICAgIHRoaXMuZm9yZWlnbk9iamVjdEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5mb3JlaWduT2JqZWN0Q29udGFpbmVyKTtcbiAgICB0aGlzLmZvcmVpZ25PYmplY3RDb250YWluZXIuYXBwZW5kKFxuICAgICAgdGhpcy50aW1lckNvbXBvbmVudCxcbiAgICAgIHRoaXMuY2lyY2xlQ29tcG9uZW50LFxuICAgICk7XG5cbiAgICB0aGlzLl9yYWRpdXMgPSAwO1xuICAgIHRoaXMuX3N0cm9rZSA9IDA7XG4gICAgdGhpcy5fcHJvZ3Jlc3MgPSAwO1xuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KHRoaXMuX3JhZGl1cywgdGhpcy5fc3Ryb2tlLCB0aGlzLl9wcm9ncmVzcyk7XG4gIH1cblxuICAvKiogVXBkYXRlcyBjb21wb25lbnQgdmlldyAqL1xuICB1cGRhdGVDb21wb25lbnQocmFkaXVzLCBzdHJva2UsIHByb2dyZXNzKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZFJhZGl1cyA9IHJhZGl1cyAtIHN0cm9rZSAqIDI7XG4gICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IG5vcm1hbGl6ZWRSYWRpdXMgKiAyICogTWF0aC5QSTtcblxuICAgIHRoaXMuc3R5bGVFbGVtZW50LmlubmVyVGV4dCA9IGBcbiAgICAgIC5zdmcge1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICB3aWR0aDogJHsyICogcmFkaXVzfXB4O1xuICAgICAgICBoZWlnaHQ6ICR7MiAqIHJhZGl1c31weDtcbiAgICAgIH1cblxuICAgICAgLmJhc2UtY2lyY2xlIHtcbiAgICAgICAgc3Ryb2tlOiAjZmZmO1xuICAgICAgICBzdHJva2UtZGFzaGFycmF5OiAke2NpcmN1bWZlcmVuY2V9ICR7Y2lyY3VtZmVyZW5jZX07XG4gICAgICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwO1xuICAgICAgICBzdHJva2Utd2lkdGg6ICR7c3Ryb2tlfTtcbiAgICAgICAgZmlsbDogIzQ4Y2FlNDtcbiAgICAgIH1cblxuICAgICAgLmNpcmNsZSB7XG4gICAgICAgIHN0cm9rZTogIzAwOTViMztcbiAgICAgICAgc3Ryb2tlLWRhc2hhcnJheTogJHtjaXJjdW1mZXJlbmNlfSAke2NpcmN1bWZlcmVuY2V9O1xuICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogJHsoMSAtIHByb2dyZXNzIC8gMTAwKSAqIGNpcmN1bWZlcmVuY2V9O1xuICAgICAgICBzdHJva2Utd2lkdGg6ICR7c3Ryb2tlICsgMn07XG4gICAgICAgIGZpbGw6IHRyYW5zcGFyZW50O1xuXG4gICAgICAgIHRyYW5zaXRpb246IHN0cm9rZS1kYXNob2Zmc2V0IDAuNXM7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC05MGRlZyk7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDUwJSA1MCU7XG4gICAgICB9XG5cbiAgICAgIC5mb3JlaWduLW9iamVjdCB7XG4gICAgICB9XG5cbiAgICAgIC5mb3JlaWduLW9iamVjdC1jb250YWluZXIge1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgfVxuICAgIGA7XG5cbiAgICB0aGlzLmZvcmVpZ25PYmplY3RFbGVtZW50LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAyICogcmFkaXVzKTtcbiAgICB0aGlzLmZvcmVpZ25PYmplY3RFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgMiAqIHJhZGl1cyk7XG4gICAgdGhpcy5jaXJjbGVFbGVtZW50LnNldEF0dHJpYnV0ZSgncicsIG5vcm1hbGl6ZWRSYWRpdXMpO1xuICAgIHRoaXMuY2lyY2xlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2N4JywgcmFkaXVzKTtcbiAgICB0aGlzLmNpcmNsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdjeScsIHJhZGl1cyk7XG5cbiAgICB0aGlzLmJhc2VDaXJjbGVFbGVtZW50LnNldEF0dHJpYnV0ZSgncicsIG5vcm1hbGl6ZWRSYWRpdXMpO1xuICAgIHRoaXMuYmFzZUNpcmNsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdjeCcsIHJhZGl1cyk7XG4gICAgdGhpcy5iYXNlQ2lyY2xlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2N5JywgcmFkaXVzKTtcblxuICAgIHRoaXMudGltZXJDb21wb25lbnQuY29udGFpbmVyUmFkaXVzID0gcmFkaXVzO1xuICB9XG5cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgIGNvbnN0IG5ld1ZhbHVlTnVtYmVyID0gdmFsaWRhdGVOdW1iZXIobmV3VmFsdWUpO1xuXG4gICAgLy8gY2hlY2sgaWYgYXR0cmlidXRlIHZhbHVlIGlzIG51bWJlclxuICAgIGlmIChuZXdWYWx1ZU51bWJlciA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHZhbGlkYXRlIGF0dHJpYnV0ZSByYW5nZXNcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgJ3JhZGl1cyc6XG4gICAgICAgIGlmIChuZXdWYWx1ZU51bWJlciA8IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzdHJva2UnOlxuICAgICAgICBpZiAobmV3VmFsdWVOdW1iZXIgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncHJvZ3Jlc3MnOlxuICAgICAgICBpZiAobmFtZSA9PT0gJ3Byb2dyZXNzJykge1xuICAgICAgICAgIGlmIChuZXdWYWx1ZU51bWJlciA8IDAgfHwgbmV3VmFsdWVOdW1iZXIgPiAxMDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpc1tgXyR7bmFtZX1gXSA9IG5ld1ZhbHVlTnVtYmVyO1xuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KHRoaXMuX3JhZGl1cywgdGhpcy5fc3Ryb2tlLCB0aGlzLl9wcm9ncmVzcyk7XG4gIH1cblxuICBnZXQgcmFkaXVzKCkge1xuICAgIHJldHVybiB0aGlzLl9yYWRpdXM7XG4gIH1cblxuICBzZXQgcmFkaXVzKHZhbCkge1xuICAgIGNvbnN0IG51bSA9IHZhbGlkYXRlTnVtYmVyKHZhbCk7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3JhZGl1cycsIG51bSk7XG4gIH1cblxuICBnZXQgc3Ryb2tlKCkge1xuICAgIHJldHVybiB0aGlzLl9zdHJva2U7XG4gIH1cblxuICBzZXQgc3Ryb2tlKHZhbCkge1xuICAgIGNvbnN0IG51bSA9IHZhbGlkYXRlTnVtYmVyKHZhbCk7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIG51bSk7XG4gIH1cblxuICBnZXQgcHJvZ3Jlc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb2dyZXNzO1xuICB9XG5cbiAgc2V0IHByb2dyZXNzKHZhbCkge1xuICAgIGNvbnN0IG51bSA9IHZhbGlkYXRlTnVtYmVyKHZhbCk7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3Byb2dyZXNzJywgbnVtKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzc1Jpbmc7XG4iLCIvKipcbiAqIEBmaWxlIHBvbW9kb3JvLWNpcmNsZXMgd2ViIGNvbXBvbmVudFxuICovXG5cbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbi8qKlxuICogQ3VzdG9tIHdlYiBjb21wb25lbnQgcmVwcmVzZW50aW5nIHBvbW9kb3JvIGNpcmNsZXMuXG4gKiBAZXh0ZW5kcyBIVE1MRWxlbWVudFxuICovXG5jbGFzcyBQb21vZG9yb0NpcmNsZXMgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiBbJ2NpcmNsZUNvdW50J107XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fY2lyY2xlQ291bnQgPSB0aGlzLmdldEF0dHJpYnV0ZSgnY2lyY2xlQ291bnQnKTtcblxuICAgIHRoaXMuc3R5bGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnc3R5bGUnLCB7XG4gICAgICBpbm5lclRleHQ6IGBcbiAgICAgIC5jaXJjbGUtY29udGFpbmVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLmNpcmNsZSB7XG4gICAgICAgIGhlaWdodDogMTVweDtcbiAgICAgICAgd2lkdGg6IDE1cHg7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgIG1hcmdpbjogMTVweCA3cHggMHB4O1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICB9XG5cbiAgICAgIC5jaXJjbGUuYWN0aXZlIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICAgIH1cbiAgICAgIGAsXG4gICAgfSk7XG5cbiAgICB0aGlzLnNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgIC8vIGFkZCBodG1sIGVsZW1lbnRzIGFuZCBzdHlsaW5nXG4gICAgdGhpcy5jb3VudGVyQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnY2lybGNlLWNvbnRhaW5lcicsXG4gICAgfSk7XG4gICAgdGhpcy5jaXJjbGUxID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnY2lyY2xlJyxcbiAgICB9KTtcbiAgICB0aGlzLmNpcmNsZTIgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICdjaXJjbGUnLFxuICAgIH0pO1xuICAgIHRoaXMuY2lyY2xlMyA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2NpcmNsZScsXG4gICAgfSk7XG4gICAgdGhpcy5jaXJjbGU0ID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnY2lyY2xlJyxcbiAgICB9KTtcblxuICAgIHRoaXMuY291bnRlckNvbnRhaW5lci5hcHBlbmQoXG4gICAgICB0aGlzLmNpcmNsZTEsXG4gICAgICB0aGlzLmNpcmNsZTIsXG4gICAgICB0aGlzLmNpcmNsZTMsXG4gICAgICB0aGlzLmNpcmNsZTQsXG4gICAgKTtcbiAgICB0aGlzLnNoYWRvdy5hcHBlbmQodGhpcy5zdHlsZUVsZW1lbnQsIHRoaXMuY291bnRlckNvbnRhaW5lcik7XG4gIH1cblxuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgY29uc3QgbmV3VmFsdWVOdW1iZXIgPSBOdW1iZXIobmV3VmFsdWUpO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IG5ld1ZhbHVlTnVtYmVyOyBpKyspIHtcbiAgICAgIGlmIChpIDw9IG5ld1ZhbHVlTnVtYmVyKSB7XG4gICAgICAgIHRoaXNbYGNpcmNsZSR7aX1gXS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXNbYGNpcmNsZSR7aX1gXS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBUT0RPOiBnZXR0ZXIvc2V0dGVyIGZvciBjaXJjbGUgY291bnRcbiAgZ2V0IGNpcmNsZUNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLl9jaXJjbGVDb3VudDtcbiAgfVxuXG4gIHNldCBjaXJjbGVDb3VudChjaXJjbGVDb3VudCkge1xuICAgIGlmIChjaXJjbGVDb3VudCA+PSAwICYmIGNpcmNsZUNvdW50IDw9IDQpIHtcbiAgICAgIHRoaXMuX2NpcmNsZUNvdW50ID0gY2lyY2xlQ291bnQ7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnY2lyY2xlQ291bnQnLCB0aGlzLl9jaXJjbGVDb3VudCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvbW9kb3JvQ2lyY2xlcztcbiIsIi8qKlxuICogQGZpbGUgc2V0dGluZ3Mgd2ViIGNvbXBvbmVudFxuICovXG5cbmltcG9ydCB7XG4gIGNyZWF0ZUVsZW1lbnQsXG4gIGNoZWNrSWZTaG9ydElucHV0VmFsaWQsXG4gIGNoZWNrSWZMb25nSW5wdXRWYWxpZCxcbn0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG4vKipcbiAqIEN1c3RvbSB3ZWIgY29tcG9uZW50IHJlcHJlc2VudGluZyB0aGUgc2V0dGluZ3MgcG9wdXBcbiAqIEBleHRlbmRzIEhUTUxFbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gc2hvcnRCcmVha0xlbmd0aCAtIHNob3J0IGJyZWFrIHRpbWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb25nQnJlYWtMZW5ndGggLSBsb25nIGJyZWFrIHRpbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aW1lclNvdW5kIC0gcGF0aHdheSB0byBzb3VuZCBmaWxlXG4gKi9cbmNsYXNzIFNldHRpbmdzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gWydzaG9ydEJyZWFrTGVuZ3RoJywgJ2xvbmdCcmVha0xlbmd0aCcsICd0aW1lclNvdW5kJ107XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fc2hvcnRCcmVhayA9IHRoaXMuZ2V0QXR0cmlidXRlKCdzaG9ydEJyZWFrTGVuZ3RoJyk7XG4gICAgdGhpcy5fbG9uZ0JyZWFrID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2xvbmdCcmVha0xlbmd0aCcpO1xuICAgIHRoaXMuX3RpbWVyU291bmQgPSB0aGlzLmdldEF0dHJpYnV0ZSgndGltZXJTb3VuZCcpO1xuXG4gICAgdGhpcy5zdHlsZUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdzdHlsZScsIHtcbiAgICAgIGlubmVyVGV4dDogYFxuICAgICAgICAgIC5wb3B1cCB7XG4gICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgICAgICB0b3A6IDUwJTtcbiAgICAgICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpIHNjYWxlKDApO1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogMjAwbXMgZWFzZS1pbi1vdXQ7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgICAgICAgICAgei1pbmRleDogNTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICAgICAgd2lkdGg6IDcwMHB4O1xuICAgICAgICAgICAgbWF4LXdpZHRoOiA4MCU7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC5wb3B1cC5hY3RpdmUge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSkgc2NhbGUoMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC5zZXR0aW5ncy10aXRsZSB7XG4gICAgICAgICAgICBmb250OiAycmVtICdTb3VyY2UgU2FucyBQcm8nLCBzYW5zLXNlcmlmO1xuICAgICAgICAgICAgY29sb3I6ICM3Nzc7XG4gICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMC4xZW07XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC5zZXR0aW5ncy1ociB7XG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAwO1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMS41ZW07XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC5jb250ZW50IHtcbiAgICAgICAgICAgIGZvbnQ6IDEuMXJlbSAnRHVydSBTYW5zJywgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC5jb250ZW50IC5mb3JtLWlucHV0IGlucHV0IHtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIGZvbnQ6IDEuMXJlbSAnRHVydSBTYW5zJywgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwLjVlbTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLmNvbnRlbnQgLmZvcm0taW5wdXQge1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMWVtO1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLmNvbnRlbnQgLmZvcm0taW5wdXQgLmJvdW5kcyB7XG4gICAgICAgICAgICBjb2xvcjogIzgwODA4MDtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxZW07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLmNvbnRlbnQgLmZvcm0taW5wdXQgbGFiZWwge1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDM1cHg7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDAuNWVtXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZWN0IHtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIGZvbnQ6IDAuODVyZW0gJ0R1cnUgU2FucycsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgcGFkZGluZzogNXB4O1xuICAgICAgICAgICAgd2lkdGg6IDIyNXB4O1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI0ZGRjtcbiAgICAgICAgICAgIGhlaWdodDogMzRweDtcbiAgICAgICAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgICAgICAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgICAgICAgIGFwcGVhcmFuY2U6IG5vbmU7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoYXNzZXRzL3NvdW5kLnBuZykgOTYlIC8gMTAlIG5vLXJlcGVhdCAjRUVFO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAuY29udGVudCBidXR0b24ge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg3MiwgMjAyLCAyMjgsIDEpO1xuICAgICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogLjI1cmVtO1xuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICAgICAgZm9udDogMS4xcmVtICdEdXJ1IFNhbnMnLCBzYW5zLXNlcmlmO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgbWFyZ2luOiAxLjVlbSBhdXRvIDAuNWVtIGF1dG87XG4gICAgICAgICAgICBwYWRkaW5nOiAwLjVlbTtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgd2lkdGg6IDc1JTtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuY29udGVudCBidXR0b246aG92ZXIge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg3MiwgMjAyLCAyMjgsIDAuOCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC5jb250ZW50IC5lcnJvciB7XG4gICAgICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogNTBweDtcbiAgICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgI292ZXJsYXkge1xuICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IDIwMG1zIGVhc2UtaW4tb3V0O1xuICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xuICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgICAgICB6LWluZGV4OiA0O1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAjb3ZlcmxheS5hY3RpdmUge1xuICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBhbGw7XG4gICAgICAgICAgfVxuICAgICAgICBgLFxuICAgIH0pO1xuXG4gICAgLy8gT3BlbmluZyBTaGFkb3cgRE9NXG4gICAgdGhpcy5zaGFkb3cgPSB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcblxuICAgIC8vIENyZWF0aW5nIGFsbCB0aGUgZWxlbWVudHNcbiAgICB0aGlzLnBvcHVwQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAncG9wdXAnLFxuICAgICAgaWQ6ICdwb3B1cCcsXG4gICAgfSk7XG4gICAgdGhpcy5jb250ZW50Q29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnY29udGVudCcsXG4gICAgfSk7XG4gICAgdGhpcy5wb3B1cFRpdGxlID0gY3JlYXRlRWxlbWVudCgnaDEnLCB7XG4gICAgICBjbGFzc05hbWU6ICdzZXR0aW5ncy10aXRsZScsXG4gICAgICBpbm5lclRleHQ6ICdTRVRUSU5HUycsXG4gICAgfSk7XG4gICAgdGhpcy5wb3B1cFRpdGxlTGluZSA9IGNyZWF0ZUVsZW1lbnQoJ2hyJywge1xuICAgICAgY2xhc3NOYW1lOiAnc2V0dGluZ3MtaHInLFxuICAgIH0pO1xuICAgIHRoaXMuaW5wdXRDb250YWluZXJTaG9ydCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2Zvcm0taW5wdXQnLFxuICAgIH0pO1xuICAgIHRoaXMuaW5wdXRMYWJlbFNob3J0ID0gY3JlYXRlRWxlbWVudCgnbGFiZWwnLCB7XG4gICAgICBpbm5lclRleHQ6ICdTaG9ydCBCcmVhazogJyxcbiAgICAgIGZvcjogJ3Nob3J0LW51bWJlcicsXG4gICAgfSk7XG4gICAgdGhpcy5pbnB1dEJveFNob3J0ID0gY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICBpZDogJ3Nob3J0LW51bWJlcicsXG4gICAgICBuYW1lOiAnc2hvcnQtbnVtYmVyJyxcbiAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgbWluOiAnMycsXG4gICAgICBtYXg6ICc1JyxcbiAgICAgIHZhbHVlOiB0aGlzLl9zaG9ydEJyZWFrLFxuICAgIH0pO1xuICAgIHRoaXMuaW5wdXRCb3VuZFNob3J0ID0gY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2JvdW5kcycsXG4gICAgICBpbm5lclRleHQ6ICczIC0gNSBtaW51dGVzJyxcbiAgICB9KTtcbiAgICB0aGlzLmlucHV0RXJyb3JTaG9ydCA9IGNyZWF0ZUVsZW1lbnQoJ3AnLCB7XG4gICAgICBjbGFzc05hbWU6ICdlcnJvcicsXG4gICAgICBpbm5lclRleHQ6ICdQbGVhc2UgZW50ZXIgdmFsaWQgZW50cnknLFxuICAgIH0pO1xuICAgIHRoaXMuaW5wdXRFcnJvclNob3J0LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICB0aGlzLmlucHV0Q29udGFpbmVyTG9uZyA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2Zvcm0taW5wdXQnLFxuICAgIH0pO1xuICAgIHRoaXMuaW5wdXRMYWJlbExvbmcgPSBjcmVhdGVFbGVtZW50KCdsYWJlbCcsIHtcbiAgICAgIGlubmVyVGV4dDogJ0xvbmcgQnJlYWs6ICcsXG4gICAgICBmb3I6ICdsb25nLW51bWJlcicsXG4gICAgfSk7XG4gICAgdGhpcy5pbnB1dEJveExvbmcgPSBjcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgIGlkOiAnbG9uZy1udW1iZXInLFxuICAgICAgbmFtZTogJ2xvbmctbnVtYmVyJyxcbiAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgbWluOiAnMTUnLFxuICAgICAgbWF4OiAnMzAnLFxuICAgICAgdmFsdWU6IHRoaXMuX2xvbmdCcmVhayxcbiAgICB9KTtcbiAgICB0aGlzLmlucHV0Qm91bmRMb25nID0gY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2JvdW5kcycsXG4gICAgICBpbm5lclRleHQ6ICcxNSAtIDMwIG1pbnV0ZXMnLFxuICAgIH0pO1xuICAgIHRoaXMuaW5wdXRFcnJvckxvbmcgPSBjcmVhdGVFbGVtZW50KCdwJywge1xuICAgICAgY2xhc3NOYW1lOiAnZXJyb3InLFxuICAgICAgaW5uZXJUZXh0OiAnUGxlYXNlIGVudGVyIHZhbGlkIGVudHJ5JyxcbiAgICB9KTtcbiAgICB0aGlzLmlucHV0RXJyb3JMb25nLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICB0aGlzLmlucHV0Q29udGFpbmVyU291bmQgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICdmb3JtLWlucHV0JyxcbiAgICB9KTtcbiAgICB0aGlzLmlucHV0TGFiZWxTb3VuZCA9IGNyZWF0ZUVsZW1lbnQoJ2xhYmVsJywge1xuICAgICAgZm9yOiAnc291bmQnLFxuICAgICAgaW5uZXJUZXh0OiAnU291bmQ6ICcsXG4gICAgfSk7XG4gICAgdGhpcy5pbnB1dEJveFNvdW5kID0gY3JlYXRlRWxlbWVudCgnc2VsZWN0Jywge1xuICAgICAgbmFtZTogJ3NvdW5kJyxcbiAgICAgIGlkOiAnc291bmQnLFxuICAgIH0pO1xuICAgIHRoaXMuc291bmRPcHRpb24xID0gY3JlYXRlRWxlbWVudCgnb3B0aW9uJywge1xuICAgICAgdmFsdWU6ICdhc3NldHMvY2FsbS1hbGFybS5tcDMnLFxuICAgICAgaW5uZXJUZXh0OiAnQ2FsbSBBbGFybScsXG4gICAgfSk7XG4gICAgdGhpcy5zb3VuZE9wdGlvbjIgPSBjcmVhdGVFbGVtZW50KCdvcHRpb24nLCB7XG4gICAgICB2YWx1ZTogJ2Fzc2V0cy9vcmlnaW5hbC1hbGFybS5tcDMnLFxuICAgICAgaW5uZXJUZXh0OiAnT3JnaW5hbCBBbGFybScsXG4gICAgfSk7XG4gICAgdGhpcy5zb3VuZE9wdGlvbjMgPSBjcmVhdGVFbGVtZW50KCdvcHRpb24nLCB7XG4gICAgICB2YWx1ZTogJ2Fzc2V0cy9rYW55ZS1zdG9wLm1wMycsXG4gICAgICBpbm5lclRleHQ6ICdLYW55ZSBUZWxsaW5nIFlvdSB0byBTdG9wJyxcbiAgICB9KTtcbiAgICB0aGlzLnNhdmVCdXR0b24gPSBjcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XG4gICAgICBpbm5lclRleHQ6ICdTQVZFJyxcbiAgICAgIGNsYXNzTmFtZTogJ3NhdmUtYnV0dG9uJyxcbiAgICB9KTtcbiAgICB0aGlzLm92ZXJsYXlFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGlkOiAnb3ZlcmxheScsXG4gICAgfSk7XG5cbiAgICB0aGlzLmlucHV0Q29udGFpbmVyU2hvcnQuYXBwZW5kKFxuICAgICAgdGhpcy5pbnB1dExhYmVsU2hvcnQsXG4gICAgICB0aGlzLmlucHV0Qm94U2hvcnQsXG4gICAgICB0aGlzLmlucHV0Qm91bmRTaG9ydCxcbiAgICAgIHRoaXMuaW5wdXRFcnJvclNob3J0LFxuICAgICk7XG5cbiAgICB0aGlzLmlucHV0Q29udGFpbmVyTG9uZy5hcHBlbmQoXG4gICAgICB0aGlzLmlucHV0TGFiZWxMb25nLFxuICAgICAgdGhpcy5pbnB1dEJveExvbmcsXG4gICAgICB0aGlzLmlucHV0Qm91bmRMb25nLFxuICAgICAgdGhpcy5pbnB1dEVycm9yTG9uZyxcbiAgICApO1xuXG4gICAgdGhpcy5pbnB1dEJveFNvdW5kLmFwcGVuZChcbiAgICAgIHRoaXMuc291bmRPcHRpb24xLFxuICAgICAgdGhpcy5zb3VuZE9wdGlvbjIsXG4gICAgICB0aGlzLnNvdW5kT3B0aW9uMyxcbiAgICApO1xuXG4gICAgdGhpcy5pbnB1dENvbnRhaW5lclNvdW5kLmFwcGVuZCh0aGlzLmlucHV0TGFiZWxTb3VuZCwgdGhpcy5pbnB1dEJveFNvdW5kKTtcblxuICAgIHRoaXMuY29udGVudENvbnRhaW5lci5hcHBlbmQoXG4gICAgICB0aGlzLnBvcHVwVGl0bGUsXG4gICAgICB0aGlzLnBvcHVwVGl0bGVMaW5lLFxuICAgICAgdGhpcy5pbnB1dENvbnRhaW5lclNob3J0LFxuICAgICAgdGhpcy5pbnB1dENvbnRhaW5lckxvbmcsXG4gICAgICB0aGlzLmlucHV0Q29udGFpbmVyU291bmQsXG4gICAgICB0aGlzLnNhdmVCdXR0b24sXG4gICAgKTtcblxuICAgIHRoaXMucG9wdXBDb250YWluZXIuYXBwZW5kKHRoaXMuY29udGVudENvbnRhaW5lcik7XG5cbiAgICB0aGlzLnNoYWRvdy5hcHBlbmQodGhpcy5zdHlsZUVsZW1lbnQsIHRoaXMucG9wdXBDb250YWluZXIsIHRoaXMub3ZlcmxheUVsKTtcbiAgfVxuXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgJ3Nob3J0QnJlYWtMZW5ndGgnOlxuICAgICAgICBpZiAoY2hlY2tJZlNob3J0SW5wdXRWYWxpZChuZXdWYWx1ZSkpIHtcbiAgICAgICAgICB0aGlzLl9zaG9ydEJyZWFrID0gbmV3VmFsdWU7XG4gICAgICAgICAgdGhpcy5pbnB1dEJveFNob3J0LnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgdGhpcy5pbnB1dEVycm9yU2hvcnQudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbG9uZ0JyZWFrTGVuZ3RoJzpcbiAgICAgICAgaWYgKGNoZWNrSWZMb25nSW5wdXRWYWxpZChuZXdWYWx1ZSkpIHtcbiAgICAgICAgICB0aGlzLl9sb25nQnJlYWsgPSBuZXdWYWx1ZTtcbiAgICAgICAgICB0aGlzLmlucHV0Qm94TG9uZy52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgIHRoaXMuaW5wdXRFcnJvckxvbmcudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGltZXJTb3VuZCc6XG4gICAgICAgIHRoaXMuX3RpbWVyU291bmQgPSBuZXdWYWx1ZTtcbiAgICAgICAgdGhpcy5pbnB1dEJveFNvdW5kLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cblxuICBnZXQgc2hvcnRCcmVhaygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2hvcnRCcmVhaztcbiAgfVxuXG4gIHNldCBzaG9ydEJyZWFrKHNob3J0QnJlYWspIHtcbiAgICB0aGlzLl9zaG9ydEJyZWFrID0gc2hvcnRCcmVhaztcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnc2hvcnRCcmVha0xlbmd0aCcsIHRoaXMuX3Nob3J0QnJlYWspO1xuICB9XG5cbiAgZ2V0IGxvbmdCcmVhaygpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9uZ0JyZWFrO1xuICB9XG5cbiAgc2V0IGxvbmdCcmVhayhsb25nQnJlYWspIHtcbiAgICB0aGlzLl9sb25nQnJlYWsgPSBsb25nQnJlYWs7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2xvbmdCcmVha0xlbmd0aCcsIHRoaXMuX2xvbmdCcmVhayk7XG4gIH1cblxuICBnZXQgdGltZXJTb3VuZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGltZXJTb3VuZDtcbiAgfVxuXG4gIHNldCB0aW1lclNvdW5kKHRpbWVyU291bmQpIHtcbiAgICB0aGlzLl90aW1lclNvdW5kID0gdGltZXJTb3VuZDtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgndGltZXJTb3VuZCcsIHRoaXMuX3RpbWVyU291bmQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNldHRpbmdzO1xuIiwiLyoqXG4gKiBAZmlsZSBNYW5hZ2UgdGFza2xpc3QgZm9yIHBhZ2VcbiAqL1xuXG4vKipcbiAqIEEgdGFzayBvYmplY3QgY29udGFpbmluZyBhIG5hbWUgYW5kIHBvbW9kb3JvcyBzdGF0c1xuICogQHR5cGVkZWYge09iamVjdH0gVGFza1xuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWUgICAgICAgICAgICAgICAgLSBuYW1lIG9mIHRoZSB0YXNrXG4gKiBAcHJvcGVydHkge251bWJlcn0gdXNlZFBvbW9kb3JvcyAgICAgICAtIHBvbW9kb3JvcyB1c2VkIHNvIGZhclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGVzdGltYXRlZFBvbW9kb3JvcyAgLSBlc3RpbWF0ZWQgbnVtYmVyIG9mIHBvbW9zIG5lZWRlZFxuICogQHByb3BlcnR5IHtib29sZWFufSBzZWxlY3RlZCAgICAgICAgICAgLSB3aGV0aGVyIHRhc2sgaXMgc2VsZWN0ZWRcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY29tcGxldGVkICAgICAgICAgIC0gd2hldGhlciB0YXNrIGlzIGNvbXBsZXRlZFxuICovXG5cbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5pbXBvcnQgJy4uL2NvbXBvbmVudHMvVGFza0l0ZW0nO1xuaW1wb3J0ICcuLi9jb21wb25lbnRzL1Rhc2tJdGVtRm9ybSc7XG5pbXBvcnQgJy4uL2NvbXBvbmVudHMvVGFza0xpc3QnO1xuXG5sZXQgdGFza3MgPSBbXTtcbmxldCB0YXNrTGlzdDtcbmxldCB0YXNrTGlzdENvbnRhaW5lcjtcbmxldCB0YXNrTGlzdEl0ZW1Db250YWluZXI7XG5sZXQgdGFza0l0ZW1Gb3JtO1xubGV0IHRhc2tJdGVtRm9ybUNvbnRhaW5lcjtcbmxldCB0YXNrSXRlbUZvcm1JbnB1dHM7XG5cbi8qKlxuICogU2F2ZSBjdXJyZW50IHRhc2tzIHRvIGxvY2FsU3RvcmFnZVxuICovXG5jb25zdCBzYXZlVGFza3MgPSAoKSA9PiB7XG4gIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGFza3MnLCBKU09OLnN0cmluZ2lmeSh0YXNrcykpO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0YXNrIGZyb20gdGFza3MgYW5kIERPTVxuICogQHBhcmFtIHtUYXNrfSB0YXNrIC0gdGFza1xuICogQHJldHVybiB7e3Rhc2tJbmRleDogbnVtYmVyLCB0YXNrRWxlbWVudDogSFRNTEVsZW1lbnR9fVxuICovXG5jb25zdCBnZXRUYXNrID0gKHsgbmFtZSB9KSA9PiAoe1xuICB0YXNrSW5kZXg6IHRhc2tzLmZpbmRJbmRleCgodGFzaykgPT4gdGFzay5uYW1lID09PSBuYW1lKSxcbiAgdGFza0VsZW1lbnQ6IHRhc2tMaXN0SXRlbUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7bmFtZX1cIl1gKSxcbn0pO1xuXG4vKipcbiAqIEdldCBidXR0b24gZWxlbWVudHMgZnJvbSB0YXNrLWl0ZW0gZWxlbWVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFza0VsZW1lbnQgLSB0YXNrLWl0ZW0gZWxlbWVudFxuICogQHJldHVybiB7e2RlbGV0ZTogSFRNTEJ1dHRvbkVsZW1lbnR9fSAtIGJ1dHRvbiBlbGVtZW50cyBvYmplY3RcbiAqL1xuY29uc3QgZ2V0VGFza0l0ZW1CdXR0b25zID0gKHRhc2tFbGVtZW50KSA9PiB7XG4gIGNvbnN0IGJ1dHRvbnMgPSBBcnJheS5mcm9tKFxuICAgIHRhc2tFbGVtZW50LnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvckFsbCgnLnRhc2stYnV0dG9uJyksXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICBkZWxldGU6IGJ1dHRvbnMuZmluZCgoYnRuKSA9PiBidG4uZ2V0QXR0cmlidXRlKCdpZCcpID09PSAnZGVsZXRlLWJ1dHRvbicpLFxuICB9O1xufTtcblxuLyoqXG4gKiBBZGQgdGFzayBvYmplY3QgdG8gRE9NLCBhZGQgZXZlbnQgbGlzdGVuZXJzIHRvIHRhc2staXRlbVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbmV3VGFza0VsZW1lbnQgLSBuZXcgdGFzayBlbGVtZW50IHRvIGJlIGFkZGVkXG4gKiBAcGFyYW0geydzdGFydCcgfCAnZW5kJyB8IEhUTUxFbGVtZW50fSBwb3NpdGlvbiAtIHBvc2l0aW9uIGluIGxpc3QgdG8gYXBwZW5kXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gLSBuZXcgdGFzayBlbGVtZW50IGFkZGVkIHRvIERPTVxuICovXG5jb25zdCBhZGRUYXNrVG9Eb20gPSAobmV3VGFza0VsZW1lbnQsIHBvc2l0aW9uID0gJ2VuZCcpID0+IHtcbiAgaWYgKHBvc2l0aW9uICE9PSAnZW5kJyAmJiBwb3NpdGlvbiAhPT0gJ3N0YXJ0Jykge1xuICAgIGNvbnN0IHsgdGFza0VsZW1lbnQgfSA9IGdldFRhc2socG9zaXRpb24pO1xuICAgIHRhc2tFbGVtZW50LmJlZm9yZShuZXdUYXNrRWxlbWVudCk7XG4gIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdlbmQnKSB7XG4gICAgdGFza0xpc3RJdGVtQ29udGFpbmVyLmFwcGVuZChuZXdUYXNrRWxlbWVudCk7XG4gIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdzdGFydCcpIHtcbiAgICB0YXNrTGlzdEl0ZW1Db250YWluZXIucHJlcGVuZChuZXdUYXNrRWxlbWVudCk7XG4gIH1cbiAgcmV0dXJuIG5ld1Rhc2tFbGVtZW50O1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGFzayBvYmplY3QgZnJvbSBET01cbiAqIEBwYXJhbSB7VGFza30gdGFza1RvUmVtb3ZlIC0gdGFzayB0byBiZSByZW1vdmVkXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gLSB0YXNrIGVsZW1lbnQgcmVtb3ZlZCBmcm9tIERPTVxuICovXG5jb25zdCByZW1vdmVUYXNrRnJvbURvbSA9ICh0YXNrVG9SZW1vdmUpID0+IHtcbiAgY29uc3QgeyB0YXNrRWxlbWVudCB9ID0gZ2V0VGFzayh0YXNrVG9SZW1vdmUpO1xuICB0YXNrRWxlbWVudC5yZW1vdmUoKTtcbiAgcmV0dXJuIHRhc2tFbGVtZW50O1xufTtcblxuLyoqXG4gKiBVcGRhdGUgZXhpc3RpbmcgdGFza1xuICogQHBhcmFtIHtUYXNrfSBwcmV2VGFzayAtIHRhc2sgdG8gYmUgdXBkYXRlZFxuICogQHBhcmFtIHtUYXNrfSBuZXh0VGFzayAtIHVwZGF0ZWQgdGFza1xuICogQHJldHVybiB7VGFza30gLSB1cGRhdGVkIHRhc2tcbiAqL1xuY29uc3QgdXBkYXRlVGFzayA9IChwcmV2VGFzaywgbmV4dFRhc2spID0+IHtcbiAgY29uc3Qge1xuICAgIG5hbWU6IG5leHROYW1lLFxuICAgIHVzZWRQb21vZG9yb3MsXG4gICAgZXN0aW1hdGVkUG9tb2Rvcm9zLFxuICAgIHNlbGVjdGVkLFxuICAgIGNvbXBsZXRlZCxcbiAgfSA9IG5leHRUYXNrO1xuICBjb25zdCB7IHRhc2tJbmRleCwgdGFza0VsZW1lbnQgfSA9IGdldFRhc2socHJldlRhc2spO1xuXG4gIC8vIHVwZGF0ZSBsb2NhbFN0b3JhZ2VcbiAgdGFza3NbdGFza0luZGV4XSA9IG5leHRUYXNrO1xuICBzYXZlVGFza3MoKTtcblxuICAvLyB1cGRhdGUgdGFzayBpbiBkb21cbiAgdGFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCduYW1lJywgbmV4dE5hbWUpO1xuICB0YXNrRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3VzZWQtcG9tb2Rvcm9zJywgdXNlZFBvbW9kb3Jvcyk7XG4gIHRhc2tFbGVtZW50LnNldEF0dHJpYnV0ZSgnZXN0aW1hdGVkLXBvbW9kb3JvcycsIGVzdGltYXRlZFBvbW9kb3Jvcyk7XG4gIHRhc2tFbGVtZW50LnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCBzZWxlY3RlZCk7XG4gIHRhc2tFbGVtZW50LnNldEF0dHJpYnV0ZSgnY29tcGxldGVkJywgY29tcGxldGVkKTtcbiAgcmV0dXJuIG5leHRUYXNrO1xufTtcblxuLyoqXG4gKiBEZWxldGluZyBleGlzdGluZyB0YXNrXG4gKiBAcGFyYW0ge1Rhc2t9IHRhc2tUb0RlbGV0ZSAtIHRhc2sgdG8gYmUgZGVsZXRlZFxuICovXG5jb25zdCBkZWxldGVUYXNrID0gKHRhc2tUb0RlbGV0ZSkgPT4ge1xuICAvLyB1cGRhdGUgbG9jYWxTdG9yYWdlXG4gIGNvbnN0IHsgdGFza0luZGV4IH0gPSBnZXRUYXNrKHRhc2tUb0RlbGV0ZSk7XG4gIHRhc2tzLnNwbGljZSh0YXNrSW5kZXgsIDEpO1xuICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rhc2tzJywgSlNPTi5zdHJpbmdpZnkodGFza3MpKTtcbiAgcmVtb3ZlVGFza0Zyb21Eb20odGFza1RvRGVsZXRlKTtcbn07XG5cbi8qKlxuICogR2V0IGN1cnJlbnRseSBzZWxlY3RlZCB0YXNrXG4gKi9cbmNvbnN0IGdldEN1cnJlbnRseVNlbGVjdGVkVGFzayA9ICgpID0+IHRhc2tzLmZpbmQoKHQpID0+IHQuc2VsZWN0ZWQpO1xuXG4vKipcbiAqIFNlbGVjdCBhIHRhc2tcbiAqIEBwYXJhbSB7VGFza30gdGFzayAtIHRhc2sgdG8gYmUgc2VsZWN0ZWRcbiAqIEByZXR1cm4ge1Rhc2t9IC0gc2VsZWN0ZWQgdGFza1xuICovXG5jb25zdCBzZWxlY3RUYXNrID0gKHRhc2spID0+IHtcbiAgY29uc3QgcHJldlNlbGVjdGVkVGFzayA9IGdldEN1cnJlbnRseVNlbGVjdGVkVGFzaygpO1xuICBpZiAocHJldlNlbGVjdGVkVGFzaykge1xuICAgIHVwZGF0ZVRhc2socHJldlNlbGVjdGVkVGFzaywgeyAuLi5wcmV2U2VsZWN0ZWRUYXNrLCBzZWxlY3RlZDogZmFsc2UgfSk7XG4gIH1cblxuICBjb25zdCB7IHRhc2tFbGVtZW50LCB0YXNrSW5kZXggfSA9IGdldFRhc2sodGFzayk7XG4gIC8vIG1vdmUgdGFzayB0byBmcm9udCBvZiBET00gbGlzdFxuICByZW1vdmVUYXNrRnJvbURvbSh0YXNrKTtcbiAgYWRkVGFza1RvRG9tKHRhc2tFbGVtZW50LCAnc3RhcnQnKTtcblxuICAvLyBtb3ZlIHRhc2sgdG8gZnJvbnQgb2YgdGFza3MgYXJyYXlcbiAgdGFza3Muc3BsaWNlKHRhc2tJbmRleCwgMSk7XG4gIHRhc2tzLnVuc2hpZnQodGFzayk7XG5cbiAgLy8gdXBkYXRlIHNlbGVjdGVkIHByb3BlcnR5IG9mIHRhc2tcbiAgcmV0dXJuIHVwZGF0ZVRhc2sodGFzaywgeyAuLi50YXNrLCBzZWxlY3RlZDogdHJ1ZSB9KTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgdGFzayBlbGVtZW50IGZyb20gYSB0YXNrIG9iamVjdFxuICogQHBhcmFtIHtUYXNrfSBuZXdUYXNrIC0gdGFzayB0byBiZSBjcmVhdGVkXG4gKi9cbmNvbnN0IGNyZWF0ZVRhc2tFbGVtZW50ID0gKG5ld1Rhc2spID0+IHtcbiAgY29uc3Qge1xuICAgIG5hbWUsXG4gICAgdXNlZFBvbW9kb3JvcyxcbiAgICBlc3RpbWF0ZWRQb21vZG9yb3MsXG4gICAgc2VsZWN0ZWQsXG4gICAgY29tcGxldGVkLFxuICB9ID0gbmV3VGFzaztcblxuICAvLyBjcmVhdGUgaHRtbCBlbGVtZW50XG4gIGNvbnN0IG5ld1Rhc2tFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgndGFzay1pdGVtJywge1xuICAgIG5hbWUsXG4gICAgJ3VzZWQtcG9tb2Rvcm9zJzogdXNlZFBvbW9kb3JvcyxcbiAgICAnZXN0aW1hdGVkLXBvbW9kb3Jvcyc6IGVzdGltYXRlZFBvbW9kb3JvcyxcbiAgICBzZWxlY3RlZCxcbiAgfSk7XG5cbiAgLy8gYWRkIGV2ZW50IGxpc3RlbmVyc1xuICBjb25zdCB0ZXh0Q29udGFpbmVyID0gbmV3VGFza0VsZW1lbnQuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKFxuICAgICcudGV4dC1jb250YWluZXInLFxuICApO1xuICBjb25zdCB7IGRlbGV0ZTogZGVsZXRlQnV0dG9uIH0gPSBnZXRUYXNrSXRlbUJ1dHRvbnMobmV3VGFza0VsZW1lbnQpO1xuICBpZiAoIWNvbXBsZXRlZCkge1xuICAgIHRleHRDb250YWluZXIub25jbGljayA9ICgpID0+IHNlbGVjdFRhc2sobmV3VGFzayk7XG4gIH1cbiAgZGVsZXRlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiBkZWxldGVUYXNrKG5ld1Rhc2spO1xuICByZXR1cm4gbmV3VGFza0VsZW1lbnQ7XG59O1xuXG4vKipcbiAqIEFkZCBuZXcgdGFzayB0byBsb2NhbFN0b3JhZ2UsIGFwcGVuZCB0byBET01cbiAqIEBwYXJhbSB7VGFza30gbmV3VGFzayAtIG5ldyB0YXNrIHRvIGJlIGFkZGVkXG4gKi9cbmNvbnN0IGFkZFRhc2sgPSAobmV3VGFzaykgPT4ge1xuICAvLyB1cGRhdGUgbG9jYWxTdG9yYWdlXG4gIGNvbnN0IG5ld1Rhc2tFbGVtZW50ID0gY3JlYXRlVGFza0VsZW1lbnQobmV3VGFzayk7XG4gIGNvbnN0IGluZGV4T2ZGaXJzdENvbXBsZXRlZCA9IHRhc2tzLmZpbmRJbmRleCgodCkgPT4gdC5jb21wbGV0ZWQpO1xuICBpZiAoaW5kZXhPZkZpcnN0Q29tcGxldGVkICE9PSAtMSkge1xuICAgIHRhc2tzLnNwbGljZShpbmRleE9mRmlyc3RDb21wbGV0ZWQsIDAsIG5ld1Rhc2spO1xuICAgIGFkZFRhc2tUb0RvbShuZXdUYXNrRWxlbWVudCwgdGFza3NbaW5kZXhPZkZpcnN0Q29tcGxldGVkICsgMV0pO1xuICB9IGVsc2Uge1xuICAgIHRhc2tzLnB1c2gobmV3VGFzayk7XG4gICAgYWRkVGFza1RvRG9tKG5ld1Rhc2tFbGVtZW50KTtcbiAgfVxuICBzYXZlVGFza3MoKTtcbn07XG5cbi8qKlxuICogR2V0IHRhc2tsaXN0XG4gKiBAcmV0dXJuIHtUYXNrW119IC0gY3VycmVudCBsaXN0IG9mIHRhc2tzXG4gKi9cbmNvbnN0IGdldFRhc2tzID0gKCkgPT4ge1xuICByZXR1cm4gdGFza3M7XG59O1xuXG4vKipcbiAqIEhhbmRsZSBmb3JtIHN1Ym1pc3Npb24sIHZhbGlkYXRlIGlucHV0XG4gKiBAcGFyYW0ge0V2ZW50fSBlIC0gc3VibWl0IGV2ZW50XG4gKi9cbmNvbnN0IGhhbmRsZVRhc2tGb3JtU3VibWl0ID0gKGUpID0+IHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBwcmV2ZW50IHBhZ2UgcmVsb2FkXG5cbiAgY29uc3QgeyBuYW1lOiBuYW1lSW5wdXQsIHBvbW9kb3JvOiBwb21vZG9yb0lucHV0IH0gPSB0YXNrSXRlbUZvcm1JbnB1dHM7XG4gIGNvbnN0IHsgdmFsdWU6IG5hbWUgfSA9IG5hbWVJbnB1dDtcbiAgY29uc3QgeyB2YWx1ZTogcG9tb2Rvcm8gfSA9IHBvbW9kb3JvSW5wdXQ7XG5cbiAgY29uc3QgdHJpbW1lZE5hbWUgPSBuYW1lLnRyaW0oKTtcbiAgY29uc3QgcG9tb2Rvcm9OdW1iZXIgPSBOdW1iZXIocG9tb2Rvcm8pO1xuXG4gIGlmIChOdW1iZXIuaXNOYU4ocG9tb2Rvcm9OdW1iZXIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbmFtZUlucHV0LmZvY3VzKCk7XG5cbiAgYWRkVGFzayh7XG4gICAgbmFtZTogdHJpbW1lZE5hbWUsXG4gICAgZXN0aW1hdGVkUG9tb2Rvcm9zOiBwb21vZG9yb051bWJlcixcbiAgICB1c2VkUG9tb2Rvcm9zOiAwLFxuICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICB9KTtcbiAgT2JqZWN0LnZhbHVlcyh0YXNrSXRlbUZvcm1JbnB1dHMpLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgaW5wdXQudmFsdWUgPSAnJztcbiAgfSk7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlIHRhc2tzIGZyb20gbG9jYWxTdG9yYWdlXG4gKi9cbmNvbnN0IHJlc3RvcmVUYXNrcyA9ICgpID0+IHtcbiAgaWYgKCFKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGFza3MnKSkpIHtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rhc2tzJywgSlNPTi5zdHJpbmdpZnkoW10pKTtcbiAgfVxuICB0YXNrcyA9IEpTT04ucGFyc2Uod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0YXNrcycpKTtcbiAgdGFza3MuZm9yRWFjaCgodGFzaykgPT4gYWRkVGFza1RvRG9tKGNyZWF0ZVRhc2tFbGVtZW50KHRhc2spKSk7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiB0YXNrIGlucHV0IGlzIGFscmVhZHkgaW4gbGlzdFxuICogU2V0cyBlcnJvciBtZXNzYWdlIGZvciBmb3JtXG4gKiBAcGFyYW0ge0lucHV0RXZlbnR9IGUgLSBpbnB1dCBjaGFuZ2UgZnJvbSB0YXNrIGl0ZW0gZm9ybVxuICovXG5jb25zdCBjaGVja0R1cGxpY2F0ZVRhc2sgPSAoZSkgPT4ge1xuICBjb25zdCB7IHZhbHVlIH0gPSBlLnRhcmdldDtcbiAgY29uc3QgdHJpbW1lZE5hbWUgPSB2YWx1ZS50cmltKCk7XG4gIGlmICh0YXNrcy5zb21lKCh0YXNrKSA9PiB0YXNrLm5hbWUgPT09IHRyaW1tZWROYW1lKSkge1xuICAgIGUudGFyZ2V0LnNldEN1c3RvbVZhbGlkaXR5KCdEdXBsaWNhdGUgdGFzay4nKTtcbiAgfSBlbHNlIHtcbiAgICBlLnRhcmdldC5zZXRDdXN0b21WYWxpZGl0eSgnJyk7XG4gIH1cbn07XG5cbi8qKlxuICogSW5jcmVtZW50IHRoZSB1c2VkUG9tb2Rvcm9zIGZvciBvbmUgdGFza1xuICogQHBhcmFtIHtUYXNrfSB0YXNrIC0gdGFzayB0byBiZSBpbmNyZW1lbnRlZFxuICogQHJldHVybiB7VGFza30gLSBpbmNyZW1lbnRlZCB0YXNrXG4gKi9cbmNvbnN0IGluY3JlbWVudFBvbW9kb3JvID0gKHRhc2spID0+IHtcbiAgY29uc3QgeyB1c2VkUG9tb2Rvcm9zIH0gPSB0YXNrO1xuICByZXR1cm4gdXBkYXRlVGFzayh0YXNrLCB7IC4uLnRhc2ssIHVzZWRQb21vZG9yb3M6IHVzZWRQb21vZG9yb3MgKyAxIH0pO1xufTtcblxuLyoqXG4gKiBBdXRvbWF0aWNhbGx5IHNlbGVjdCBmaXJzdCB0YXNrIGluIHRoZSB0YXNrIGxpc3RcbiAqIEByZXR1cm4ge1Rhc2sgfCBudWxsfSByZXR1cm5zIGZpcnN0IGF2YWlsYWJsZSB0YXNrLCBpZiB0aGVyZSBhcmUgbm9uZSwgcmV0dXJuIG51bGxcbiAqL1xuY29uc3Qgc2VsZWN0Rmlyc3RUYXNrID0gKCkgPT4ge1xuICBpZiAodGFza3MubGVuZ3RoID4gMCAmJiAhdGFza3NbMF0uY29tcGxldGVkKSB7XG4gICAgcmV0dXJuIHNlbGVjdFRhc2sodGFza3NbMF0pO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBEZXNlbGVjdCBhbGwgdGFza3NcbiAqL1xuY29uc3QgZGVzZWxlY3RBbGxUYXNrcyA9ICgpID0+IHtcbiAgdGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xuICAgIHVwZGF0ZVRhc2sodGFzaywgeyAuLi50YXNrLCBzZWxlY3RlZDogZmFsc2UgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBEaXNhYmxlIHRhc2sgbGlzdFxuICogQHBhcmFtIHtib29sZWFufSBzaG91bGRUYXNrbGlzdEJlVXNhYmxlIC0gd2hldGhlciB0YXNrIGxpc3Qgc2hvdWxkIGJlIHVzYWJsZVxuICovXG5jb25zdCBzZXRUYXNrbGlzdFVzYWJpbGl0eSA9IChzaG91bGRUYXNrbGlzdEJlVXNhYmxlKSA9PiB7XG4gIHRhc2tzLmZvckVhY2goKHRhc2spID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0YXNrRWxlbWVudDogeyBzaGFkb3dSb290IH0sXG4gICAgfSA9IGdldFRhc2sodGFzayk7XG4gICAgY29uc3QgaXRlbUNvbnRhaW5lciA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLml0ZW0tY29udGFpbmVyJyk7XG4gICAgY29uc3QgdGV4dENvbnRhaW5lciA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnRleHQtY29udGFpbmVyJyk7XG5cbiAgICAvLyBkaXNhYmxlIGl0ZW0gY29udGFpbmVyXG4gICAgaWYgKHNob3VsZFRhc2tsaXN0QmVVc2FibGUpIHtcbiAgICAgIGl0ZW1Db250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlbUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xuICAgIH1cblxuICAgIC8vIGRpc2FibGUgc2VsZWN0IHRhc2sgbGlzdGVuZXJcbiAgICBpZiAoc2hvdWxkVGFza2xpc3RCZVVzYWJsZSAmJiAhdGFzay5jb21wbGV0ZWQpIHtcbiAgICAgIHRleHRDb250YWluZXIub25jbGljayA9ICgpID0+IHNlbGVjdFRhc2sodGFzayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRleHRDb250YWluZXIub25jbGljayA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gZGlzYWJsZSBidXR0b25zXG4gICAgY29uc3QgYnV0dG9ucyA9IGdldFRhc2tJdGVtQnV0dG9ucyhnZXRUYXNrKHRhc2spLnRhc2tFbGVtZW50KTtcbiAgICBPYmplY3QudmFsdWVzKGJ1dHRvbnMpLmZvckVhY2goKGJ0bikgPT4ge1xuICAgICAgYnRuLmRpc2FibGVkID0gIXNob3VsZFRhc2tsaXN0QmVVc2FibGU7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBNYXJrIHRhc2sgYXMgY29tcGxldGVcbiAqIEBwYXJhbSB7VGFza30gY29tcGxldGVkVGFzayAtIHRhc2sgdGhhdCBoYXMgYmVlbiBjb21wbGV0ZWRcbiAqL1xuY29uc3QgY29tcGxldGVUYXNrID0gKGNvbXBsZXRlZFRhc2spID0+IHtcbiAgY29uc3QgeyB0YXNrSW5kZXgsIHRhc2tFbGVtZW50IH0gPSBnZXRUYXNrKGNvbXBsZXRlZFRhc2spO1xuXG4gIC8vIG1hcmsgdGFzayBhcyBjb21wbGV0ZWQgYW5kIG1vdmUgaXQgdG8gZW5kIG9mIERPTSBsaXN0XG4gIHJlbW92ZVRhc2tGcm9tRG9tKGNvbXBsZXRlZFRhc2spO1xuICBhZGRUYXNrVG9Eb20odGFza0VsZW1lbnQsICdlbmQnKTtcbiAgdGFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsIGZhbHNlKTtcbiAgdGFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdjb21wbGV0ZWQnLCB0cnVlKTtcbiAgdGFza0VsZW1lbnQuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcudGV4dC1jb250YWluZXInKS5vbmNsaWNrID0gbnVsbDtcblxuICAvLyBtb3ZlIHRhc2sgdG8gZW5kIG9mIHRhc2tzIGFycmF5XG4gIHRhc2tzLnNwbGljZSh0YXNrSW5kZXgsIDEpO1xuICB0YXNrcy5wdXNoKGNvbXBsZXRlZFRhc2spO1xuXG4gIC8vIHVwZGF0ZSBzZWxlY3RlZCBwcm9wZXJ0eSBvZiB0YXNrXG4gIHVwZGF0ZVRhc2soY29tcGxldGVkVGFzaywge1xuICAgIC4uLmNvbXBsZXRlZFRhc2ssXG4gICAgc2VsZWN0ZWQ6IGZhbHNlLFxuICAgIGNvbXBsZXRlZDogdHJ1ZSxcbiAgfSk7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgZWxlbWVudCB2YXJpYWJsZXMgZm9yIGRpZmZlcmVudCBlbGVtZW50cyBvZiB0YXNrIGxpc3RcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvb3QgLSB0YXNrbGlzdCBlbGVtZW50XG4gKi9cbmNvbnN0IGluaXRpYWxpemVFbGVtZW50cyA9IChyb290KSA9PiB7XG4gIHRhc2tMaXN0ID0gcm9vdDtcbiAgdGFza0xpc3RDb250YWluZXIgPSB0YXNrTGlzdC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWluZXInKTtcbiAgdGFza0xpc3RJdGVtQ29udGFpbmVyID0gdGFza0xpc3RDb250YWluZXIucXVlcnlTZWxlY3RvcihcbiAgICAnLnRhc2staXRlbS1jb250YWluZXInLFxuICApO1xuICB0YXNrSXRlbUZvcm0gPSB0YXNrTGlzdENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcudGFzay1pdGVtLWZvcm0nKTtcbiAgdGFza0l0ZW1Gb3JtQ29udGFpbmVyID0gdGFza0l0ZW1Gb3JtLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnRhc2stZm9ybScpO1xuICB0YXNrSXRlbUZvcm1JbnB1dHMgPSB7XG4gICAgbmFtZTogdGFza0l0ZW1Gb3JtQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNuYW1lLWlucHV0JyksXG4gICAgcG9tb2Rvcm86IHRhc2tJdGVtRm9ybUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjcG9tb2Rvcm8taW5wdXQnKSxcbiAgfTtcbn07XG5cbi8qKlxuICogU2V0IHRhc2tsaXN0XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByb290IC0gdGFzayBsaXN0IGVsZW1lbnRcbiAqL1xuY29uc3QgaW5pdGlhbGl6ZVRhc2tMaXN0ID0gKHJvb3QpID0+IHtcbiAgaW5pdGlhbGl6ZUVsZW1lbnRzKHJvb3QpO1xuICB0YXNrSXRlbUZvcm1Db250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgaGFuZGxlVGFza0Zvcm1TdWJtaXQpO1xuICByZXN0b3JlVGFza3MoKTtcbiAgdGFza0l0ZW1Gb3JtSW5wdXRzLm5hbWUub25pbnB1dCA9IGNoZWNrRHVwbGljYXRlVGFzaztcbn07XG5cbmV4cG9ydCB7XG4gIGluaXRpYWxpemVUYXNrTGlzdCxcbiAgYWRkVGFzayxcbiAgZ2V0VGFza3MsXG4gIHVwZGF0ZVRhc2ssXG4gIGRlbGV0ZVRhc2ssXG4gIGluY3JlbWVudFBvbW9kb3JvLFxuICBzZWxlY3RUYXNrLFxuICBzZWxlY3RGaXJzdFRhc2ssXG4gIGRlc2VsZWN0QWxsVGFza3MsXG4gIGdldEN1cnJlbnRseVNlbGVjdGVkVGFzayxcbiAgc2V0VGFza2xpc3RVc2FiaWxpdHksXG4gIGNvbXBsZXRlVGFzayxcbn07XG4iLCIvKipcbiAqIEBmaWxlIE1hbmFnZSBwcm9ncmVzcyByaW5nIGZvciBwYWdlXG4gKi9cblxubGV0IHByb2dyZXNzUmluZ0VsZW1lbnQ7XG5cbi8qKlxuICogU2V0IHByb2dyZXNzIHJpbmdcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBwcm9ncmVzcyByaW5nIGVsZW1lbnRcbiAqL1xuY29uc3QgaW5pdGlhbGl6ZVByb2dyZXNzUmluZyA9IChlbGVtZW50KSA9PiB7XG4gIHByb2dyZXNzUmluZ0VsZW1lbnQgPSBlbGVtZW50O1xufTtcblxuLyoqXG4gKiBHZXQgcHJvZ3Jlc3NcbiAqIEByZXR1cm4ge251bWJlcn0gLSBjdXJyZW50IHByb2dyZXNzXG4gKi9cbmNvbnN0IGdldFByb2dyZXNzID0gKCkgPT4gcHJvZ3Jlc3NSaW5nRWxlbWVudC5wcm9ncmVzcztcblxuLyoqXG4gKiBTZXQgcHJvZ3Jlc3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBwcm9ncmVzcyAtIHByb2dyZXNzIHRvIHNldFxuICovXG5jb25zdCBzZXRQcm9ncmVzcyA9IChwcm9ncmVzcykgPT4ge1xuICBwcm9ncmVzc1JpbmdFbGVtZW50LnByb2dyZXNzID0gSlNPTi5zdHJpbmdpZnkocHJvZ3Jlc3MpO1xufTtcblxuLyoqXG4gKiBTZXQgcmFkaXVzIG9mIHJpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgLSBuZXcgcmFkaXVzIHRvIHNldFxuICovXG5jb25zdCBzZXRSYWRpdXNTdHJva2UgPSAocmFkaXVzLCBzdHJva2UpID0+IHtcbiAgcHJvZ3Jlc3NSaW5nRWxlbWVudC5yYWRpdXMgPSByYWRpdXM7XG4gIHByb2dyZXNzUmluZ0VsZW1lbnQuc3Ryb2tlID0gc3Ryb2tlO1xufTtcblxuLyoqXG4gKiBHZXQgcmFkaXVzIG9mIHJpbmdcbiAqIEByZXR1cm4ge251bWJlcn0gcmFkaXVzXG4gKi9cbmNvbnN0IGdldFJhZGl1cyA9ICgpID0+IHByb2dyZXNzUmluZ0VsZW1lbnQucmFkaXVzO1xuXG4vKipcbiAqIEdldCBzdHJva2Ugb2YgcmluZ1xuICogQHJldHVybiB7bnVtYmVyfSBzdHJva2VcbiAqL1xuY29uc3QgZ2V0U3Ryb2tlID0gKCkgPT4gcHJvZ3Jlc3NSaW5nRWxlbWVudC5zdHJva2U7XG5cbmV4cG9ydCB7XG4gIGluaXRpYWxpemVQcm9ncmVzc1JpbmcsXG4gIGdldFByb2dyZXNzLFxuICBzZXRQcm9ncmVzcyxcbiAgc2V0UmFkaXVzU3Ryb2tlLFxuICBnZXRSYWRpdXMsXG4gIGdldFN0cm9rZSxcbn07XG4iLCIvKipcbiAqIEBhdXRob3IgRmVybmFuZG8gQnJhY2Ftb250ZVxuICogQGZpbGUgVGltZXIgc2NyaXB0IHVzZWQgdG8gZW11bGF0ZSB0aGUgcG9tb2Rvcm8gcHJvY2Vzc1xuICovXG5cbmxldCB0aW1lckVsZW1lbnQ7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aW1lciBjb21wb25lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSB0aW1lciBlbGVtZW50XG4gKi9cbmNvbnN0IGluaXRpYWxpemVUaW1lciA9IChlbGVtZW50KSA9PiB7XG4gIHRpbWVyRWxlbWVudCA9IGVsZW1lbnQ7XG59O1xuXG4vKipcbiAqIFNldCB0aW1lIG9mIHRpbWVyIGNvbXBvbmVudFxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgLSBuZXcgdGltZSBvZiB0aW1lciAoaW4gc2Vjb25kcylcbiAqL1xuY29uc3Qgc2V0VGltZXIgPSAodGltZSkgPT4ge1xuICB0aW1lckVsZW1lbnQudGltZSA9IHRpbWU7XG59O1xuXG4vKipcbiAqIEdldCB0aW1lIG9mIHRpbWVyIGNvbXBvbmVudFxuICogQHJldHVybiB7bnVtYmVyfSAtIGN1cnJlbnQgdGltZSBvZiB0aW1lciAoaW4gc2Vjb25kcylcbiAqL1xuY29uc3QgZ2V0VGltZSA9ICgpID0+IHRpbWVyRWxlbWVudC50aW1lO1xuXG5leHBvcnQgeyBpbml0aWFsaXplVGltZXIsIHNldFRpbWVyLCBnZXRUaW1lIH07XG4iLCIvKipcbiAqIEBmaWxlIE1hbmFnZSB0YXNrbGlzdCBmb3IgcGFnZVxuICogQGF1dGhvciBEaWxsYW4gTWVyY2hhbnRcbiAqL1xuXG5pbXBvcnQge1xuICBpbml0aWFsaXplSW50ZXJ2YWxMZW5ndGhzLFxuICBjaGVja0lmU2hvcnRJbnB1dFZhbGlkLFxuICBjaGVja0lmTG9uZ0lucHV0VmFsaWQsXG4gIGNoZWNrSWZUaW1lckF1ZGlvVmFsaWQsXG59IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcblxubGV0IHNldHRpbmdzRWxlbWVudDtcbmxldCBwb3B1cEVsO1xubGV0IHNhdmVCdXR0b247XG5sZXQgb3ZlcmxheTtcbmxldCBzaG9ydEJyZWFrSW5wdXQ7XG5sZXQgbG9uZ0JyZWFrSW5wdXQ7XG5sZXQgc291bmRJbnB1dDtcbmxldCBlcnJvck1lc3NhZ2VzO1xuY29uc3QgdGltZXJBdWRpbyA9IG5ldyBBdWRpbygpO1xudGltZXJBdWRpby52b2x1bWUgPSAwLjI7XG5cbi8qKlxuICogR2V0IHNob3J0IGJyZWFrIGxlbmd0aFxuICogQHJldHVybiB7bnVtYmVyfSAtIHNob3J0IGJyZWFrIGxlbmd0aFxuICovXG5jb25zdCBnZXRTaG9ydEJyZWFrTGVuZ3RoID0gKCkgPT4gc2V0dGluZ3NFbGVtZW50LnNob3J0QnJlYWtMZW5ndGg7XG5cbi8qKlxuICogR2V0IGxvbmcgYnJlYWsgbGVuZ3RoXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0gbG9uZyBicmVhayBsZW5ndGhcbiAqL1xuY29uc3QgZ2V0TG9uZ0JyZWFrTGVuZ3RoID0gKCkgPT4gc2V0dGluZ3NFbGVtZW50LmxvbmdCcmVha0xlbmd0aDtcblxuLyoqXG4gKiBHZXQgcGF0aHdheSB0byBzb3VuZCBmaWxlXG4gKiBAcmV0dXJuIHtzdHJpbmd9IC0gYXVkaW8gdXJsXG4gKi9cbmNvbnN0IGdldFRpbWVyQXVkaW8gPSAoKSA9PiBzZXR0aW5nc0VsZW1lbnQudGltZXJTb3VuZDtcblxuLyoqXG4gKiBTZXQgc2hvcnQgYnJlYWsgbGVuZ3RoXG4gKiBAcGFyYW0ge251bWJlcn0gc2hvcnRCcmVha0xlbmd0aCAtIG5ldyBzaG9ydCBicmVhayBsZW5ndGhcbiAqL1xuY29uc3Qgc2V0U2hvcnRCcmVha0xlbmd0aCA9IChzaG9ydEJyZWFrTGVuZ3RoKSA9PiB7XG4gIHNldHRpbmdzRWxlbWVudC5zaG9ydEJyZWFrTGVuZ3RoID0gc2hvcnRCcmVha0xlbmd0aDtcbn07XG5cbi8qKlxuICogU2V0IGxvbmcgYnJlYWsgbGVuZ3RoXG4gKiBAcGFyYW0ge251bWJlcn0gbG9uZ0JyZWFrTGVuZ3RoIC0gbmV3IGxvbmcgYnJlYWsgbGVuZ3RoXG4gKi9cbmNvbnN0IHNldExvbmdCcmVha0xlbmd0aCA9IChsb25nQnJlYWtMZW5ndGgpID0+IHtcbiAgc2V0dGluZ3NFbGVtZW50LmxvbmdCcmVha0xlbmd0aCA9IGxvbmdCcmVha0xlbmd0aDtcbn07XG5cbi8qKlxuICogU2V0IHVybCBvZiBhdWRpb1xuICogQHBhcmFtIHtudW1iZXJ9IGlucHV0IC0gcGF0aHdheSB0byBzb3VuZFxuICovXG5jb25zdCBzZXRUaW1lckF1ZGlvID0gKGlucHV0KSA9PiB7XG4gIHNldHRpbmdzRWxlbWVudC50aW1lclNvdW5kID0gaW5wdXQ7XG4gIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGltZXJBdWRpbycsIGlucHV0KTtcbn07XG5cbi8qKlxuICogT3BlbiBzZXR0aW5ncyBwb3B1cFxuICovXG5jb25zdCBvcGVuUG9wdXAgPSAoKSA9PiB7XG4gIHBvcHVwRWwuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gIG92ZXJsYXkuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG5cbiAgc2hvcnRCcmVha0lucHV0LnZhbHVlID0gZ2V0U2hvcnRCcmVha0xlbmd0aCgpO1xuICBsb25nQnJlYWtJbnB1dC52YWx1ZSA9IGdldExvbmdCcmVha0xlbmd0aCgpO1xuICBzb3VuZElucHV0LnZhbHVlID0gZ2V0VGltZXJBdWRpbygpO1xufTtcblxuLyoqXG4gKiBDbG9zZSBzZXR0aW5ncyBwb3B1cFxuICovXG5jb25zdCBjbG9zZVBvcHVwID0gKCkgPT4ge1xuICB0aW1lckF1ZGlvLnBhdXNlKCk7XG4gIHBvcHVwRWwuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gIG92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG59O1xuXG4vKipcbiAqIFNhdmUgaW50ZXJ2YWwgbGVuZ3RoIC8gYXVkaW8gc2V0dGluZ3MsIGRpc3BsYXkgZXJyb3IgaWYgaW52YWxpZFxuICogQHJldHVybiB7KG51bWJlcltdIHwgbnVsbCl9IC0gbmV3IGludGVydmFsIGxlbmd0aHMsIG51bGwgaWYgZXJyb3Igb2NjdXJzXG4gKi9cbmNvbnN0IHNhdmVTZXR0aW5ncyA9ICgpID0+IHtcbiAgY29uc3QgbmV3U2hvcnRCcmVha0xlbmd0aCA9IHNob3J0QnJlYWtJbnB1dC52YWx1ZTtcbiAgY29uc3QgbmV3TG9uZ0JyZWFrTGVuZ3RoID0gbG9uZ0JyZWFrSW5wdXQudmFsdWU7XG4gIGNvbnN0IGlzU2hvcnRJbnB1dFZhbGlkID0gY2hlY2tJZlNob3J0SW5wdXRWYWxpZChuZXdTaG9ydEJyZWFrTGVuZ3RoKTtcbiAgY29uc3QgaXNMb25nSW5wdXRWYWxpZCA9IGNoZWNrSWZMb25nSW5wdXRWYWxpZChuZXdMb25nQnJlYWtMZW5ndGgpO1xuXG4gIGVycm9yTWVzc2FnZXNbMF0uc3R5bGUudmlzaWJpbGl0eSA9IGlzU2hvcnRJbnB1dFZhbGlkID8gJ2hpZGRlbicgOiAndmlzaWJsZSc7XG4gIGVycm9yTWVzc2FnZXNbMV0uc3R5bGUudmlzaWJpbGl0eSA9IGlzTG9uZ0lucHV0VmFsaWQgPyAnaGlkZGVuJyA6ICd2aXNpYmxlJztcbiAgaWYgKCFpc1Nob3J0SW5wdXRWYWxpZCB8fCAhaXNMb25nSW5wdXRWYWxpZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgc2V0VGltZXJBdWRpbyhzb3VuZElucHV0LnZhbHVlKTtcbiAgc2V0U2hvcnRCcmVha0xlbmd0aChuZXdTaG9ydEJyZWFrTGVuZ3RoKTtcbiAgc2V0TG9uZ0JyZWFrTGVuZ3RoKG5ld0xvbmdCcmVha0xlbmd0aCk7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzaG9ydEJyZWFrTGVuZ3RoJywgbmV3U2hvcnRCcmVha0xlbmd0aCk7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsb25nQnJlYWtMZW5ndGgnLCBuZXdMb25nQnJlYWtMZW5ndGgpO1xuICByZXR1cm4gW25ld1Nob3J0QnJlYWtMZW5ndGgsIG5ld0xvbmdCcmVha0xlbmd0aF07XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgZWxlbWVudCB2YXJpYWJsZXMgZm9yIGRpZmZlcmVudCBlbGVtZW50cyBvZiBzZXR0aW5ncyBjb21wb25lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvb3QgLSByb290IGVsZW1lbnQgb2Ygc2V0dGluZ3MgY29tcG9uZW50XG4gKi9cbmNvbnN0IGluaXRpYWxpemVFbGVtZW50cyA9IChyb290KSA9PiB7XG4gIHNldHRpbmdzRWxlbWVudCA9IHJvb3Q7XG4gIGNvbnN0IHsgc2hhZG93Um9vdCB9ID0gc2V0dGluZ3NFbGVtZW50O1xuICBwb3B1cEVsID0gc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcucG9wdXAnKTtcbiAgc2F2ZUJ1dHRvbiA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnNhdmUtYnV0dG9uJyk7XG4gIG92ZXJsYXkgPSBzaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJyNvdmVybGF5Jyk7XG4gIHNob3J0QnJlYWtJbnB1dCA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignI3Nob3J0LW51bWJlcicpO1xuICBsb25nQnJlYWtJbnB1dCA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignI2xvbmctbnVtYmVyJyk7XG4gIHNvdW5kSW5wdXQgPSBzaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJyNzb3VuZCcpO1xuICBlcnJvck1lc3NhZ2VzID0gc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yQWxsKCcuZXJyb3InKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBpbml0aWFsIHNldHRpbmdzIGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvb3QgLSBzZXR0aW5ncyBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzYXZlU2V0dGluZ3NDYWxsYmFjayAtIGNhbGxiYWNrIGZvciB3aGVuIHNldHRpbmdzIGFyZSBzYXZlZFxuICovXG5jb25zdCBpbml0aWFsaXplUG9wdXAgPSAocm9vdCwgc2F2ZVNldHRpbmdzQ2FsbGJhY2spID0+IHtcbiAgY29uc3QgeyBzaG9ydEJyZWFrTGVuZ3RoLCBsb25nQnJlYWtMZW5ndGggfSA9IGluaXRpYWxpemVJbnRlcnZhbExlbmd0aHMoKTtcbiAgaW5pdGlhbGl6ZUVsZW1lbnRzKHJvb3QpO1xuICBzZXRTaG9ydEJyZWFrTGVuZ3RoKHNob3J0QnJlYWtMZW5ndGgpO1xuICBzZXRMb25nQnJlYWtMZW5ndGgobG9uZ0JyZWFrTGVuZ3RoKTtcbiAgY29uc3Qgc2F2ZWRBdWRpbyA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGltZXJBdWRpbycpO1xuICBzZXRUaW1lckF1ZGlvKFxuICAgIGNoZWNrSWZUaW1lckF1ZGlvVmFsaWQoc2F2ZWRBdWRpbykgPyBzYXZlZEF1ZGlvIDogJ2Fzc2V0cy9jYWxtLWFsYXJtLm1wMycsXG4gICk7XG5cbiAgb3ZlcmxheS5vbmNsaWNrID0gY2xvc2VQb3B1cDtcblxuICBzYXZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGNvbnN0IG5ld0JyZWFrTGVuZ3RocyA9IHNhdmVTZXR0aW5ncygpO1xuICAgIGlmICghbmV3QnJlYWtMZW5ndGhzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNsb3NlUG9wdXAoKTtcbiAgICBzYXZlU2V0dGluZ3NDYWxsYmFjayguLi5uZXdCcmVha0xlbmd0aHMpO1xuICB9KTtcblxuICBzb3VuZElucHV0Lm9uY2hhbmdlID0gKCkgPT4ge1xuICAgIHRpbWVyQXVkaW8ucGF1c2UoKTtcbiAgICB0aW1lckF1ZGlvLnNyYyA9IHNvdW5kSW5wdXQudmFsdWU7XG4gICAgdGltZXJBdWRpby5wbGF5KCk7XG4gIH07XG59O1xuXG5leHBvcnQge1xuICBpbml0aWFsaXplUG9wdXAsXG4gIG9wZW5Qb3B1cCxcbiAgY2xvc2VQb3B1cCxcbiAgZ2V0U2hvcnRCcmVha0xlbmd0aCxcbiAgZ2V0TG9uZ0JyZWFrTGVuZ3RoLFxuICBnZXRUaW1lckF1ZGlvLFxuICBzZXRTaG9ydEJyZWFrTGVuZ3RoLFxuICBzZXRMb25nQnJlYWtMZW5ndGgsXG4gIHNldFRpbWVyQXVkaW8sXG59O1xuIiwiLyoqXG4gKiBAZmlsZSBNYW5hZ2UgZGlzcGxheWluZyBhbm5vdW5jZW1lbnRzXG4gKi9cblxubGV0IGFubm91bmNlbWVudENvbnRhaW5lcjtcbmxldCBhbm5vdW5jZW1lbnRFbGVtZW50O1xubGV0IHllc0J1dHRvbjtcbmxldCBub0J1dHRvbjtcblxuLyoqXG4gKiBJbml0aWFsaXplIGFubm91bmNlbWVudCBlbGVtZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBhbm5vdW5jZW1lbnRFbGVtZW50IC0gYW5ub3VuY2VtZW50IGVsZW1lbnRcbiAqL1xuY29uc3QgaW5pdGlhbGl6ZUFubm91bmNlbWVudCA9IChjb250YWluZXJFbGVtZW50KSA9PiB7XG4gIGFubm91bmNlbWVudENvbnRhaW5lciA9IGNvbnRhaW5lckVsZW1lbnQ7XG4gIGFubm91bmNlbWVudEVsZW1lbnQgPSBhbm5vdW5jZW1lbnRDb250YWluZXIucXVlcnlTZWxlY3RvcignLmFubm91bmNlbWVudCcpO1xuICB5ZXNCdXR0b24gPSBhbm5vdW5jZW1lbnRDb250YWluZXIucXVlcnlTZWxlY3RvcignLmFubm91bmNlbWVudC15ZXMtYnV0dG9uJyk7XG4gIG5vQnV0dG9uID0gYW5ub3VuY2VtZW50Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5hbm5vdW5jZW1lbnQtbm8tYnV0dG9uJyk7XG4gIHllc0J1dHRvbi5vbm1vdXNlZG93biA9IChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCk7XG4gIG5vQnV0dG9uLm9ubW91c2Vkb3duID0gKGUpID0+IGUucHJldmVudERlZmF1bHQoKTtcbn07XG5cbi8qKlxuICogU2V0IGFuIGFubm91bmNlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGFubm91bmNlbWVudCAtIGFubm91bmNlbWVudCB0byBkaXNwbGF5XG4gKi9cbmNvbnN0IHNldEFubm91bmNlbWVudCA9IChhbm5vdW5jZW1lbnQpID0+IHtcbiAgYW5ub3VuY2VtZW50RWxlbWVudC5pbm5lclRleHQgPSBhbm5vdW5jZW1lbnQ7XG59O1xuXG4vKipcbiAqIFNldCB5ZXMgYnV0dG9uIG9uIGNsaWNrIGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIHllcyBidXR0b24gb25jbGljayBjYWxsYmFja1xuICovXG5jb25zdCBzZXRZZXNCdXR0b25DYWxsYmFjayA9IChjYWxsYmFjaykgPT4ge1xuICB5ZXNCdXR0b24ub25jbGljayA9IGNhbGxiYWNrO1xufTtcblxuLyoqXG4gKiBTZXQgbm8gYnV0dG9uIG9uIGNsaWNrIGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIG5vIGJ1dHRvbiBvbmNsaWNrIGNhbGxiYWNrXG4gKi9cbmNvbnN0IHNldE5vQnV0dG9uQ2FsbGJhY2sgPSAoY2FsbGJhY2spID0+IHtcbiAgbm9CdXR0b24ub25jbGljayA9IGNhbGxiYWNrO1xufTtcblxuLyoqXG4gKiBUb2dnbGUgdmlzaWJpbGl0eSBvZiBidXR0b25zXG4gKiBAcGFyYW0geyd2aXNpYmxlJyB8ICdoaWRkZW4nfSB2aXNpYmlsaXR5IC0gYnV0dG9uIHZpc2liaWxpdHlcbiAqL1xuY29uc3Qgc2V0QnV0dG9uVmlzaWJpbGl0eSA9ICh2aXNpYmlsaXR5KSA9PiB7XG4gIGlmICh2aXNpYmlsaXR5ID09PSAndmlzaWJsZScpIHtcbiAgICB5ZXNCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgbm9CdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gIH0gZWxzZSB7XG4gICAgeWVzQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgIG5vQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICB9XG59O1xuXG5leHBvcnQge1xuICBpbml0aWFsaXplQW5ub3VuY2VtZW50LFxuICBzZXRBbm5vdW5jZW1lbnQsXG4gIHNldFllc0J1dHRvbkNhbGxiYWNrLFxuICBzZXROb0J1dHRvbkNhbGxiYWNrLFxuICBzZXRCdXR0b25WaXNpYmlsaXR5LFxufTtcbiIsIi8qKlxuICogQGZpbGUgTWFuYWdlIENvbmZpcm1hdGlvbiBQb3AtdXAgZm9yIHBhZ2VcbiAqL1xuXG5sZXQgY29uZmlybWF0aW9uT3ZlcmxheTtcbmxldCBjb25maXJtYXRpb25Qb3B1cDtcbmxldCBub0J1dHRvbjtcbmxldCB5ZXNCdXR0b247XG5cbi8qKlxuICogT3BlbiB0aGUgY29uZmlybWF0aW9uIHBvcHVwXG4gKi9cbmNvbnN0IG9wZW5Qb3B1cCA9ICgpID0+IHtcbiAgY29uZmlybWF0aW9uT3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbn07XG5cbi8qKlxuICogQ2xvc2UgdGhlIGNvbmZpcm1hdGlvbiBwb3B1cFxuICovXG5jb25zdCBjbG9zZVBvcHVwID0gKCkgPT4ge1xuICBjb25maXJtYXRpb25PdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGVsZW1lbnQgdmFyaWFibGVzIGZvciBkaWZmZXJlbnQgZWxlbWVudHMgb2YgY29uZmlybWF0aW9uIHBvcHVwXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByb290IC0gY29uZmlybWF0aW9uIHBvcHVwXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkFjY2VwdENhbGxiYWNrIC0gY2FsbGJhY2sgd2hlbiBjb25maXJtYXRpb24gaXMgYWNjZXB0ZWRcbiAqL1xuY29uc3QgaW5pdGlhbGl6ZUVsZW1lbnRzID0gKHJvb3QpID0+IHtcbiAgY29uZmlybWF0aW9uT3ZlcmxheSA9IHJvb3Q7XG4gIGNvbmZpcm1hdGlvblBvcHVwID0gY29uZmlybWF0aW9uT3ZlcmxheS5xdWVyeVNlbGVjdG9yKCcjY29uZmlybWF0aW9uLXBvcHVwJyk7XG4gIG5vQnV0dG9uID0gY29uZmlybWF0aW9uUG9wdXAucXVlcnlTZWxlY3RvcignLmNvbmZpcm1hdGlvbi1uby1idXR0b24nKTtcbiAgeWVzQnV0dG9uID0gY29uZmlybWF0aW9uUG9wdXAucXVlcnlTZWxlY3RvcignLmNvbmZpcm1hdGlvbi15ZXMtYnV0dG9uJyk7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgcG9wdXBcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvb3QgLSBjb25maXJtYXRpb24gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gb25BY2NlcHRDYWxsYmFjayAtIGNhbGxiYWNrIHdoZW4gY29uZmlybWF0aW9uIGlzIGFjY2VwdGVkXG4gKi9cbmNvbnN0IGluaXRpYWxpemVQb3B1cCA9IChyb290LCBvbkFjY2VwdENhbGxiYWNrKSA9PiB7XG4gIGluaXRpYWxpemVFbGVtZW50cyhyb290KTtcbiAgbm9CdXR0b24ub25tb3VzZWRvd24gPSAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB5ZXNCdXR0b24ub25tb3VzZWRvd24gPSAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB5ZXNCdXR0b24ub25jbGljayA9ICgpID0+IHtcbiAgICBjbG9zZVBvcHVwKCk7XG4gICAgb25BY2NlcHRDYWxsYmFjaygpO1xuICB9O1xuICBub0J1dHRvbi5vbmNsaWNrID0gY2xvc2VQb3B1cDtcbiAgY29uZmlybWF0aW9uT3ZlcmxheS5vbmNsaWNrID0gY2xvc2VQb3B1cDtcbiAgY29uZmlybWF0aW9uUG9wdXAub25jbGljayA9IChlKSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpO1xufTtcblxuZXhwb3J0IHsgaW5pdGlhbGl6ZVBvcHVwLCBvcGVuUG9wdXAsIGNsb3NlUG9wdXAgfTtcbiIsIi8qKlxuICogQGZpbGUgTWFuYWdlIFN1bW1hcnkgUG9wLXVwIGZvciBwYWdlXG4gKi9cblxuLyoqXG4gKiBBIHRhc2sgb2JqZWN0IGNvbnRhaW5pbmcgYSBuYW1lIGFuZCBwb21vZG9yb3Mgc3RhdHNcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFRhc2tcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lICAgICAgICAgICAgICAgIC0gbmFtZSBvZiB0aGUgdGFza1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHVzZWRQb21vZG9yb3MgICAgICAgLSBwb21vZG9yb3MgdXNlZCBzbyBmYXJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBlc3RpbWF0ZWRQb21vZG9yb3MgIC0gZXN0aW1hdGVkIG51bWJlciBvZiBwb21vcyBuZWVkZWRcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2VsZWN0ZWQgICAgICAgICAgIC0gd2hldGhlciB0YXNrIGlzIHNlbGVjdGVkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGNvbXBsZXRlZCAgICAgICAgICAtIHdoZXRoZXIgdGFzayBpcyBjb21wbGV0ZWRcbiAqL1xuXG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG5sZXQgc3VtbWFyeU92ZXJsYXk7XG5sZXQgc3VtbWFyeVBvcHVwO1xubGV0IHRhc2tTdW1tYXJ5TGlzdDtcbmxldCBhY3R1YWxQb21vc0VsZW1lbnQ7XG5sZXQgZXN0aW1hdGVkUG9tb3NFbGVtZW50O1xubGV0IGNsb3NlU3VtbWFyeUJ1dHRvbjtcblxuLyoqXG4gKiBPcGVuIHN1bW1hcnkgcG9wdXBcbiAqL1xuY29uc3Qgb3BlblBvcHVwID0gKCkgPT4ge1xuICBzdW1tYXJ5T3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbn07XG5cbi8qKlxuICogQ2xvc2Ugc3VtbWFyeSBwb3B1cFxuICovXG5jb25zdCBjbG9zZVBvcHVwID0gKCkgPT4ge1xuICBzdW1tYXJ5T3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgdGFza1N1bW1hcnlMaXN0LmlubmVySFRNTCA9ICcnO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgdGFzayBzdW1tYXJ5IGVsZW1lbnRcbiAqIEBwYXJhbSB7VGFza30gdGFzayAtIHRhc2sgdG8gc3VtbWFyaXplXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gLSB0YXNrIHN1bW1hcnkgZWxlbWVudFxuICovXG5jb25zdCBjcmVhdGVUYXNrU3VtbWFyeSA9ICh0YXNrKSA9PiB7XG4gIGNvbnN0IHsgbmFtZSwgdXNlZFBvbW9kb3JvcywgZXN0aW1hdGVkUG9tb2Rvcm9zLCBjb21wbGV0ZWQgfSA9IHRhc2s7XG5cbiAgY29uc3QgdGFza1N1bW1hcnkgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgY2xhc3NOYW1lOiBgdGFzay1zdW1tYXJ5LWl0ZW0gJHtjb21wbGV0ZWQgPyAnY29tcGxldGVkJyA6ICdpbmNvbXBsZXRlZCd9YCxcbiAgfSk7XG4gIGNvbnN0IG5hbWVFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICBjbGFzc05hbWU6ICd0YXNrLXN1bW1hcnktbmFtZScsXG4gICAgaW5uZXJUZXh0OiBuYW1lLFxuICB9KTtcbiAgY29uc3QgcG9tb2Rvcm9zRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgY2xhc3NOYW1lOiAndGFzay1zdW1tYXJ5LXBvbW9kb3JvcycsXG4gICAgaW5uZXJUZXh0OiBgJHt1c2VkUG9tb2Rvcm9zfS8ke2VzdGltYXRlZFBvbW9kb3Jvc31gLFxuICB9KTtcbiAgdGFza1N1bW1hcnkuYXBwZW5kKG5hbWVFbGVtZW50LCBwb21vZG9yb3NFbGVtZW50KTtcblxuICByZXR1cm4gdGFza1N1bW1hcnk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBzdW1tYXJ5IG9mIHRhc2tzXG4gKiBAcGFyYW0ge1Rhc2tbXX0gdGFza0xpc3QgLSB0YXNrcyB0byBzdW1tYXJpemVcbiAqL1xuY29uc3QgY3JlYXRlVGFza1N1bW1hcnlMaXN0ID0gKHRhc2tMaXN0KSA9PiB7XG4gIGNvbnN0IGNvbXBsZXRlZFRhc2tzID0gdGFza0xpc3QuZmlsdGVyKCh0YXNrKSA9PiB0YXNrLmNvbXBsZXRlZCk7XG4gIGNvbnN0IGluY29tcGxldGVkVGFza3MgPSB0YXNrTGlzdC5maWx0ZXIoKHRhc2spID0+ICF0YXNrLmNvbXBsZXRlZCk7XG4gIFsuLi5jb21wbGV0ZWRUYXNrcywgLi4uaW5jb21wbGV0ZWRUYXNrc10uZm9yRWFjaCgodGFzaykgPT4ge1xuICAgIGNvbnN0IHRhc2tTdW1tYXJ5ID0gY3JlYXRlVGFza1N1bW1hcnkodGFzayk7XG4gICAgdGFza1N1bW1hcnlMaXN0LmFwcGVuZCh0YXNrU3VtbWFyeSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gQWNjZXNzIGFsbCB0aGUgc2hhZG93IHJvb3QgZWxlbWVudHMgYW5kIHNldCB0aGUgc3VtbWFyeSBlbGVtZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByb290IC0gdGhlIHN1bW1hcnkgZWxlbWVudFxuICovXG5jb25zdCBpbml0aWFsaXplRWxlbWVudHMgPSAocm9vdCkgPT4ge1xuICBzdW1tYXJ5T3ZlcmxheSA9IHJvb3Q7XG4gIHN1bW1hcnlQb3B1cCA9IHN1bW1hcnlPdmVybGF5LnF1ZXJ5U2VsZWN0b3IoJyNzdW1tYXJ5LXBvcHVwJyk7XG4gIHRhc2tTdW1tYXJ5TGlzdCA9IHN1bW1hcnlPdmVybGF5LnF1ZXJ5U2VsZWN0b3IoJy50YXNrLXN1bW1hcnktbGlzdCcpO1xuICBhY3R1YWxQb21vc0VsZW1lbnQgPSBzdW1tYXJ5T3ZlcmxheS5xdWVyeVNlbGVjdG9yKCcuc3VtbWFyeS1hY3R1YWwtcG9tb3MnKTtcbiAgZXN0aW1hdGVkUG9tb3NFbGVtZW50ID0gc3VtbWFyeU92ZXJsYXkucXVlcnlTZWxlY3RvcihcbiAgICAnLnN1bW1hcnktZXN0aW1hdGVkLXBvbW9zJyxcbiAgKTtcbiAgY2xvc2VTdW1tYXJ5QnV0dG9uID0gc3VtbWFyeU92ZXJsYXkucXVlcnlTZWxlY3RvcignLnN1bW1hcnktY2xvc2UtYnV0dG9uJyk7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgcG9wdXBcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvb3QgLSBzdW1tYXJ5IHBvcHVwIGVsZW1lbnRcbiAqIEBwYXJhbSB7VGFza1tdfSB0YXNrcyAtIHRhc2tzIHRvIHN1bW1hcml6ZVxuICovXG5jb25zdCBpbml0aWFsaXplUG9wdXAgPSAocm9vdCwgdGFza3MpID0+IHtcbiAgaW5pdGlhbGl6ZUVsZW1lbnRzKHJvb3QpO1xuICBjcmVhdGVUYXNrU3VtbWFyeUxpc3QodGFza3MpO1xuICBjb25zdCB7IGFjdHVhbCwgZXN0aW1hdGVkIH0gPSB0YXNrcy5yZWR1Y2UoXG4gICAgKGFjYywgdGFzaykgPT4gKHtcbiAgICAgIGFjdHVhbDogYWNjLmFjdHVhbCArIHRhc2sudXNlZFBvbW9kb3JvcyxcbiAgICAgIGVzdGltYXRlZDogYWNjLmVzdGltYXRlZCArIHRhc2suZXN0aW1hdGVkUG9tb2Rvcm9zLFxuICAgIH0pLFxuICAgIHsgYWN0dWFsOiAwLCBlc3RpbWF0ZWQ6IDAgfSxcbiAgKTtcbiAgYWN0dWFsUG9tb3NFbGVtZW50LmlubmVyVGV4dCA9IGBBY3R1YWw6ICR7YWN0dWFsfWA7XG4gIGVzdGltYXRlZFBvbW9zRWxlbWVudC5pbm5lclRleHQgPSBgRXN0aW1hdGVkOiAke2VzdGltYXRlZH1gO1xuXG4gIGNsb3NlU3VtbWFyeUJ1dHRvbi5vbmNsaWNrID0gY2xvc2VQb3B1cDtcbiAgY2xvc2VTdW1tYXJ5QnV0dG9uLm9ubW91c2Vkb3duID0gKGUpID0+IGUucHJldmVudERlZmF1bHQoKTtcbiAgc3VtbWFyeU92ZXJsYXkub25jbGljayA9IGNsb3NlUG9wdXA7XG4gIHN1bW1hcnlQb3B1cC5vbmNsaWNrID0gKGUpID0+IGUuc3RvcFByb3BhZ2F0aW9uKCk7XG59O1xuXG5leHBvcnQgeyBpbml0aWFsaXplUG9wdXAsIG9wZW5Qb3B1cCwgY2xvc2VQb3B1cCB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tYXdhaXQtaW4tbG9vcCAqL1xuLyoqXG4gKiBAZmlsZSBFbnRyeSBwb2ludCBmb3IgYXBwbGljYXRpb25cbiAqL1xuXG5pbXBvcnQgJy4uL3N0eWxlcy9zdHlsZS5jc3MnO1xuaW1wb3J0IHtcbiAgVGltZXIsXG4gIFByb2dyZXNzUmluZyxcbiAgVGFza0xpc3QsXG4gIFBvbW9kb3JvQ2lyY2xlcyxcbiAgU2V0dGluZ3MsXG59IGZyb20gJy4uL2NvbXBvbmVudHMnO1xuaW1wb3J0IHtcbiAgY29tcGxldGVUYXNrLFxuICBkZXNlbGVjdEFsbFRhc2tzLFxuICBnZXRDdXJyZW50bHlTZWxlY3RlZFRhc2ssXG4gIGdldFRhc2tzLFxuICBpbmNyZW1lbnRQb21vZG9ybyxcbiAgaW5pdGlhbGl6ZVRhc2tMaXN0LFxuICBzZWxlY3RGaXJzdFRhc2ssXG4gIHNldFRhc2tsaXN0VXNhYmlsaXR5LFxufSBmcm9tICcuL3Rhc2tMaXN0JztcbmltcG9ydCB7IGluaXRpYWxpemVQcm9ncmVzc1JpbmcsIHNldFByb2dyZXNzIH0gZnJvbSAnLi9wcm9ncmVzc1JpbmcnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZVRpbWVyLCBzZXRUaW1lciB9IGZyb20gJy4vdGltZXInO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZVBvbW9kb3JvQ2lyY2xlcyB9IGZyb20gJy4vcG9tb2Rvcm9DaXJjbGVzJztcbmltcG9ydCB7XG4gIGluaXRpYWxpemVQb3B1cCBhcyBpbml0aWFsaXplU2V0dGluZ3NQb3B1cCxcbiAgb3BlblBvcHVwIGFzIG9wZW5TZXR0aW5nc1BvcHVwLFxuICBnZXRTaG9ydEJyZWFrTGVuZ3RoLFxuICBnZXRMb25nQnJlYWtMZW5ndGgsXG4gIGdldFRpbWVyQXVkaW8sXG59IGZyb20gJy4vc2V0dGluZ3MnO1xuaW1wb3J0IHtcbiAgaW5pdGlhbGl6ZUFubm91bmNlbWVudCxcbiAgc2V0QW5ub3VuY2VtZW50LFxuICBzZXRZZXNCdXR0b25DYWxsYmFjayBhcyBzZXRBbm5vdW5jZW1lbnRZZXNCdXR0b25DYWxsYmFjayxcbiAgc2V0Tm9CdXR0b25DYWxsYmFjayBhcyBzZXRBbm5vdW5jZW1lbnROb0J1dHRvbkNhbGxiYWNrLFxuICBzZXRCdXR0b25WaXNpYmlsaXR5LFxufSBmcm9tICcuL2Fubm91bmNlbWVudCc7XG5pbXBvcnQge1xuICBpbml0aWFsaXplUG9wdXAgYXMgaW5pdGlhbGl6ZUNvbmZpcm1hdGlvblBvcHVwLFxuICBvcGVuUG9wdXAgYXMgb3BlbkNvbmZpcm1hdGlvblBvcHVwLFxufSBmcm9tICcuL2NvbmZpcm1hdGlvblBvcHVwJztcbmltcG9ydCB7XG4gIGluaXRpYWxpemVQb3B1cCBhcyBpbml0aWFsaXplU3VtbWFyeVBvcHVwLFxuICBvcGVuUG9wdXAgYXMgb3BlblN1bW1hcnlQb3B1cCxcbn0gZnJvbSAnLi9zdW1tYXJ5UG9wdXAnO1xuaW1wb3J0IHtcbiAgUE9NT0RPUk9fQU5OT1VOQ0VNRU5ULFxuICBTSE9SVF9CUkVBS19BTk5PVU5DRU1FTlQsXG4gIExPTkdfQlJFQUtfQU5OT1VOQ0VNRU5ULFxuICBQT01PRE9ST19JTlRFUlZBTCxcbiAgU0hPUlRfQlJFQUtfSU5URVJWQUwsXG4gIExPTkdfQlJFQUtfSU5URVJWQUwsXG4gIEVORF9PRl9TRVNTSU9OX0FOTk9VTkNFTUVOVCxcbiAgVEFTS19DT01QTEVUSU9OX1FVRVNUSU9OLFxuICBOT19UQVNLU19BTk5PVU5DRU1FTlQsXG4gIERFRkFVTFRfUE9NT0RPUk9fSU5URVJWQUwsXG59IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyB0aWNrIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3RpbWVyLWNvbXBvbmVudCcsIFRpbWVyKTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgncHJvZ3Jlc3MtcmluZycsIFByb2dyZXNzUmluZyk7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3Rhc2stbGlzdCcsIFRhc2tMaXN0KTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnc2V0dGluZ3MtY29tcG9uZW50JywgU2V0dGluZ3MpO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdwb21vZG9yby1jaXJjbGVzJywgUG9tb2Rvcm9DaXJjbGVzKTtcblxubGV0IGlzU2Vzc2lvbk9uZ29pbmcgPSBmYWxzZTtcbmxldCBwb21vZG9yb0xlbmd0aCA9IERFRkFVTFRfUE9NT0RPUk9fSU5URVJWQUw7XG5wb21vZG9yb0xlbmd0aCA9IDAuMTtcbmxldCBzaG9ydEJyZWFrTGVuZ3RoO1xubGV0IGxvbmdCcmVha0xlbmd0aDtcbmNvbnN0IHRpbWVyQXVkaW8gPSBuZXcgQXVkaW8oKTtcbnRpbWVyQXVkaW8udm9sdW1lID0gMC4yO1xuXG4vKipcbiAqIFN0YXJ0cyBhbmQgcnVucyBpbnRlcnZhbCB1bnRpbCBpbnRlcnZhbCBpcyBjb21wbGV0ZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbExlbmd0aCAtIGxlbmd0aCBvZiBpbnRlcnZhbCAoaW4gc2Vjb25kcylcbiAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IC0gaW1wbGljaXRseSByZXR1cm5zIFByb21pc2UgYWZ0ZXIgY3VyclRpbWUgcmVhY2hlcyAwXG4gKi9cbmNvbnN0IHN0YXJ0SW50ZXJ2YWwgPSBhc3luYyAoaW50ZXJ2YWxMZW5ndGgpID0+IHtcbiAgbGV0IGN1cnJUaW1lID0gaW50ZXJ2YWxMZW5ndGg7XG4gIHdoaWxlIChjdXJyVGltZSA+PSAwKSB7XG4gICAgLy8gcXVpdCBpZiBzZXNzaW9uIHN0b3BzXG4gICAgaWYgKCFpc1Nlc3Npb25PbmdvaW5nKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGN1cnJQcm9ncmVzcyA9ICgxMDAgKiBjdXJyVGltZSkgLyBpbnRlcnZhbExlbmd0aDtcbiAgICBzZXRUaW1lcihjdXJyVGltZSk7XG4gICAgc2V0UHJvZ3Jlc3MoY3VyclByb2dyZXNzKTtcbiAgICBhd2FpdCB0aWNrKDEpO1xuICAgIGN1cnJUaW1lLS07XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgcG9tb2Rvcm8gYXBwLCBkaXNwYXRjaGVzIGFjdGlvbnMgdG8gY29tcG9uZW50cyBkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnQgaW50ZXJ2YWxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNoYW5nZVNlc3Npb25CdXR0b24gLSBjaGFuZ2VzIHNlc3Npb24gYnV0dG9uIGZyb20gc3RhcnQgdG8gZW5kXG4gKiBAcmV0dXJuIHtQcm9taXNlPG51bWJlcj59IC0gbnVtYmVyIG9mIHBvbW9kb3JvcyBjb21wbGV0ZWQgZHVyaW5nIHNlc3Npb24sIC0xIGlmIG5vIHRhc2tzIGFyZSBhdmFpbGFibGUgYXQgdGhlIHN0YXJ0IG9mIHRoZSBzZXNzaW9uXG4gKi9cbmNvbnN0IHN0YXJ0U2Vzc2lvbiA9IGFzeW5jIChjaGFuZ2VTZXNzaW9uQnV0dG9uKSA9PiB7XG4gIGxldCBudW1Qb21vZG9yb3MgPSAwO1xuICBsZXQgY3VyckludGVydmFsID0gUE9NT0RPUk9fSU5URVJWQUw7XG4gIGxldCBjdXJyU2VsZWN0ZWRUYXNrID0gbnVsbDtcblxuICAvLyBjb250aW51ZSBsb29waW5nIGlmIHNlc3Npb24gaGFzIG5vdCBiZWVuIGVuZGVkXG4gIHdoaWxlIChpc1Nlc3Npb25PbmdvaW5nKSB7XG4gICAgaWYgKGN1cnJJbnRlcnZhbCA9PT0gUE9NT0RPUk9fSU5URVJWQUwpIHtcbiAgICAgIC8vIHVzZSBwcmV2aW91cyBjdXJyVGFzayBvciBuZXh0IGF2YWlsYWJsZVxuICAgICAgY3VyclNlbGVjdGVkVGFzayA9IGdldEN1cnJlbnRseVNlbGVjdGVkVGFzaygpO1xuICAgICAgaWYgKCFjdXJyU2VsZWN0ZWRUYXNrKSB7XG4gICAgICAgIGN1cnJTZWxlY3RlZFRhc2sgPSBzZWxlY3RGaXJzdFRhc2soKTtcbiAgICAgIH1cblxuICAgICAgLy8gc3RvcCBpZiBubyB0YXNrcyBhdmFpbGFibGVcbiAgICAgIGlmICghY3VyclNlbGVjdGVkVGFzaykge1xuICAgICAgICByZXR1cm4gbnVtUG9tb2Rvcm9zID09PSAwID8gLTEgOiBudW1Qb21vZG9yb3M7XG4gICAgICB9XG5cbiAgICAgIC8vIGNoYW5nZSBzZXNzaW9uIGJ1dHRvbiB0byBlbmQgd2hlbiBmaXJzdCBwb21vIHN0YXJ0c1xuICAgICAgaWYgKG51bVBvbW9kb3JvcyA9PT0gMCkge1xuICAgICAgICBjaGFuZ2VTZXNzaW9uQnV0dG9uKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGRpc2FibGUgdGFza2xpc3RcbiAgICAgIHNldFRhc2tsaXN0VXNhYmlsaXR5KGZhbHNlKTtcbiAgICAgIHNldEFubm91bmNlbWVudChQT01PRE9ST19BTk5PVU5DRU1FTlQpO1xuXG4gICAgICB0aW1lckF1ZGlvLnBhdXNlKCk7XG4gICAgICAvLyBzdGFydCBwb21vZG9ybywgc3RvcCBpZiBpbnRlcnZhbCBpcyBpbnRlcnJ1cHRlZFxuICAgICAgY29uc3Qgc2hvdWxkQ29udGludWUgPSBhd2FpdCBzdGFydEludGVydmFsKDYwICogcG9tb2Rvcm9MZW5ndGgpO1xuICAgICAgaWYgKCFzaG91bGRDb250aW51ZSkge1xuICAgICAgICByZXR1cm4gbnVtUG9tb2Rvcm9zO1xuICAgICAgfVxuXG4gICAgICBjdXJyU2VsZWN0ZWRUYXNrID0gaW5jcmVtZW50UG9tb2Rvcm8oY3VyclNlbGVjdGVkVGFzayk7IC8vIGluY3JlbWVudCB0YXNrXG4gICAgICB0aW1lckF1ZGlvLnNyYyA9IGdldFRpbWVyQXVkaW8oKTtcbiAgICAgIHRpbWVyQXVkaW8ucGxheSgpO1xuXG4gICAgICAvLyBjaGVjayBpZiBicmVhayBzaG91bGQgYmUgc2hvcnQgb3IgbG9uZ1xuICAgICAgbnVtUG9tb2Rvcm9zKys7XG4gICAgICBjb25zdCBzaG91bGRCZUxvbmdCcmVhayA9IG51bVBvbW9kb3JvcyA+IDAgJiYgbnVtUG9tb2Rvcm9zICUgNCA9PT0gMDtcbiAgICAgIGN1cnJJbnRlcnZhbCA9IHNob3VsZEJlTG9uZ0JyZWFrXG4gICAgICAgID8gTE9OR19CUkVBS19JTlRFUlZBTFxuICAgICAgICA6IFNIT1JUX0JSRUFLX0lOVEVSVkFMO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBwcm9tcHQgdXNlclxuICAgICAgc2V0QnV0dG9uVmlzaWJpbGl0eSgndmlzaWJsZScpO1xuICAgICAgc2V0QW5ub3VuY2VtZW50KFRBU0tfQ09NUExFVElPTl9RVUVTVElPTik7XG5cbiAgICAgIC8vIGNvcHkgY3VyciBzZWxlY3RlZCB0YXNrIGR1ZSB0byB3ZWlyZCBsb29wIGNsb3N1cmVzXG4gICAgICBjb25zdCBjdXJyU2VsZWN0ZWRUYXNrQ29weSA9IGN1cnJTZWxlY3RlZFRhc2s7XG4gICAgICBjb25zdCBjdXJyQW5ub3VuY2VtZW50ID1cbiAgICAgICAgY3VyckludGVydmFsID09PSBMT05HX0JSRUFLX0FOTk9VTkNFTUVOVFxuICAgICAgICAgID8gTE9OR19CUkVBS19BTk5PVU5DRU1FTlRcbiAgICAgICAgICA6IFNIT1JUX0JSRUFLX0FOTk9VTkNFTUVOVDtcblxuICAgICAgbGV0IHdhc0Fubm91bmNlbWVudEJ1dHRvbkNsaWNrZWQgPSBmYWxzZTtcbiAgICAgIHNldEFubm91bmNlbWVudFllc0J1dHRvbkNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgY29tcGxldGVUYXNrKGN1cnJTZWxlY3RlZFRhc2tDb3B5KTtcbiAgICAgICAgc2VsZWN0Rmlyc3RUYXNrKCk7XG4gICAgICAgIHNldEFubm91bmNlbWVudChjdXJyQW5ub3VuY2VtZW50KTtcbiAgICAgICAgc2V0QnV0dG9uVmlzaWJpbGl0eSgnaGlkZGVuJyk7XG4gICAgICAgIHdhc0Fubm91bmNlbWVudEJ1dHRvbkNsaWNrZWQgPSB0cnVlO1xuICAgICAgICBzZXRUYXNrbGlzdFVzYWJpbGl0eSh0cnVlKTtcbiAgICAgIH0pO1xuICAgICAgc2V0QW5ub3VuY2VtZW50Tm9CdXR0b25DYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHNldEFubm91bmNlbWVudChjdXJyQW5ub3VuY2VtZW50KTtcbiAgICAgICAgc2V0QnV0dG9uVmlzaWJpbGl0eSgnaGlkZGVuJyk7XG4gICAgICAgIHdhc0Fubm91bmNlbWVudEJ1dHRvbkNsaWNrZWQgPSB0cnVlO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHN0YXJ0IGJyZWFrLCBzdG9wIGlmIGludGVydmFsIGlzIGludGVycnVwdGVkXG4gICAgICBjb25zdCBzaG91bGRDb250aW51ZSA9IGF3YWl0IHN0YXJ0SW50ZXJ2YWwoXG4gICAgICAgIGN1cnJJbnRlcnZhbCA9PT0gTE9OR19CUkVBS19JTlRFUlZBTFxuICAgICAgICAgID8gNjAgKiBsb25nQnJlYWtMZW5ndGhcbiAgICAgICAgICA6IDYwICogc2hvcnRCcmVha0xlbmd0aCxcbiAgICAgICk7XG4gICAgICBpZiAoIXNob3VsZENvbnRpbnVlKSB7XG4gICAgICAgIHJldHVybiBudW1Qb21vZG9yb3M7XG4gICAgICB9XG5cbiAgICAgIC8vIGhpZGUgYnV0dG9ucyBpZiB0aGV5IGFyZW4ndCBjbGlja2VkXG4gICAgICBpZiAoIXdhc0Fubm91bmNlbWVudEJ1dHRvbkNsaWNrZWQpIHtcbiAgICAgICAgc2V0QnV0dG9uVmlzaWJpbGl0eSgnaGlkZGVuJyk7XG4gICAgICB9XG4gICAgICBjdXJySW50ZXJ2YWwgPSBQT01PRE9ST19JTlRFUlZBTDtcbiAgICB9XG5cbiAgICAvLyByZXNldCBwcm9ncmVzcyBhbmQgZ2l2ZSBpdCB0aW1lIHRvIHJlc2V0IChwcm9ncmVzcy1yaW5nIHRyYW5zaXRpb24gaXMgMzVzKVxuICAgIHNldFByb2dyZXNzKDEwMCk7XG4gICAgYXdhaXQgdGljaygwLjUpO1xuICB9XG4gIHJldHVybiBudW1Qb21vZG9yb3M7XG59O1xuXG4vKipcbiAqIEhhbmRsZSBlbmQgb2Ygc2Vzc2lvblxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gc2Vzc2lvbkJ1dHRvbiAtIHNlc3Npb24gYnV0dG9uIGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1Qb21vZG9yb3MgLSBudW1iZXIgb2YgcG9tb2Rvcm9zIGNvbXBsZXRlZCBkdXJpbmcgdGhlIHNlc3Npb25cbiAqL1xuY29uc3QgZW5kU2Vzc2lvbiA9IChzZXNzaW9uQnV0dG9uLCBudW1Qb21vZG9yb3MpID0+IHtcbiAgc2V0QW5ub3VuY2VtZW50KFxuICAgIG51bVBvbW9kb3JvcyA9PT0gLTEgPyBOT19UQVNLU19BTk5PVU5DRU1FTlQgOiBFTkRfT0ZfU0VTU0lPTl9BTk5PVU5DRU1FTlQsXG4gICk7XG4gIGRlc2VsZWN0QWxsVGFza3MoKTtcbiAgc2Vzc2lvbkJ1dHRvbi5pbm5lclRleHQgPSAnU3RhcnQnO1xuICBzZXNzaW9uQnV0dG9uLmNsYXNzTmFtZSA9ICdzZXNzaW9uLWJ1dHRvbic7XG4gIGluaXRpYWxpemVTdW1tYXJ5UG9wdXAoXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N1bW1hcnktb3ZlcmxheScpLFxuICAgIGdldFRhc2tzKCksXG4gICk7XG4gIG9wZW5TdW1tYXJ5UG9wdXAoKTtcbn07XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICBjb25zdCBzZXR0aW5nc0ljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ3MtaWNvbicpO1xuICBjb25zdCBwcm9ncmVzc1JpbmdFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2dyZXNzLXJpbmcnKTtcbiAgY29uc3QgdGltZXJFbGVtZW50ID0gcHJvZ3Jlc3NSaW5nRWxlbWVudC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy50aW1lcicpO1xuICBjb25zdCBjaXJjbGVzRWxlbWVudCA9IHByb2dyZXNzUmluZ0VsZW1lbnQuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKFxuICAgICcuY2lyY2xlcycsXG4gICk7XG4gIGNvbnN0IHNlc3Npb25CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2Vzc2lvbi1idXR0b24nKTtcbiAgY29uc3QgYW5ub3VuY2VtZW50RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hbm5vdW5jZW1lbnQtY29udGFpbmVyJyk7XG4gIGNvbnN0IHRhc2tMaXN0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrLWxpc3QnKTtcbiAgY29uc3QgY29uZmlybWF0aW9uT3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb25maXJtYXRpb24tb3ZlcmxheScpO1xuICBjb25zdCBzZXR0aW5nc0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ3MnKTtcblxuICBjb25zdCBzYXZlU2V0dGluZ3NDYWxsYmFjayA9IChuZXdTaG9ydEJyZWFrTGVuZ3RoLCBuZXdMb25nQnJlYWtMZW5ndGgpID0+IHtcbiAgICBzaG9ydEJyZWFrTGVuZ3RoID0gbmV3U2hvcnRCcmVha0xlbmd0aDtcbiAgICBsb25nQnJlYWtMZW5ndGggPSBuZXdMb25nQnJlYWtMZW5ndGg7XG4gIH07XG5cbiAgaW5pdGlhbGl6ZVByb2dyZXNzUmluZyhwcm9ncmVzc1JpbmdFbGVtZW50KTtcbiAgaW5pdGlhbGl6ZVRpbWVyKHRpbWVyRWxlbWVudCk7XG4gIGluaXRpYWxpemVQb21vZG9yb0NpcmNsZXMoY2lyY2xlc0VsZW1lbnQpO1xuICBpbml0aWFsaXplQW5ub3VuY2VtZW50KGFubm91bmNlbWVudEVsZW1lbnQpO1xuICBpbml0aWFsaXplVGFza0xpc3QodGFza0xpc3RFbGVtZW50KTtcbiAgaW5pdGlhbGl6ZUNvbmZpcm1hdGlvblBvcHVwKGNvbmZpcm1hdGlvbk92ZXJsYXksICgpID0+IHtcbiAgICBpc1Nlc3Npb25PbmdvaW5nID0gZmFsc2U7XG4gIH0pO1xuICBpbml0aWFsaXplU2V0dGluZ3NQb3B1cChzZXR0aW5nc0VsZW1lbnQsIHNhdmVTZXR0aW5nc0NhbGxiYWNrKTtcblxuICAvLyBhZGp1c3QgbmF2IGJhciBjb2xvciBvbiBzY3JvbGxcbiAgY29uc3QgbmF2QmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmJhcicpO1xuICB3aW5kb3cub25zY3JvbGwgPSAoKSA9PiB7XG4gICAgaWYgKHdpbmRvdy5zY3JvbGxZID09PSAwKSB7XG4gICAgICBuYXZCYXIuY2xhc3NMaXN0LnJlbW92ZSgnc2Nyb2xsZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmF2QmFyLmNsYXNzTGlzdC5hZGQoJ3Njcm9sbGVkJyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIGluaXRpYWxpemUgdmFyaWFibGVzLCBldmVudCBsaXN0ZW5lcnMsIGFuZCBjb21wb25lbnQgdmFsdWVzXG4gIHNob3J0QnJlYWtMZW5ndGggPSBnZXRTaG9ydEJyZWFrTGVuZ3RoKCk7XG4gIGxvbmdCcmVha0xlbmd0aCA9IGdldExvbmdCcmVha0xlbmd0aCgpO1xuICBzZXR0aW5nc0ljb24ub25jbGljayA9IG9wZW5TZXR0aW5nc1BvcHVwO1xuICBzZXNzaW9uQnV0dG9uLm9ubW91c2Vkb3duID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH07XG4gIHRpbWVyRWxlbWVudC5vbmNsaWNrID0gKCkgPT4gdGltZXJBdWRpby5wYXVzZSgpO1xuICBzZXRUaW1lcig2MCAqIHBvbW9kb3JvTGVuZ3RoKTtcbiAgZGVzZWxlY3RBbGxUYXNrcygpO1xuXG4gIC8vIHN0YXJ0IHNlc3Npb24gd2hlbiBzdGFydCBidXR0b24gaXMgY2xpY2tlZFxuICBzZXNzaW9uQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgIGlmIChzZXNzaW9uQnV0dG9uLmlubmVyVGV4dCA9PT0gJ1N0YXJ0Jykge1xuICAgICAgaXNTZXNzaW9uT25nb2luZyA9IHRydWU7XG4gICAgICBjb25zdCBjaGFuZ2VTZXNzaW9uQnV0dG9uID0gKCkgPT4ge1xuICAgICAgICBzZXNzaW9uQnV0dG9uLmlubmVyVGV4dCA9ICdFbmQnO1xuICAgICAgICBzZXNzaW9uQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3Nlc3Npb24tYnV0dG9uJywgJ2luLXNlc3Npb24nKTtcbiAgICAgIH07XG4gICAgICBjb25zdCBudW1Qb21vZG9yb3MgPSBhd2FpdCBzdGFydFNlc3Npb24oY2hhbmdlU2Vzc2lvbkJ1dHRvbik7XG5cbiAgICAgIC8vIHJlZW5hYmxlIHRhc2tsaXN0IGFuZCBoaWRlIGFubm91bmNlbWVudHNcbiAgICAgIHNldFRhc2tsaXN0VXNhYmlsaXR5KHRydWUpO1xuICAgICAgc2V0QnV0dG9uVmlzaWJpbGl0eSgnaGlkZGVuJyk7XG5cbiAgICAgIC8vIHJlc2V0IHByb2dyZXNzIGFuZCB0aW1lXG4gICAgICBzZXRQcm9ncmVzcygxMDApO1xuICAgICAgc2V0VGltZXIoNjAgKiBwb21vZG9yb0xlbmd0aCk7XG5cbiAgICAgIGVuZFNlc3Npb24oc2Vzc2lvbkJ1dHRvbiwgbnVtUG9tb2Rvcm9zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3BlbkNvbmZpcm1hdGlvblBvcHVwKCk7XG4gICAgfVxuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==