(()=>{var t={228:t=>{t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}},858:t=>{t.exports=function(t){if(Array.isArray(t))return t}},646:(t,e,n)=>{var r=n(228);t.exports=function(t){if(Array.isArray(t))return r(t)}},506:t=>{t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},926:t=>{function e(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}t.exports=function(t){return function(){var n=this,r=arguments;return new Promise((function(o,i){var a=t.apply(n,r);function s(t){e(a,o,i,s,c,"next",t)}function c(t){e(a,o,i,s,c,"throw",t)}s(void 0)}))}}},575:t=>{t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},100:(t,e,n)=>{var r=n(489),o=n(67);function i(e,n,a){return o()?t.exports=i=Reflect.construct:t.exports=i=function(t,e,n){var o=[null];o.push.apply(o,e);var i=new(Function.bind.apply(t,o));return n&&r(i,n.prototype),i},i.apply(null,arguments)}t.exports=i},913:t=>{function e(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}},713:t=>{t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},754:t=>{function e(n){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},e(n)}t.exports=e},205:(t,e,n)=>{var r=n(489);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&r(t,e)}},430:t=>{t.exports=function(t){return-1!==Function.toString.call(t).indexOf("[native code]")}},67:t=>{t.exports=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}},860:t=>{t.exports=function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}},884:t=>{t.exports=function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}}},521:t=>{t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},206:t=>{t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},585:(t,e,n)=>{var r=n(8),o=n(506);t.exports=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?o(t):e}},489:t=>{function e(n,r){return t.exports=e=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},e(n,r)}t.exports=e},38:(t,e,n)=>{var r=n(858),o=n(884),i=n(379),a=n(521);t.exports=function(t,e){return r(t)||o(t,e)||i(t,e)||a()}},319:(t,e,n)=>{var r=n(646),o=n(860),i=n(379),a=n(206);t.exports=function(t){return r(t)||o(t)||i(t)||a()}},8:t=>{function e(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=e=function(t){return typeof t}:t.exports=e=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(n)}t.exports=e},379:(t,e,n)=>{var r=n(228);t.exports=function(t,e){if(t){if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(t,e):void 0}}},957:(t,e,n)=>{var r=n(754),o=n(489),i=n(430),a=n(100);function s(e){var n="function"==typeof Map?new Map:void 0;return t.exports=s=function(t){if(null===t||!i(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(t))return n.get(t);n.set(t,e)}function e(){return a(t,arguments,r(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o(e,t)},s(e)}t.exports=s},757:(t,e,n)=>{t.exports=n(666)},666:t=>{var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,n){return t[e]=n}}function u(t,e,n,r){var o=e&&e.prototype instanceof y?e:y,i=Object.create(o.prototype),a=new _(r||[]);return i._invoke=function(t,e,n){var r=p;return function(o,i){if(r===m)throw new Error("Generator is already running");if(r===f){if("throw"===o)throw i;return N()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=L(a,n);if(s){if(s===h)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===p)throw r=f,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=m;var c=l(t,e,n);if("normal"===c.type){if(r=n.done?f:d,c.arg===h)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=f,n.method="throw",n.arg=c.arg)}}}(t,n,a),i}function l(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var p="suspendedStart",d="suspendedYield",m="executing",f="completed",h={};function y(){}function b(){}function v(){}var g={};g[i]=function(){return this};var k=Object.getPrototypeOf,x=k&&k(k(A([])));x&&x!==n&&r.call(x,i)&&(g=x);var w=v.prototype=y.prototype=Object.create(g);function E(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function S(t,e){function n(o,i,a,s){var c=l(t[o],t,i);if("throw"!==c.type){var u=c.arg,p=u.value;return p&&"object"==typeof p&&r.call(p,"__await")?e.resolve(p.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(p).then((function(t){u.value=t,a(u)}),(function(t){return n("throw",t,a,s)}))}s(c.arg)}var o;this._invoke=function(t,r){function i(){return new e((function(e,o){n(t,r,e,o)}))}return o=o?o.then(i,i):i()}}function L(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=l(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function C(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function _(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(C,this),this.reset(!0)}function A(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}return{next:N}}function N(){return{value:e,done:!0}}return b.prototype=w.constructor=v,v.constructor=b,b.displayName=c(v,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,c(t,s,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},E(S.prototype),S.prototype[a]=function(){return this},t.AsyncIterator=S,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new S(u(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},E(w),c(w,s,"Generator"),w[i]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=A,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return s.type="throw",s.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),O(n),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:A(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),h}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}}},e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(8),e=n.n(t),r=n(926),o=n.n(r),i=n(757),a=n.n(i),s=n(575),c=n.n(s),u=n(913),l=n.n(u),p=n(205),d=n.n(p),m=n(585),f=n.n(m),h=n(754),y=n.n(h),b=n(957),v=n.n(b),g=n(38),k=n.n(g),x=function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=r.namespace;return e=o?document.createElementNS(o,t):document.createElement(t),Object.entries(n).forEach((function(t){var n=k()(t,2),r=n[0],i=n[1];o||!(r in e)?e.setAttribute(r,i):e[r]=i})),e},w=function(t){return"string"==typeof t||t instanceof String?t:null},E=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n="number"==typeof t||t instanceof Number||null!==w(t),r=Number(t);return!n||Number.isNaN(r)?null:e?Math.floor(r):r},S=function(){var t=o()(a().mark((function t(e){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise((function(t){return setTimeout(t,1e3*e)})));case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}();var L=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=y()(e);if(n){var o=y()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this)).usedPomodoros=0,t.estimatedPomodoros=0,t.shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .item-container {\n        margin-bottom: 1em;\n        padding: 0.5em 2em;\n        border-radius: 5px;\n        position: relative;\n        cursor: pointer;\n      }\n\n      .item-container:focus {\n        outline: none;\n      }\n\n      .item-container.selected {\n        background: #90e0ef;\n      }\n\n      .text-container {\n        background: rgba(255, 255, 255, 1);\n        color: #555;\n        position: relative;\n        padding: 0.5em;\n        border-radius: 5px;\n        width: 100%;\n        text-align: left;\n        font: 1rem Source Sans Pro, sans-serif;\n        border: none;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n      }\n\n      .item-container:not(.disabled):not(.selected) > .text-container:hover {\n        background: rgba(255, 255, 255, 0.8);\n      }\n\n      .text-container:focus {\n        outline: none;\n        box-shadow: 0 0 0 2pt #90e0ef;\n      }\n\n      .item-container.selected > .text-container:focus {\n        box-shadow: 0 0 0 2pt #00b4d8;\n      }\n      \n      .completed .name {\n        text-decoration: line-through;\n      }\n\n      .name {\n        width: 80%;\n        display: inline-block;\n        margin: 0.5em 0;\n      }\n      \n      .pomodoro-container {\n        width: 20%;\n        height: 100%;\n        display: inline-block;\n        position: relative;\n        text-align: right;\n      }\n\n      .pomodoro-label {\n        position: absolute;\n        top: -0.5em;\n        right: 0;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      .pomodoro {\n        display: inline-block;\n        margin: 1em 0 0 0;\n      }\n\n      .task-button {\n        opacity: 0;\n        position: absolute;\n        border: none;\n        padding: 0.25em;\n        color: rgba(255, 255, 255, 1); \n        background: transparent;\n        border-radius: 50%;\n      }\n\n      .item-container:hover:not(.disabled) > .task-button,\n      .task-button:focus {\n        opacity: 1;\n      }\n\n      .task-button:focus {\n        outline: none;\n        z-index: 1;\n        position: absolute;\n      }\n\n      .task-button:focus {\n        box-shadow: inset 0 0 0 2pt #90e0ef;\n      }\n\n      .item-container.selected > .task-button:focus {\n        box-shadow: inset 0 0 0 2pt #00b4d8;\n      }\n\n      .task-button:hover {\n        border-radius: 50%;\n        color: rgba(255, 255, 255, 0.8); \n        cursor: pointer;\n        background: rgba(255, 255, 255, 0.3);\n      }\n\n      .item-container.selected > .task-button,\n      .item-container.selected > .task-button:hover {\n        color: rgba(0, 0, 0, 0.54);\n      }\n\n      .task-button:disabled {\n        opacity: 0;\n      }\n\n      .task-button-icon {\n        font-size: 1.2rem;\n      }\n\n      #delete-button {\n        top: 50%;\n        right: 0;\n        transform: translate(0, -50%);\n      }\n    ",t.materialIconLinkElement=x("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/icon?family=Material+Icons"}),t.itemContainerElement=x("div",{className:"item-container"}),t.textContainerElement=x("button",{className:"text-container",onmouseout:function(t){t.target.blur()},onmousedown:function(t){t.preventDefault()}}),t.nameElement=x("p",{className:"name"}),t.pomodoroContainer=x("span",{className:"pomodoro-container"}),t.pomodoroLabel=x("label",{className:"pomodoro-label",for:"pomodoro",innerText:"Pomodoros"}),t.pomodoroElement=x("p",{className:"pomodoro",id:"pomodoro"}),t.deleteTaskButton=x("button",{className:"task-button",id:"delete-button",onmouseout:function(t){t.target.blur()},onmousedown:function(t){t.preventDefault()}}),t.deleteTaskIcon=x("span",{className:"material-icons task-button-icon",innerText:"delete"}),t.shadow.append(t.materialIconLinkElement,t.styleElement,t.itemContainerElement),t.itemContainerElement.append(t.textContainerElement,t.deleteTaskButton),t.deleteTaskButton.appendChild(t.deleteTaskIcon),t.textContainerElement.append(t.nameElement,t.pomodoroContainer),t.pomodoroContainer.append(t.pomodoroLabel,t.pomodoroElement),t}return l()(o,[{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"name":this.nameElement.innerText=n;break;case"used-pomodoros":this.usedPomodoros=n,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"estimated-pomodoros":this.estimatedPomodoros=n,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"selected":"true"===n?this.itemContainerElement.classList.add("selected"):this.itemContainerElement.classList.remove("selected");break;case"completed":"true"===n?this.itemContainerElement.classList.add("completed"):this.itemContainerElement.classList.remove("completed")}}}],[{key:"observedAttributes",get:function(){return["name","estimated-pomodoros","used-pomodoros","selected","completed"]}}]),o}(v()(HTMLElement));customElements.define("task-item",L);const C=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=y()(e);if(n){var o=y()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this)).shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .container {\n        padding: 1em;\n        font: normal 1rem 'Source Sans Pro', sans-serif;\n        border-radius: 5px;\n        background: #00b4d8;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        box-sizing: border-box;\n      }\n\n      .task-item-container {\n        flex: 1;\n        overflow: auto;\n      }\n\n      .title {\n        text-align: center;\n        color: #fff;\n        margin-top: 0;\n      }\n    ",t.containerElement=x("div",{className:"container"}),t.titleElement=x("h1",{className:"title",innerText:"Task List"}),t.taskItemListContainerElement=x("div",{className:"task-item-container"}),t.taskItemFormElement=x("task-item-form",{className:"task-item-form"}),t.shadow.append(t.styleElement,t.containerElement),t.containerElement.append(t.titleElement,t.taskItemListContainerElement,t.taskItemFormElement),t}return o}(v()(HTMLElement));var O=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=y()(e);if(n){var o=y()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this)).shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .task-form {\n        margin: 1em;\n        padding: 1em ;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .field-input-container {\n        margin-bottom: 1em;\n        border-radius: 5px;\n        position: relative;\n        width: 100%;\n        display: flex;\n      }\n\n      .name-input-container {\n        flex: 4;\n        position: relative;\n      }\n\n      .pomodoro-input-container {\n        flex: 1;\n        min-width: 95px;\n        position: relative;\n      }\n\n      .task-input-label {\n        position: absolute;\n        z-index: 2;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      #name-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      #pomodoro-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      .task-input[type='text'],\n      .task-input[type='number'] {\n        padding: 1.5em 0.75em 0.75em 0.75em;\n        border: none;\n        font: 1rem 'Source Sans Pro', sans-serif;\n        color: #444;\n        box-sizing: border-box;\n        width: 100%;\n      }\n\n      .task-input:focus {\n        box-shadow: 0 0 0 2pt #90e0ef;\n        outline: none;\n        z-index: 1;\n        position: relative;\n      }\n\n      #name-input {\n        border-top-left-radius: 5px;\n        border-bottom-left-radius: 5px;\n      }\n\n      #pomodoro-input {\n        border-top-right-radius: 5px;\n        border-bottom-right-radius: 5px;\n      }\n\n      .task-input[type='text']::placeholder,\n      .task-input[type='number']::placeholder {\n        color: #c8c8c8;\n      }\n\n      #submit-input {\n        width: 50%;\n        margin: auto;\n        background: rgb(77, 207, 233);\n        border-radius: 5px;\n        outline: none;\n        border: none;\n        color: white;\n        padding: 0.5em;\n        font: 1.2rem 'Source Sans Pro', sans-serif;\n      }\n\n      #submit-input:hover {\n        background: rgb(112, 216, 237);\n        cursor: pointer;\n      }\n    ",t.containerElement=x("form",{className:"task-form"}),t.fieldInputContainer=x("div",{className:"field-input-container"}),t.nameInputContainer=x("div",{className:"name-input-container"}),t.nameInputLabel=x("label",{className:"task-input-label",id:"name-input-label",for:"name-input",innerText:"Name"}),t.nameInputElement=x("input",{className:"task-input",id:"name-input",type:"text",name:"name",placeholder:"Task Description...",required:!0}),t.pomodoroInputContainer=x("div",{className:"pomodoro-input-container"}),t.pomodoroInputLabel=x("label",{className:"task-input-label",id:"pomodoro-input-label",for:"pomodoro-input",innerText:"Est Pomodoros"}),t.pomodoroInputElement=x("input",{className:"task-input",id:"pomodoro-input",type:"number",name:"pomodoro",placeholder:"#",min:"1",required:!0}),t.submitInputElement=x("input",{className:"task-input",id:"submit-input",type:"submit",value:"ADD"}),t.shadow.append(t.styleElement,t.containerElement),t.containerElement.append(t.fieldInputContainer,t.submitInputElement),t.fieldInputContainer.append(t.nameInputContainer,t.pomodoroInputContainer),t.nameInputContainer.append(t.nameInputLabel,t.nameInputElement),t.pomodoroInputContainer.append(t.pomodoroInputLabel,t.pomodoroInputElement),t}return o}(v()(HTMLElement));customElements.define("task-item-form",O);var _=function(t){var e=E(t,!0);return null===e||e<0||e>=3600?null:e};const A=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=y()(e);if(n){var o=y()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this))._time=0,t._containerRadius=0,t.styleElement=x("style",{innerText:"\n        .container {\n          font: initial 'Duru-Sans', sans-serif;\n          color: #fff;\n        }\n      "}),t.shadow=t.attachShadow({mode:"open"}),t.timerContainer=x("div",{className:"container"}),t.shadow.append(t.styleElement,t.timerContainer),t}return l()(o,[{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"time":var r=_(n);if(null===r)return;this._time=r,this.timerContainer.innerText=(i=this._time,a=[Math.floor(i/60),Math.floor(i%60)].map((function(t){return t<10?"0".concat(t):t})),c=(s=k()(a,2))[0],u=s[1],"".concat(c,":").concat(u));break;case"container-radius":var o=_(n);if(null===o)return;this._containerRadius=o,this.styleElement.innerText="\n            .container {\n              font: ".concat(this._containerRadius/30,"em 'Duru-Sans', sans-serif; \n              color: #fff;\n            }\n          ")}var i,a,s,c,u}},{key:"time",get:function(){return this._time},set:function(t){var e=_(t);null!==e&&(this._time=e,this.setAttribute("time",this._time))}},{key:"containerRadius",get:function(){return this._containerRadius},set:function(t){var e=function(t){var e=E(t);return null===e||e<0?null:e}(t);null!==e&&(this._containerRadius=e,this.setAttribute("container-radius",this._containerRadius))}}],[{key:"observedAttributes",get:function(){return["time","container-radius"]}}]),o}(v()(HTMLElement));const N=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=y()(e);if(n){var o=y()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;c()(this,o),(t=r.call(this)).root=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style");var e="http://www.w3.org/2000/svg";return t.svgElement=x("svg",{class:"svg"},{namespace:e}),t.circleElement=x("circle",{class:"circle"},{namespace:e}),t.baseCircleElement=x("circle",{class:"base-circle"},{namespace:e}),t.foreignObjectElement=x("foreignObject",{class:"foreign-object"},{namespace:e}),t.foreignObjectContainer=x("div",{class:"foreign-object-container"}),t.timerComponent=x("timer-component",{className:"timer",time:0}),t.circleComponent=x("pomodoro-circles",{className:"circles",circleCount:0}),t.root.append(t.styleElement,t.svgElement),t.svgElement.append(t.baseCircleElement,t.circleElement,t.foreignObjectElement),t.foreignObjectElement.appendChild(t.foreignObjectContainer),t.foreignObjectContainer.append(t.timerComponent,t.circleComponent),t._radius=0,t._stroke=0,t._progress=0,t.updateComponent(t._radius,t._stroke,t._progress),t}return l()(o,[{key:"updateComponent",value:function(t,e,n){var r=t-2*e,o=2*r*Math.PI;this.styleElement.innerText="\n      .svg {\n        overflow: hidden;\n        width: ".concat(2*t,"px;\n        height: ").concat(2*t,"px;\n      }\n\n      .base-circle {\n        stroke: #fff;\n        stroke-dasharray: ").concat(o," ").concat(o,";\n        stroke-dashoffset: 0;\n        stroke-width: ").concat(e,";\n        fill: #48cae4;\n      }\n\n      .circle {\n        stroke: #0095b3;\n        stroke-dasharray: ").concat(o," ").concat(o,";\n        stroke-dashoffset: ").concat((1-n/100)*o,";\n        stroke-width: ").concat(e+2,";\n        fill: transparent;\n\n        transition: stroke-dashoffset 0.5s;\n        transform: rotate(-90deg);\n        transform-origin: 50% 50%;\n      }\n\n      .foreign-object {\n      }\n\n      .foreign-object-container {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n      }\n    "),this.foreignObjectElement.setAttribute("width",2*t),this.foreignObjectElement.setAttribute("height",2*t),this.circleElement.setAttribute("r",r),this.circleElement.setAttribute("cx",t),this.circleElement.setAttribute("cy",t),this.baseCircleElement.setAttribute("r",r),this.baseCircleElement.setAttribute("cx",t),this.baseCircleElement.setAttribute("cy",t),this.timerComponent.containerRadius=t}},{key:"attributeChangedCallback",value:function(t,e,n){var r=E(n);if(null!==r){switch(t){case"radius":case"stroke":if(r<0)return;break;case"progress":if("progress"===t&&(r<0||r>100))return;break;default:return}this["_".concat(t)]=r,this.updateComponent(this._radius,this._stroke,this._progress)}}},{key:"radius",get:function(){return this._radius},set:function(t){var e=E(t);this.setAttribute("radius",e)}},{key:"stroke",get:function(){return this._stroke},set:function(t){var e=E(t);this.setAttribute("stroke",e)}},{key:"progress",get:function(){return this._progress},set:function(t){var e=E(t);this.setAttribute("progress",e)}}],[{key:"observedAttributes",get:function(){return["radius","stroke","progress"]}}]),o}(v()(HTMLElement));var T=n(319),P=n.n(T);var I=function(t){var e=E(t,!0);return null===e||e<0||e>4?null:e};const j=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=y()(e);if(n){var o=y()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t,e;return c()(this,o),(e=r.call(this))._circleCount=0,e.styleElement=x("style",{innerText:"\n      .circle-container {\n        display: flex;\n      }\n      \n      .circle {\n        height: 15px;\n        width: 15px;\n        border: 1px solid white;\n        border-radius: 50%;\n        margin: 15px 7px 0px;\n        display: inline-block;\n      }\n\n      .circle.active {\n        background-color: #fff;\n      }\n      "}),e.shadow=e.attachShadow({mode:"open"}),e.counterContainer=x("div",{className:"circle-container"}),e.circles=new Array(4).fill(null).map((function(){return x("div",{className:"circle"})})),(t=e.counterContainer).append.apply(t,P()(e.circles)),e.shadow.append(e.styleElement,e.counterContainer),e}return l()(o,[{key:"attributeChangedCallback",value:function(t,e,n){if("circle-count"===t){var r=I(n);if(null===r)return;this.circles.forEach((function(t,e){e<r?t.classList.add("active"):t.classList.remove("active")}))}}},{key:"circleCount",get:function(){return this._circleCount},set:function(t){var e=I(t);null!==e&&(this._circleCount=e,this.setAttribute("circle-count",this._circleCount))}}],[{key:"observedAttributes",get:function(){return["circle-count"]}}]),o}(v()(HTMLElement));var B="pomodoroInterval",R="longBreakInterval",q={calm:"assets/calm-alarm.mp3",annoying:"assets/original-alarm.mp3",kanye:"assets/kanye-stop.mp3"},D=function(t){var e=E(t,!0);return null===e||e<3||e>5?null:e},M=function(t){var e=E(t,!0);return null===e||e<15||e>30?null:e},F=function(t){var e=w(t);return null!==e&&Object.values(q).includes(e)?e:null};const G=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=y()(e);if(n){var o=y()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this))._shortBreakLength=t.getAttribute("shortBreakLength"),t._longBreakLength=t.getAttribute("longBreakLength"),t._timerAudio=t.getAttribute("timerAudio"),t.styleElement=x("style",{innerText:"\n          .popup {\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%) scale(0);\n            transition: 200ms ease-in-out;\n            border-radius: 10px;\n            z-index: 5;\n            background-color: white;\n            width: 700px;\n            max-width: 80%;\n          }\n          \n          .popup.active {\n            transform: translate(-50%, -50%) scale(1);\n          }\n          \n          .settings-title {\n            font: 2rem 'Source Sans Pro', sans-serif;\n            color: #777;\n            letter-spacing: 0.1em;\n            margin: 0;\n          }\n          \n          .settings-hr {\n            margin-top: 0;\n            margin-bottom: 1.5em;\n          }\n          \n          .content {\n            font: 1.1rem 'Duru Sans', sans-serif;\n            padding: 20px;\n          }\n          \n          .content .form-input input {\n            text-decoration: none;\n            font: 1.1rem 'Duru Sans', sans-serif;\n            border: none;\n            text-align: center;\n            margin-left: 0.5em;\n          }\n          \n          .content .form-input {\n            text-align: center;\n            margin-bottom: 1em;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n          }\n          \n          .content .form-input .bounds {\n            color: #808080;\n            margin-left: 1em;\n          }\n\n          .content .form-input label {\n            line-height: 35px;\n            margin-right: 0.5em\n          }\n\n          select {\n            cursor: pointer;\n            font: 0.85rem 'Duru Sans', sans-serif;\n            display: inline-block;\n            vertical-align: middle;\n            padding: 5px;\n            width: 225px;\n            border: 1px solid #FFF;\n            height: 34px;\n            -webkit-appearance: none;\n            -moz-appearance: none;\n            appearance: none;\n            background: url(assets/sound.png) 96% / 10% no-repeat #EEE;\n          }\n          \n          .content button {\n            background-color: rgba(72, 202, 228, 1);\n            border: none;\n            border-radius: .25rem;\n            color: white;\n            font: 1.1rem 'Duru Sans', sans-serif;\n            text-align: center;\n            text-decoration: none;\n            margin: 1.5em auto 0.5em auto;\n            padding: 0.5em;\n            display: block;\n            width: 75%;\n            cursor: pointer;\n          }\n\n          .content button:hover {\n            background-color: rgba(72, 202, 228, 0.8);\n          }\n          \n          .content .error {\n            color: red;\n            position: absolute;\n            margin-top: 50px;\n            visibility: hidden;\n          }\n          \n          #overlay {\n            position: fixed;\n            opacity: 0;\n            transition: 200ms ease-in-out;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n            pointer-events: none;\n            z-index: 4;\n            cursor: pointer;\n          }\n          \n          #overlay.active {\n            opacity: 1;\n            pointer-events: all;\n          }\n        "}),t.shadow=t.attachShadow({mode:"open"}),t.popupContainer=x("div",{className:"popup",id:"popup"}),t.contentContainer=x("div",{className:"content"}),t.popupTitle=x("h1",{className:"settings-title",innerText:"SETTINGS"}),t.popupTitleLine=x("hr",{className:"settings-hr"}),t.inputContainerShort=x("div",{className:"form-input"}),t.inputLabelShort=x("label",{innerText:"Short Break: ",for:"short-number"}),t.inputBoxShort=x("input",{id:"short-number",name:"short-number",type:"number",min:"3",max:"5",value:t._shortBreakLength}),t.inputBoundShort=x("span",{className:"bounds",innerText:"3 - 5 minutes"}),t.inputErrorShort=x("p",{className:"error",innerText:"Please enter valid entry"}),t.inputErrorShort.style.visibility="hidden",t.inputContainerLong=x("div",{className:"form-input"}),t.inputLabelLong=x("label",{innerText:"Long Break: ",for:"long-number"}),t.inputBoxLong=x("input",{id:"long-number",name:"long-number",type:"number",min:"15",max:"30",value:t._longBreakLength}),t.inputBoundLong=x("span",{className:"bounds",innerText:"15 - 30 minutes"}),t.inputErrorLong=x("p",{className:"error",innerText:"Please enter valid entry"}),t.inputErrorLong.style.visibility="hidden",t.inputContainerSound=x("div",{className:"form-input"}),t.inputLabelSound=x("label",{for:"sound",innerText:"Sound: "}),t.inputBoxSound=x("select",{name:"sound",id:"sound"}),t.soundOption1=x("option",{value:"assets/calm-alarm.mp3",innerText:"Calm Alarm"}),t.soundOption2=x("option",{value:"assets/original-alarm.mp3",innerText:"Orginal Alarm"}),t.soundOption3=x("option",{value:"assets/kanye-stop.mp3",innerText:"Kanye Telling You to Stop"}),t.saveButton=x("button",{innerText:"SAVE",className:"save-button"}),t.overlayEl=x("div",{id:"overlay"}),t.inputContainerShort.append(t.inputLabelShort,t.inputBoxShort,t.inputBoundShort,t.inputErrorShort),t.inputContainerLong.append(t.inputLabelLong,t.inputBoxLong,t.inputBoundLong,t.inputErrorLong),t.inputBoxSound.append(t.soundOption1,t.soundOption2,t.soundOption3),t.inputContainerSound.append(t.inputLabelSound,t.inputBoxSound),t.contentContainer.append(t.popupTitle,t.popupTitleLine,t.inputContainerShort,t.inputContainerLong,t.inputContainerSound,t.saveButton),t.popupContainer.append(t.contentContainer),t.shadow.append(t.styleElement,t.popupContainer,t.overlayEl),t}return l()(o,[{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"shortBreakLength":var r=D(n);if(null===r)return;this._shortBreakLength=r,this.inputBoxShort.value=this._shortBreakLength,this.inputErrorShort.visibility="hidden";break;case"longBreakLength":var o=M(n);if(null===o)return;this._longBreakLength=o,this.inputBoxLong.value=this._longBreakLength,this.inputErrorLong.visibility="hidden";break;case"timerAudio":var i=F(n);if(null===i)return;this._timerAudio=i,this.inputBoxSound.value=this._timerAudio}}},{key:"shortBreakLength",get:function(){return this._shortBreakLength},set:function(t){var e=D(t);null!==e&&(this._shortBreakLength=e,this.setAttribute("shortBreakLength",this._shortBreakLength))}},{key:"longBreakLength",get:function(){return this._longBreakLength},set:function(t){var e=M(t);null!==e&&(this._longBreakLength=e,this.setAttribute("longBreakLength",this._longBreakLength))}},{key:"timerAudio",get:function(){return this._timerAudio},set:function(t){var e=F(t);null!==e&&(this._timerAudio=e,this.setAttribute("timerAudio",this._timerAudio))}}],[{key:"observedAttributes",get:function(){return["shortBreakLength","longBreakLength","timerAudio"]}}]),o}(v()(HTMLElement));var z=n(713),H=n.n(z);function J(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Y(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?J(Object(n),!0).forEach((function(e){H()(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):J(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var V,K,U,$,Q,W,X,Z,tt,et,nt,rt,ot,it,at,st,ct,ut=[],lt=function(){window.localStorage.setItem("tasks",JSON.stringify(ut))},pt=function(t){var e=t.name;return{taskIndex:ut.findIndex((function(t){return t.name===e})),taskElement:K.querySelector('[name="'.concat(e,'"]'))}},dt=function(t){return{delete:Array.from(t.shadowRoot.querySelectorAll(".task-button")).find((function(t){return"delete-button"===t.getAttribute("id")}))}},mt=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"end";if("end"!==e&&"start"!==e){var n=pt(e),r=n.taskElement;r.before(t)}else"end"===e?K.append(t):"start"===e&&K.prepend(t);return t},ft=function(t){var e=pt(t).taskElement;return e.remove(),e},ht=function(t,e){var n=e.name,r=e.usedPomodoros,o=e.estimatedPomodoros,i=e.selected,a=e.completed,s=pt(t),c=s.taskIndex,u=s.taskElement;return ut[c]=e,lt(),u.setAttribute("name",n),u.setAttribute("used-pomodoros",r),u.setAttribute("estimated-pomodoros",o),u.setAttribute("selected",i),u.setAttribute("completed",a),e},yt=function(){return ut.find((function(t){return t.selected}))},bt=function(t){var e=yt();e&&ht(e,Y(Y({},e),{},{selected:!1}));var n=pt(t),r=n.taskElement,o=n.taskIndex;return ft(t),mt(r,"start"),ut.splice(o,1),ut.unshift(t),ht(t,Y(Y({},t),{},{selected:!0}))},vt=function(t){var e=t.name,n=t.usedPomodoros,r=t.estimatedPomodoros,o=t.selected,i=t.completed,a=x("task-item",{name:e,"used-pomodoros":n,"estimated-pomodoros":r,selected:o}),s=a.shadowRoot.querySelector(".text-container"),c=dt(a).delete;return i||(s.onclick=function(){return bt(t)}),c.onclick=function(){return n=pt(e=t).taskIndex,ut.splice(n,1),window.localStorage.setItem("tasks",JSON.stringify(ut)),void ft(e);var e,n},a},gt=function(t){t.preventDefault();var e,n,r,o=Q,i=o.name,a=o.pomodoro,s=i.value,c=a.value,u=s.trim(),l=Number(c);Number.isNaN(l)||(i.focus(),n=vt(e={name:u,estimatedPomodoros:l,usedPomodoros:0,selected:!1,completed:!1}),-1!==(r=ut.findIndex((function(t){return t.completed})))?(ut.splice(r,0,e),mt(n,ut[r+1])):(ut.push(e),mt(n)),lt(),Object.values(Q).forEach((function(t){t.value=""})))},kt=function(t){var e=t.target.value.trim();ut.some((function(t){return t.name===e}))?t.target.setCustomValidity("Duplicate task."):t.target.setCustomValidity("")},xt=function(){return ut.length>0&&!ut[0].completed?bt(ut[0]):null},wt=function(){ut.forEach((function(t){ht(t,Y(Y({},t),{},{selected:!1}))}))},Et=function(t){ut.forEach((function(e){var n=pt(e).taskElement.shadowRoot,r=n.querySelector(".item-container"),o=n.querySelector(".text-container");t?r.classList.remove("disabled"):r.classList.add("disabled"),t&&!e.completed?o.onclick=function(){return bt(e)}:o.onclick=null;var i=dt(pt(e).taskElement);Object.values(i).forEach((function(e){e.disabled=!t}))}))},St=function(t){W=t},Lt=function(t){W.progress=JSON.stringify(t)},Ct=function(t){X=t},Ot=function(t){X.time=t},_t=function(t){Z.circleCount=t},At=function(t){Z=t},Nt=new Audio;Nt.volume=.2;var Tt,Pt,It,jt,Bt,Rt,qt,Dt,Mt,Ft,Gt,zt,Ht,Jt,Yt=function(){return tt.shortBreakLength},Vt=function(){return tt.longBreakLength},Kt=function(){return tt.timerAudio},Ut=function(t){var e=D(t);null!==e&&(tt.shortBreakLength=e)},$t=function(t){var e=M(t);null!==e&&(tt.longBreakLength=e)},Qt=function(t){var e=F(t);null!==e&&(tt.timerAudio=e)},Wt=function(){et.classList.add("active"),rt.classList.add("active"),ot.value=Yt(),it.value=Vt(),st.value=Kt()},Xt=function(){Nt.pause(),et.classList.remove("active"),rt.classList.remove("active")},Zt=Xt,te=function(){var t=D(ot.value),e=M(it.value),n=F(at.value),r=null!==t,o=null!==e;return ct[0].style.visibility=r?"hidden":"visible",ct[1].style.visibility=o?"hidden":"visible",r&&o?(Qt(st.value),Ut(t),$t(e),window.localStorage.setItem("shortBreakLength",t),window.localStorage.setItem("longBreakLength",e),window.localStorage.setItem("timerAudio",n),[t,e]):null},ee=function(t,e){var n=function(){var t,e;try{t=JSON.parse(window.localStorage.getItem("shortBreakLength")),e=JSON.parse(window.localStorage.getItem("longBreakLength"))}catch(n){t=null,e=null}return t&&null!==D(t)||(t=5,window.localStorage.setItem("shortBreakLength",t)),e&&null!==M(e)||(e=15,window.localStorage.setItem("longBreakLength",e)),{shortBreakLength:t,longBreakLength:e}}(),r=n.shortBreakLength,o=n.longBreakLength;!function(t){var e=(tt=t).shadowRoot;et=e.querySelector(".popup"),nt=e.querySelector(".save-button"),rt=e.querySelector("#overlay"),ot=e.querySelector("#short-number"),it=e.querySelector("#long-number"),at=e.querySelector("#sound"),st=e.querySelector("#sound"),ct=e.querySelectorAll(".error")}(t),Ut(r),$t(o);var i=window.localStorage.getItem("timerAudio");null===F(i)?(Qt(q.calm),window.localStorage.setItem("timerAudio",q.calm)):Qt(i),rt.onclick=Xt,nt.addEventListener("click",(function(){var t=te();t&&(Zt(),e.apply(void 0,P()(t)))})),st.onchange=function(){Nt.pause(),Nt.src=st.value,Nt.play()}},ne=function(t){Pt=(Tt=t).querySelector(".announcement"),It=Tt.querySelector(".announcement-yes-button"),jt=Tt.querySelector(".announcement-no-button"),It.onmousedown=function(t){return t.preventDefault()},jt.onmousedown=function(t){return t.preventDefault()}},re=function(t){Pt.innerText=t},oe=function(t){jt.onclick=t},ie=function(t){"visible"===t?(It.classList.remove("hidden"),jt.classList.remove("hidden")):(It.classList.add("hidden"),jt.classList.add("hidden"))},ae=function(){Bt.classList.add("active")},se=function(){Bt.classList.remove("active")},ce=function(t,e){!function(t){Rt=(Bt=t).querySelector("#confirmation-popup"),qt=Rt.querySelector(".confirmation-no-button"),Dt=Rt.querySelector(".confirmation-yes-button")}(t),qt.onmousedown=function(t){return t.preventDefault()},Dt.onmousedown=function(t){return t.preventDefault()},Dt.onclick=function(){se(),e()},qt.onclick=se,Bt.onclick=se,Rt.onclick=function(t){return t.stopPropagation()}},ue=function(){Mt.classList.remove("active"),Gt.innerHTML=""},le=function(t,e){var n,r,o;!function(t){Ft=(Mt=t).querySelector("#summary-popup"),Gt=Mt.querySelector(".task-summary-list"),zt=Mt.querySelector(".summary-actual-pomos"),Ht=Mt.querySelector(".summary-estimated-pomos"),Jt=Mt.querySelector(".summary-close-button")}(t),r=(n=e).filter((function(t){return t.completed})),o=n.filter((function(t){return!t.completed})),[].concat(P()(r),P()(o)).forEach((function(t){var e=function(t){var e=t.name,n=t.usedPomodoros,r=t.estimatedPomodoros,o=t.completed,i=x("div",{className:"task-summary-item ".concat(o?"completed":"incompleted")}),a=x("span",{className:"task-summary-name",innerText:e}),s=x("span",{className:"task-summary-pomodoros",innerText:"".concat(n,"/").concat(r)});return i.append(a,s),i}(t);Gt.append(e)}));var i=e.reduce((function(t,e){return{actual:t.actual+e.usedPomodoros,estimated:t.estimated+e.estimatedPomodoros}}),{actual:0,estimated:0}),a=i.actual,s=i.estimated;zt.innerText="Actual: ".concat(a),Ht.innerText="Estimated: ".concat(s),Jt.onclick=ue,Jt.onmousedown=function(t){return t.preventDefault()},Mt.onclick=ue,Ft.onclick=function(t){return t.stopPropagation()}};customElements.define("timer-component",A),customElements.define("progress-ring",N),customElements.define("task-list",C),customElements.define("settings-component",G),customElements.define("pomodoro-circles",j);var pe,de,me=!1,fe=new Audio;fe.volume=.2;var he=function(){var t=o()(a().mark((function t(e){var n,r;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e;case 1:if(!(n>=0)){t.next=12;break}if(me){t.next=4;break}return t.abrupt("return",!1);case 4:return r=100*n/e,Ot(n),Lt(r),t.next=9,S(1);case 9:n--,t.next=1;break;case 12:return t.abrupt("return",!0);case 13:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),ye=function(){var t=o()(a().mark((function t(n){var r,o,i,s;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=0,o=B,i=null;case 3:if(!me){t.next=38;break}if(o!==B){t.next=29;break}if((i=yt())||(i=xt()),i){t.next=9;break}return t.abrupt("return",0===r?-1:r);case 9:return 0===r&&n(),r%4==0&&_t(0),Et(!1),re("Focus."),fe.pause(),t.next=16,he(3);case 16:if(t.sent){t.next=19;break}return t.abrupt("return",r);case 19:void 0,u=(c=i).usedPomodoros,i=ht(c,Y(Y({},c),{},{usedPomodoros:u+1})),fe.src=Kt(),fe.play(),r++,_t((r-1)%4+1),o=r>0&&r%4==0?R:"shortBreakInterval",t.next=33;break;case 29:return t.delegateYield(a().mark((function t(){var e,n,s;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return ie("visible"),re("Did you finish the task?"),e=i,n=o===R?"Good work. Enjoy a longer break!":"Enjoy your short break!",s=!1,a=function(){var t,r,o,i;o=(r=pt(t=e)).taskIndex,i=r.taskElement,ft(t),mt(i,"end"),i.setAttribute("selected",!1),i.setAttribute("completed",!0),i.shadowRoot.querySelector(".text-container").onclick=null,ut.splice(o,1),ut.push(t),ht(t,Y(Y({},t),{},{selected:!1,completed:!0})),xt(),re(n),ie("hidden"),s=!0,Et(!0)},It.onclick=a,oe((function(){re(n),ie("hidden"),s=!0})),t.next=9,he(o===R?60*de:60*pe);case 9:if(t.sent){t.next=12;break}return t.abrupt("return",{v:r});case 12:s||ie("hidden"),o=B;case 14:case"end":return t.stop()}var a}),t)}))(),"t0",30);case 30:if(s=t.t0,"object"!==e()(s)){t.next=33;break}return t.abrupt("return",s.v);case 33:return Lt(100),t.next=36,S(.5);case 36:t.next=3;break;case 38:return t.abrupt("return",r);case 39:case"end":return t.stop()}var c,u}),t)})));return function(e){return t.apply(this,arguments)}}(),be=function(t,e){re(-1===e?"No work to be done.":"Good work today!"),wt(),t.innerText="Start",t.className="session-button",e>0&&(le(document.querySelector("#summary-overlay"),ut),Mt.classList.add("active"))};window.addEventListener("DOMContentLoaded",(function(){var t=document.querySelector(".settings-icon"),e=document.querySelector(".progress-ring"),n=e.shadowRoot.querySelector(".timer"),r=e.shadowRoot.querySelector(".circles"),i=document.querySelector(".session-button"),s=document.querySelector(".announcement-container"),c=document.querySelector(".task-list"),u=document.querySelector("#confirmation-overlay"),l=document.querySelector(".settings");St(e),Ct(n),At(r),ne(s),function(t){V=t.shadowRoot.querySelector(".container"),K=V.querySelector(".task-item-container"),U=V.querySelector(".task-item-form"),$=U.shadowRoot.querySelector(".task-form"),Q={name:$.querySelector("#name-input"),pomodoro:$.querySelector("#pomodoro-input")}}(c),$.addEventListener("submit",gt),JSON.parse(window.localStorage.getItem("tasks"))||window.localStorage.setItem("tasks",JSON.stringify([])),(ut=JSON.parse(window.localStorage.getItem("tasks"))).forEach((function(t){return mt(vt(t))})),Q.name.oninput=kt,ce(u,(function(){me=!1})),ee(l,(function(t,e){pe=t,de=e}));var p=document.querySelector(".navbar");window.onscroll=function(){0===window.scrollY?p.classList.remove("scrolled"):p.classList.add("scrolled")},pe=Yt(),de=Vt(),pe=.05,de=.1,t.onclick=Wt,i.onmousedown=function(t){t.preventDefault()},n.onclick=function(){return fe.pause()},Ot(3),wt(),i.addEventListener("click",o()(a().mark((function t(){var e,n;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if("Start"!==i.innerText){t.next=14;break}return me=!0,e=function(){i.innerText="End",i.classList.add("session-button","in-session")},t.next=5,ye(e);case 5:n=t.sent,Et(!0),ie("hidden"),Lt(100),Ot(3),_t(0),be(i,n),t.next=15;break;case 14:ae();case 15:case"end":return t.stop()}}),t)}))))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,