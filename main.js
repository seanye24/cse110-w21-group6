(()=>{var t={757:(t,e,n)=>{t.exports=n(666)},666:t=>{var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function c(t,e,n,r){var o=e&&e.prototype instanceof v?e:v,i=Object.create(o.prototype),a=new O(r||[]);return i._invoke=function(t,e,n){var r=d;return function(o,i){if(r===f)throw new Error("Generator is already running");if(r===p){if("throw"===o)throw i;return A()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=L(a,n);if(s){if(s===h)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=f;var u=l(t,e,n);if("normal"===u.type){if(r=n.done?p:m,u.arg===h)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=p,n.method="throw",n.arg=u.arg)}}}(t,n,a),i}function l(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var d="suspendedStart",m="suspendedYield",f="executing",p="completed",h={};function v(){}function b(){}function y(){}var g={};g[i]=function(){return this};var k=Object.getPrototypeOf,x=k&&k(k(P([])));x&&x!==n&&r.call(x,i)&&(g=x);var w=y.prototype=v.prototype=Object.create(g);function E(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function S(t,e){function n(o,i,a,s){var u=l(t[o],t,i);if("throw"!==u.type){var c=u.arg,d=c.value;return d&&"object"==typeof d&&r.call(d,"__await")?e.resolve(d.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(d).then((function(t){c.value=t,a(c)}),(function(t){return n("throw",t,a,s)}))}s(u.arg)}var o;this._invoke=function(t,r){function i(){return new e((function(e,o){n(t,r,e,o)}))}return o=o?o.then(i,i):i()}}function L(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=l(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function _(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(_,this),this.reset(!0)}function P(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}return{next:A}}function A(){return{value:e,done:!0}}return b.prototype=w.constructor=y,y.constructor=b,b.displayName=u(y,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,y):(t.__proto__=y,u(t,s,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},E(S.prototype),S.prototype[a]=function(){return this},t.AsyncIterator=S,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new S(c(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},E(w),u(w,s,"Generator"),w[i]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=P,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return s.type="throw",s.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(u&&c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),C(n),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),h}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function e(t,e,n,r,o,i,a){try{var s=t[i](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,o)}function r(t){return function(){var n=this,r=arguments;return new Promise((function(o,i){var a=t.apply(n,r);function s(t){e(a,o,i,s,u,"next",t)}function u(t){e(a,o,i,s,u,"throw",t)}s(void 0)}))}}var o=n(757),i=n.n(o);function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function u(t,e,n){return e&&s(t.prototype,e),n&&s(t,n),t}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function l(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}function d(e,n){return!n||"object"!==t(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(e):n}function m(t){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function f(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function p(t,e,n){return(p=f()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&c(o,n.prototype),o}).apply(null,arguments)}function h(t){var e="function"==typeof Map?new Map:void 0;return(h=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return p(t,arguments,m(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),c(r,t)})(t)}function v(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function b(t,e){if(t){if("string"==typeof t)return v(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?v(t,e):void 0}}function y(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}}(t,e)||b(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var g=function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=r.namespace;return e=o?document.createElementNS(o,t):document.createElement(t),Object.entries(n).forEach((function(t){var n=y(t,2),r=n[0],i=n[1];o||!(r in e)?e.setAttribute(r,i):e[r]=i})),e},k=function(t){return"string"==typeof t||t instanceof String?t:null},x=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n="number"==typeof t||t instanceof Number||null!==k(t),r=Number(t);return!n||Number.isNaN(r)?null:e?Math.floor(r):r},w=function(t){if("boolean"==typeof t||t instanceof Boolean)return t;var e=null!==k(t);return!(!e||"true"!==t)||(!e||"false"!==t)&&null},E=function(){var t=r(i().mark((function t(e){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise((function(t){return setTimeout(t,1e3*e)})));case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),S=function(t){var e=x(t,!0);return null===e||e<0?null:e},L=function(t){try{var e=t.name,n=t.usedPomodoros,r=t.estimatedPomodoros,o=t.selected,i=t.completed,a=null!==k(e),s=null!==S(n),u=null!==S(r),c=null!==w(o),l=null!==w(i);return a&&s&&u&&l&&c?{name:e,usedPomodoros:n,estimatedPomodoros:r,selected:o,completed:i}:null}catch(t){return null}};const _=function(t){l(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=m(e);if(n){var o=m(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return d(this,t)});function o(){var t;return a(this,o),(t=r.call(this))._name="",t._usedPomodoros=0,t._estimatedPomodoros=0,t._selected=!1,t._completed=!1,t.shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .item-container {\n        margin-bottom: 1em;\n        padding: 0.5em 2em;\n        border-radius: 5px;\n        position: relative;\n        cursor: pointer;\n      }\n\n      .item-container:focus {\n        outline: none;\n      }\n\n      .item-container.selected {\n        background: #90e0ef;\n      }\n\n      .text-container {\n        background: rgba(255, 255, 255, 1);\n        color: #555;\n        position: relative;\n        padding: 0.5em;\n        border-radius: 5px;\n        width: 100%;\n        text-align: left;\n        font: 1rem Source Sans Pro, sans-serif;\n        border: none;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n      }\n\n      .item-container:not(.disabled):not(.selected) > .text-container:hover {\n        background: rgba(255, 255, 255, 0.8);\n      }\n\n      .text-container:focus {\n        outline: none;\n        box-shadow: 0 0 0 2pt #90e0ef;\n      }\n\n      .item-container.selected > .text-container:focus {\n        box-shadow: 0 0 0 2pt #00b4d8;\n      }\n      \n      .completed .name {\n        text-decoration: line-through;\n      }\n\n      .name {\n        width: 80%;\n        display: inline-block;\n        margin: 0.5em 0;\n      }\n      \n      .pomodoro-container {\n        width: 20%;\n        height: 100%;\n        display: inline-block;\n        position: relative;\n        text-align: right;\n      }\n\n      .pomodoro-label {\n        position: absolute;\n        top: -0.5em;\n        right: 0;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      .pomodoro {\n        display: inline-block;\n        margin: 1em 0 0 0;\n      }\n\n      .task-button {\n        opacity: 0;\n        position: absolute;\n        border: none;\n        padding: 0.25em;\n        color: rgba(255, 255, 255, 1); \n        background: transparent;\n        border-radius: 50%;\n      }\n\n      .item-container:hover:not(.disabled) > .task-button,\n      .task-button:focus {\n        opacity: 1;\n      }\n\n      .task-button:focus {\n        outline: none;\n        z-index: 1;\n        position: absolute;\n      }\n\n      .task-button:focus {\n        box-shadow: inset 0 0 0 2pt #90e0ef;\n      }\n\n      .item-container.selected > .task-button:focus {\n        box-shadow: inset 0 0 0 2pt #00b4d8;\n      }\n\n      .task-button:hover {\n        border-radius: 50%;\n        color: rgba(255, 255, 255, 0.8); \n        cursor: pointer;\n        background: rgba(255, 255, 255, 0.3);\n      }\n\n      .item-container.selected > .task-button,\n      .item-container.selected > .task-button:hover {\n        color: rgba(0, 0, 0, 0.54);\n      }\n\n      .task-button:disabled {\n        opacity: 0;\n      }\n\n      .task-button-icon {\n        font-size: 1.2rem;\n      }\n\n      #delete-button {\n        top: 50%;\n        right: 0;\n        transform: translate(0, -50%);\n      }\n    ",t.materialIconLinkElement=g("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/icon?family=Material+Icons"}),t.itemContainerElement=g("div",{className:"item-container"}),t.textContainerElement=g("button",{className:"text-container",onmouseout:function(t){t.target.blur()},onmousedown:function(t){t.preventDefault()}}),t.nameElement=g("p",{className:"name"}),t.pomodoroContainer=g("span",{className:"pomodoro-container"}),t.pomodoroLabel=g("label",{className:"pomodoro-label",for:"pomodoro",innerText:"Pomodoros"}),t.pomodoroElement=g("p",{className:"pomodoro",id:"pomodoro"}),t.deleteTaskButton=g("button",{className:"task-button",id:"delete-button",onmouseout:function(t){t.target.blur()},onmousedown:function(t){t.preventDefault()}}),t.deleteTaskIcon=g("span",{className:"material-icons task-button-icon",innerText:"delete"}),t.shadow.append(t.materialIconLinkElement,t.styleElement,t.itemContainerElement),t.itemContainerElement.append(t.textContainerElement,t.deleteTaskButton),t.deleteTaskButton.appendChild(t.deleteTaskIcon),t.textContainerElement.append(t.nameElement,t.pomodoroContainer),t.pomodoroContainer.append(t.pomodoroLabel,t.pomodoroElement),t}return u(o,[{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"name":var r=k(n);this.nameElement.innerText=r,this._name=r;break;case"used-pomodoros":var o=S(n);if(null===o)return void this.setAttribute(t,e);this._usedPomodoros=o,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"estimated-pomodoros":var i=S(n);if(null===i)return void this.setAttribute(t,e);this._estimatedPomodoros=i,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"selected":var a=w(n);if(null===a)return void this.setAttribute(t,e);this._selected=a,a?this.itemContainerElement.classList.add("selected"):this.itemContainerElement.classList.remove("selected");break;case"completed":var s=w(n);if(null===s)return void this.setAttribute(t,e);this._completed=s,s?this.itemContainerElement.classList.add("completed"):this.itemContainerElement.classList.remove("completed")}}},{key:"name",get:function(){return this._name},set:function(t){var e=k(t);null!==e&&(this._name=e,this.setAttribute("name",this._name))}},{key:"usedPomodoros",get:function(){return this._usedPomodoros},set:function(t){var e=S(t);null!==e&&(this._usedPomodoros=e,this.setAttribute("used-pomodoros",this._usedPomodoros))}},{key:"estimatedPomodoros",get:function(){return this._estimatedPomodoros},set:function(t){var e=S(t);null!==e&&(this._estimatedPomodoros=e,this.setAttribute("estimated-pomodoros",this._estimatedPomodoros))}},{key:"selected",get:function(){return this._selected},set:function(t){var e=w(t);null!==e&&(this._selected=e,this.setAttribute("selected",this._selected))}},{key:"completed",get:function(){return this._completed},set:function(t){var e=w(t);null!==e&&(this._completed=e,this.setAttribute("completed",this._completed))}}],[{key:"observedAttributes",get:function(){return["name","estimated-pomodoros","used-pomodoros","selected","completed"]}}]),o}(h(HTMLElement));const C=function(t){l(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=m(e);if(n){var o=m(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return d(this,t)});function o(){var t;return a(this,o),(t=r.call(this)).shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .task-form {\n        margin: 1em;\n        padding: 1em ;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .field-input-container {\n        margin-bottom: 1em;\n        border-radius: 5px;\n        position: relative;\n        width: 100%;\n        display: flex;\n      }\n\n      .name-input-container {\n        flex: 4;\n        position: relative;\n      }\n\n      .pomodoro-input-container {\n        flex: 1;\n        min-width: 95px;\n        position: relative;\n      }\n\n      .task-input-label {\n        position: absolute;\n        z-index: 2;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      #name-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      #pomodoro-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      .task-input[type='text'],\n      .task-input[type='number'] {\n        padding: 1.5em 0.75em 0.75em 0.75em;\n        border: none;\n        font: 1rem 'Source Sans Pro', sans-serif;\n        color: #444;\n        box-sizing: border-box;\n        width: 100%;\n      }\n\n      .task-input:focus {\n        box-shadow: 0 0 0 2pt #90e0ef;\n        outline: none;\n        z-index: 1;\n        position: relative;\n      }\n\n      #name-input {\n        border-top-left-radius: 5px;\n        border-bottom-left-radius: 5px;\n      }\n\n      #pomodoro-input {\n        border-top-right-radius: 5px;\n        border-bottom-right-radius: 5px;\n      }\n\n      .task-input[type='text']::placeholder,\n      .task-input[type='number']::placeholder {\n        color: #c8c8c8;\n      }\n\n      #submit-input {\n        width: 50%;\n        margin: auto;\n        background: rgb(77, 207, 233);\n        border-radius: 5px;\n        outline: none;\n        border: none;\n        color: white;\n        padding: 0.5em;\n        font: 1.2rem 'Source Sans Pro', sans-serif;\n      }\n\n      #submit-input:hover {\n        background: rgb(112, 216, 237);\n        cursor: pointer;\n      }\n    ",t.containerElement=g("form",{className:"task-form"}),t.fieldInputContainer=g("div",{className:"field-input-container"}),t.nameInputContainer=g("div",{className:"name-input-container"}),t.nameInputLabel=g("label",{className:"task-input-label",id:"name-input-label",for:"name-input",innerText:"Name"}),t.nameInputElement=g("input",{className:"task-input",id:"name-input",type:"text",name:"name",placeholder:"Task Description...",required:!0}),t.pomodoroInputContainer=g("div",{className:"pomodoro-input-container"}),t.pomodoroInputLabel=g("label",{className:"task-input-label",id:"pomodoro-input-label",for:"pomodoro-input",innerText:"Est Pomodoros"}),t.pomodoroInputElement=g("input",{className:"task-input",id:"pomodoro-input",type:"number",name:"pomodoro",placeholder:"#",min:"1",required:!0}),t.submitInputElement=g("input",{className:"task-input",id:"submit-input",type:"submit",value:"ADD"}),t.shadow.append(t.styleElement,t.containerElement),t.containerElement.append(t.fieldInputContainer,t.submitInputElement),t.fieldInputContainer.append(t.nameInputContainer,t.pomodoroInputContainer),t.nameInputContainer.append(t.nameInputLabel,t.nameInputElement),t.pomodoroInputContainer.append(t.pomodoroInputLabel,t.pomodoroInputElement),t}return o}(h(HTMLElement));customElements.define("task-item",_),customElements.define("task-item-form",C);const O=function(t){l(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=m(e);if(n){var o=m(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return d(this,t)});function o(){var t;return a(this,o),(t=r.call(this)).shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .container {\n        padding: 1em;\n        font: normal 1rem 'Source Sans Pro', sans-serif;\n        border-radius: 5px;\n        background: #00b4d8;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        box-sizing: border-box;\n      }\n\n      .task-item-container {\n        flex: 1;\n        overflow: auto;\n      }\n\n      .title {\n        text-align: center;\n        color: #fff;\n        margin-top: 0;\n      }\n    ",t.containerElement=g("div",{className:"container"}),t.titleElement=g("h1",{className:"title",innerText:"Task List"}),t.taskItemListContainerElement=g("div",{className:"task-item-container"}),t.taskItemFormElement=g("task-item-form",{className:"task-item-form"}),t.shadow.append(t.styleElement,t.containerElement),t.containerElement.append(t.titleElement,t.taskItemListContainerElement,t.taskItemFormElement),t}return o}(h(HTMLElement));var P=function(t){var e=x(t,!0);return null===e||e<0||e>=3600?null:e};const A=function(t){l(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=m(e);if(n){var o=m(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return d(this,t)});function o(){var t;return a(this,o),(t=r.call(this))._time=0,t._containerRadius=0,t.styleElement=g("style",{innerText:"\n        .container {\n          font: initial 'Duru-Sans', sans-serif;\n          color: #fff;\n        }\n      "}),t.shadow=t.attachShadow({mode:"open"}),t.timerContainer=g("div",{className:"container"}),t.shadow.append(t.styleElement,t.timerContainer),t}return u(o,[{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"time":var r=P(n);if(null===r)return void this.setAttribute(t,e);this._time=r,this.timerContainer.innerText=(i=this._time,s=(a=y([Math.floor(i/60),Math.floor(i%60)].map((function(t){return t<10?"0".concat(t):t})),2))[0],u=a[1],"".concat(s,":").concat(u));break;case"container-radius":var o=P(n);if(null===o)return void this.setAttribute(t,e);this._containerRadius=o,this.styleElement.innerText="\n            .container {\n              font: ".concat(this._containerRadius/2,"px 'Duru-Sans', sans-serif; \n              color: #fff;\n            }\n          ")}var i,a,s,u}},{key:"time",get:function(){return this._time},set:function(t){var e=P(t);null!==e&&(this._time=e,this.setAttribute("time",this._time))}},{key:"containerRadius",get:function(){return this._containerRadius},set:function(t){var e=function(t){var e=x(t);return null===e||e<0?null:e}(t);null!==e&&(this._containerRadius=e,this.setAttribute("container-radius",this._containerRadius))}}],[{key:"observedAttributes",get:function(){return["time","container-radius"]}}]),o}(h(HTMLElement));var B=function(t){var e=x(t);return null===e||e<0?null:e},T=function(t){var e=x(t);return null===e||e<0||e>100?null:e};const N=function(t){l(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=m(e);if(n){var o=m(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return d(this,t)});function o(){var t;a(this,o),(t=r.call(this)).root=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style");var e="http://www.w3.org/2000/svg";return t.svgElement=g("svg",{class:"svg"},{namespace:e}),t.circleElement=g("circle",{class:"circle"},{namespace:e}),t.baseCircleElement=g("circle",{class:"base-circle"},{namespace:e}),t.foreignObjectElement=g("foreignObject",{class:"foreign-object"},{namespace:e}),t.foreignObjectContainer=g("div",{class:"foreign-object-container"}),t.timerComponent=g("timer-component",{className:"timer",time:0}),t.circleComponent=g("pomodoro-circles",{className:"circles",circleCount:0}),t.root.append(t.styleElement,t.svgElement),t.svgElement.append(t.baseCircleElement,t.circleElement,t.foreignObjectElement),t.foreignObjectElement.appendChild(t.foreignObjectContainer),t.foreignObjectContainer.append(t.timerComponent,t.circleComponent),t._radius=0,t._stroke=0,t._progress=0,t.updateComponent(t._radius,t._stroke,t._progress),t}return u(o,[{key:"updateComponent",value:function(t,e,n){var r=t-2*e,o=2*r*Math.PI;this.styleElement.innerText="\n      .svg {\n        overflow: hidden;\n        width: ".concat(2*t,"px;\n        height: ").concat(2*t,"px;\n      }\n\n      .base-circle {\n        stroke: #fff;\n        stroke-dasharray: ").concat(o," ").concat(o,";\n        stroke-dashoffset: 0;\n        stroke-width: ").concat(e,";\n        fill: #48cae4;\n      }\n\n      .circle {\n        stroke: #0095b3;\n        stroke-dasharray: ").concat(o," ").concat(o,";\n        stroke-dashoffset: ").concat((1-n/100)*o,";\n        stroke-width: ").concat(e+2,";\n        fill: transparent;\n\n        transition: stroke-dashoffset 0.5s;\n        transform: rotate(-90deg);\n        transform-origin: 50% 50%;\n      }\n\n      .foreign-object {\n      }\n\n      .foreign-object-container {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n      }\n    "),this.foreignObjectElement.setAttribute("width",2*t),this.foreignObjectElement.setAttribute("height",2*t),this.circleElement.setAttribute("r",r),this.circleElement.setAttribute("cx",t),this.circleElement.setAttribute("cy",t),this.baseCircleElement.setAttribute("r",r),this.baseCircleElement.setAttribute("cx",t),this.baseCircleElement.setAttribute("cy",t),this.timerComponent.containerRadius=t}},{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"radius":var r=B(n);if(null===r)return void this.setAttribute(t,e);this._radius=r;break;case"stroke":var o=B(n);if(null===o)return void this.setAttribute(t,e);this._stroke=o;break;case"progress":var i=T(n);if(null===i)return void this.setAttribute(t,e);this._progress=i}this.updateComponent(this._radius,this._stroke,this._progress)}},{key:"radius",get:function(){return this._radius},set:function(t){var e=B(t);null!==e&&(this._radius=e,this.setAttribute("radius",this._radius))}},{key:"stroke",get:function(){return this._stroke},set:function(t){var e=B(t);null!==e&&(this._stroke=e,this.setAttribute("stroke",this._stroke))}},{key:"progress",get:function(){return this._progress},set:function(t){var e=T(t);null!==e&&(this._progress=e,this.setAttribute("progress",this._progress))}}],[{key:"observedAttributes",get:function(){return["radius","stroke","progress"]}}]),o}(h(HTMLElement));function j(t){return function(t){if(Array.isArray(t))return v(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||b(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var I=function(t){var e=x(t,!0);return null===e||e<0||e>4?null:e};const R=function(t){l(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=m(e);if(n){var o=m(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return d(this,t)});function o(){var t,e;return a(this,o),(e=r.call(this))._circleCount=0,e.styleElement=g("style",{innerText:"\n      .circle-container {\n        display: flex;\n      }\n      \n      .circle {\n        height: 15px;\n        width: 15px;\n        border: 1px solid white;\n        border-radius: 50%;\n        margin: 15px 7px 0px;\n        display: inline-block;\n      }\n\n      .circle.active {\n        background-color: #fff;\n      }\n      "}),e.shadow=e.attachShadow({mode:"open"}),e.counterContainer=g("div",{className:"circle-container"}),e.circles=new Array(4).fill(null).map((function(){return g("div",{className:"circle"})})),(t=e.counterContainer).append.apply(t,j(e.circles)),e.shadow.append(e.styleElement,e.counterContainer),e}return u(o,[{key:"attributeChangedCallback",value:function(t,e,n){if("circle-count"===t){var r=I(n);if(null===r)return void this.setAttribute(t,e);this.circles.forEach((function(t,e){e<r?t.classList.add("active"):t.classList.remove("active")}))}}},{key:"circleCount",get:function(){return this._circleCount},set:function(t){var e=I(t);null!==e&&(this._circleCount=e,this.setAttribute("circle-count",this._circleCount))}}],[{key:"observedAttributes",get:function(){return["circle-count"]}}]),o}(h(HTMLElement));var q="pomodoroInterval",D="longBreakInterval",M={calm:"assets/calm-alarm.mp3",annoying:"assets/original-alarm.mp3",kanye:"assets/kanye-stop.mp3"},F=function(t){var e=x(t,!0);return null===e||e<3||e>5?null:e},G=function(t){var e=x(t,!0);return null===e||e<15||e>30?null:e},z=function(t){var e=k(t);return null!==e&&Object.values(M).includes(e)?e:null};const H=function(t){l(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=m(e);if(n){var o=m(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return d(this,t)});function o(){var t;return a(this,o),(t=r.call(this))._shortBreakLength=0,t._longBreakLength=0,t._timerAudio="",t.styleElement=g("style",{innerText:"\n          .popup {\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%) scale(0);\n            transition: 200ms ease-in-out;\n            border-radius: 10px;\n            z-index: 5;\n            background-color: white;\n            width: 700px;\n            max-width: 80%;\n          }\n          \n          .popup.active {\n            transform: translate(-50%, -50%) scale(1);\n          }\n          \n          .settings-title {\n            font: 2rem 'Source Sans Pro', sans-serif;\n            color: #777;\n            letter-spacing: 0.1em;\n            margin: 0;\n          }\n          \n          .settings-hr {\n            margin-top: 0;\n            margin-bottom: 1.5em;\n          }\n          \n          .content {\n            font: 1.1rem 'Duru Sans', sans-serif;\n            padding: 20px;\n          }\n          \n          .content .form-input input {\n            text-decoration: none;\n            font: 1.1rem 'Duru Sans', sans-serif;\n            border: none;\n            text-align: center;\n            margin-left: 0.5em;\n          }\n          \n          .content .form-input {\n            text-align: center;\n            margin-bottom: 1em;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n          }\n          \n          .content .form-input .bounds {\n            color: #808080;\n            margin-left: 1em;\n          }\n\n          .content .form-input label {\n            line-height: 35px;\n            margin-right: 0.5em\n          }\n\n          select {\n            cursor: pointer;\n            font: 0.85rem 'Duru Sans', sans-serif;\n            display: inline-block;\n            vertical-align: middle;\n            padding: 5px;\n            width: 225px;\n            border: 1px solid #FFF;\n            height: 34px;\n            -webkit-appearance: none;\n            -moz-appearance: none;\n            appearance: none;\n            background: url(assets/sound.png) 96% / 10% no-repeat #EEE;\n          }\n          \n          .content button {\n            background-color: rgba(72, 202, 228, 1);\n            border: none;\n            border-radius: .25rem;\n            color: white;\n            font: 1.1rem 'Duru Sans', sans-serif;\n            text-align: center;\n            text-decoration: none;\n            margin: 1.5em auto 0.5em auto;\n            padding: 0.5em;\n            display: block;\n            width: 75%;\n            cursor: pointer;\n          }\n\n          .content button:hover {\n            background-color: rgba(72, 202, 228, 0.8);\n          }\n          \n          .content .error {\n            color: red;\n            position: absolute;\n            margin-top: 25px;\n            visibility: hidden;\n          }\n          \n          #overlay {\n            position: fixed;\n            opacity: 0;\n            transition: 200ms ease-in-out;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n            pointer-events: none;\n            z-index: 4;\n            cursor: pointer;\n          }\n          \n          #overlay.active {\n            opacity: 1;\n            pointer-events: all;\n          }\n        "}),t.shadow=t.attachShadow({mode:"open"}),t.popupContainer=g("div",{className:"popup",id:"popup"}),t.contentContainer=g("div",{className:"content"}),t.popupTitle=g("h1",{className:"settings-title",innerText:"SETTINGS"}),t.popupTitleLine=g("hr",{className:"settings-hr"}),t.inputContainerShort=g("div",{className:"form-input"}),t.inputLabelShort=g("label",{innerText:"Short Break: ",for:"short-number"}),t.inputBoxShort=g("input",{id:"short-number",name:"short-number",type:"number",min:"3",max:"5",value:t._shortBreakLength}),t.inputBoundShort=g("span",{className:"bounds",innerText:"3 - 5 minutes"}),t.inputErrorShort=g("p",{className:"error",innerText:"Please enter valid entry"}),t.inputErrorShort.style.visibility="hidden",t.inputContainerLong=g("div",{className:"form-input"}),t.inputLabelLong=g("label",{innerText:"Long Break: ",for:"long-number"}),t.inputBoxLong=g("input",{id:"long-number",name:"long-number",type:"number",min:"15",max:"30",value:t._longBreakLength}),t.inputBoundLong=g("span",{className:"bounds",innerText:"15 - 30 minutes"}),t.inputErrorLong=g("p",{className:"error",innerText:"Please enter valid entry"}),t.inputErrorLong.style.visibility="hidden",t.inputContainerSound=g("div",{className:"form-input"}),t.inputLabelSound=g("label",{for:"sound",innerText:"Sound: "}),t.inputBoxSound=g("select",{name:"sound",id:"sound"}),t.soundOption1=g("option",{value:"assets/calm-alarm.mp3",innerText:"Calm Alarm"}),t.soundOption2=g("option",{value:"assets/original-alarm.mp3",innerText:"Orginal Alarm"}),t.soundOption3=g("option",{value:"assets/kanye-stop.mp3",innerText:"Kanye Telling You to Stop"}),t.saveButton=g("button",{innerText:"SAVE",className:"save-button"}),t.overlayEl=g("div",{id:"overlay"}),t.inputContainerShort.append(t.inputLabelShort,t.inputBoxShort,t.inputBoundShort,t.inputErrorShort),t.inputContainerLong.append(t.inputLabelLong,t.inputBoxLong,t.inputBoundLong,t.inputErrorLong),t.inputBoxSound.append(t.soundOption1,t.soundOption2,t.soundOption3),t.inputContainerSound.append(t.inputLabelSound,t.inputBoxSound),t.contentContainer.append(t.popupTitle,t.popupTitleLine,t.inputContainerShort,t.inputContainerLong,t.inputContainerSound,t.saveButton),t.popupContainer.append(t.contentContainer),t.shadow.append(t.styleElement,t.popupContainer,t.overlayEl),t}return u(o,[{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"short-break-length":var r=F(n);if(null===r)return void this.setAttribute(t,e);this._shortBreakLength=r,this.inputBoxShort.value=this._shortBreakLength,this.inputErrorShort.visibility="hidden";break;case"long-break-length":var o=G(n);if(null===o)return void this.setAttribute(t,e);this._longBreakLength=o,this.inputBoxLong.value=this._longBreakLength,this.inputErrorLong.visibility="hidden";break;case"timer-audio":var i=z(n);if(null===i)return void this.setAttribute(t,e);this._timerAudio=i,this.inputBoxSound.value=this._timerAudio}}},{key:"shortBreakLength",get:function(){return this._shortBreakLength},set:function(t){var e=F(t);null!==e&&(this._shortBreakLength=e,this.setAttribute("short-break-length",this._shortBreakLength))}},{key:"longBreakLength",get:function(){return this._longBreakLength},set:function(t){var e=G(t);null!==e&&(this._longBreakLength=e,this.setAttribute("long-break-length",this._longBreakLength))}},{key:"timerAudio",get:function(){return this._timerAudio},set:function(t){var e=z(t);null!==e&&(this._timerAudio=e,this.setAttribute("timer-audio",this._timerAudio))}}],[{key:"observedAttributes",get:function(){return["short-break-length","long-break-length","timer-audio"]}}]),o}(h(HTMLElement));function J(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Y(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function V(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Y(Object(n),!0).forEach((function(e){J(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Y(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var K,U,$,Q,W,X,Z,tt,et,nt,rt,ot,it,at,st,ut,ct,lt=[],dt=function(){window.localStorage.setItem("tasks",JSON.stringify(lt))},mt=function(t){var e=t.name;return{taskIndex:lt.findIndex((function(t){return t.name===e})),taskElement:U.querySelector('[name="'.concat(e,'"]'))}},ft=function(t){return{delete:Array.from(t.shadowRoot.querySelectorAll(".task-button")).find((function(t){return"delete-button"===t.getAttribute("id")}))}},pt=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"end";if("end"!==e&&"start"!==e){var n=mt(e),r=n.taskElement;r.before(t)}else"end"===e?U.append(t):"start"===e&&U.prepend(t);return t},ht=function(t){var e=mt(t).taskElement;return e.remove(),e},vt=function(t,e){var n=mt(t),r=n.taskIndex,o=n.taskElement;return lt[r]=e,dt(),Object.getOwnPropertyNames(e).forEach((function(t){o[t]=e[t]})),e},bt=function(){return lt.find((function(t){return t.selected}))},yt=function(t){var e=bt();e&&vt(e,V(V({},e),{},{selected:!1}));var n=mt(t),r=n.taskElement,o=n.taskIndex;return ht(t),pt(r,"start"),lt.splice(o,1),lt.unshift(t),vt(t,V(V({},t),{},{selected:!0}))},gt=function(t){var e=t.name,n=t.usedPomodoros,r=t.estimatedPomodoros,o=t.selected,i=t.completed,a=g("task-item",{name:e,usedPomodoros:n,estimatedPomodoros:r,selected:o}),s=a.shadowRoot.querySelector(".text-container"),u=ft(a).delete;return i||(s.onclick=function(){return yt(t)}),u.onclick=function(){return n=mt(e=t).taskIndex,lt.splice(n,1),window.localStorage.setItem("tasks",JSON.stringify(lt)),void ht(e);var e,n},a},kt=function(t){t.preventDefault();var e,n,r,o=W,i=o.name,a=o.pomodoro,s=i.value,u=a.value,c=s.trim(),l=Number(u);i.focus(),n=gt(e={name:c,estimatedPomodoros:l,usedPomodoros:0,selected:!1,completed:!1}),-1!==(r=lt.findIndex((function(t){return t.completed})))?(lt.splice(r,0,e),pt(n,lt[r+1])):(lt.push(e),pt(n)),dt(),Object.values(W).forEach((function(t){t.value=""}))},xt=function(t){var e=t.target.value.trim();lt.some((function(t){return t.name===e}))?t.target.setCustomValidity("Duplicate task."):t.target.setCustomValidity("")},wt=function(){return lt.length>0&&!lt[0].completed?yt(lt[0]):null},Et=function(){lt.forEach((function(t){vt(t,V(V({},t),{},{selected:!1}))}))},St=function(t){lt.forEach((function(e){var n=mt(e).taskElement,r=n.shadowRoot,o=r.querySelector(".item-container"),i=r.querySelector(".text-container");t?o.classList.remove("disabled"):o.classList.add("disabled"),t&&!e.completed?i.onclick=function(){return yt(e)}:i.onclick=null;var a=ft(n);Object.values(a).forEach((function(e){e.disabled=!t}))}))},Lt=function(t){var e=mt(t),n=e.taskIndex,r=e.taskElement;ht(t),pt(r,"end"),r.selected=!1,r.completed=!0,r.shadowRoot.querySelector(".text-container").onclick=null;var o=y(lt.splice(n,1),1)[0];lt.push(V(V({},o),{},{selected:!1,completed:!0})),vt(t,V(V({},o),{},{selected:!1,completed:!0}))},_t=function(t){X=t},Ct=function(t){var e=T(t);null!==e&&(X.progress=e)},Ot=function(t){Z=t},Pt=function(t){Z.time=t},At=function(t){var e=I(t);null!==e&&(tt.circleCount=e)},Bt=function(t){tt=t},Tt=new Audio;Tt.volume=.2;var Nt,jt,It,Rt,qt,Dt,Mt,Ft,Gt,zt,Ht,Jt,Yt,Vt,Kt=function(){return et.shortBreakLength},Ut=function(){return et.longBreakLength},$t=function(){return et.timerAudio},Qt=function(t){var e=F(t);null!==e&&(et.shortBreakLength=e)},Wt=function(t){var e=G(t);null!==e&&(et.longBreakLength=e)},Xt=function(t){var e=z(t);null!==e&&(et.timerAudio=e)},Zt=function(){nt.classList.add("active"),ot.classList.add("active"),it.value=Kt(),at.value=Ut(),ut.value=$t()},te=function(){Tt.pause(),nt.classList.remove("active"),ot.classList.remove("active")},ee=te,ne=function(t,e){var n=function(){var t,e;try{t=JSON.parse(window.localStorage.getItem("shortBreakLength")),e=JSON.parse(window.localStorage.getItem("longBreakLength"))}catch(n){t=null,e=null}return t&&null!==F(t)||(t=5,window.localStorage.setItem("shortBreakLength",t)),e&&null!==G(e)||(e=15,window.localStorage.setItem("longBreakLength",e)),{shortBreakLength:t,longBreakLength:e}}(),r=n.shortBreakLength,o=n.longBreakLength;!function(t){var e=(et=t).shadowRoot;nt=e.querySelector(".popup"),rt=e.querySelector(".save-button"),ot=e.querySelector("#overlay"),it=e.querySelector("#short-number"),at=e.querySelector("#long-number"),st=e.querySelector("#sound"),ut=e.querySelector("#sound"),ct=e.querySelectorAll(".error")}(t),Qt(r),Wt(o);var i=window.localStorage.getItem("timerAudio");null===z(i)?(Xt(M.calm),window.localStorage.setItem("timerAudio",M.calm)):Xt(i),ot.onclick=te,rt.addEventListener("click",(function(){var t=function(){var t=F(it.value),e=G(at.value),n=z(st.value),r=null!==t,o=null!==e;return ct[0].style.visibility=r?"hidden":"visible",ct[1].style.visibility=o?"hidden":"visible",r&&o?(Xt(ut.value),Qt(t),Wt(e),window.localStorage.setItem("shortBreakLength",t),window.localStorage.setItem("longBreakLength",e),window.localStorage.setItem("timerAudio",n),[t,e]):null}();t&&(ee(),e.apply(void 0,j(t)))})),ut.onchange=function(){Tt.pause(),Tt.src=ut.value,Tt.play()}},re=function(t){jt=(Nt=t).querySelector(".announcement"),It=Nt.querySelector(".announcement-yes-button"),Rt=Nt.querySelector(".announcement-no-button"),It.onmousedown=function(t){return t.preventDefault()},Rt.onmousedown=function(t){return t.preventDefault()}},oe=function(t){jt.innerText=t},ie=function(t){Rt.onclick=t},ae=function(t){"visible"===t?(It.classList.remove("hidden"),Rt.classList.remove("hidden")):(It.classList.add("hidden"),Rt.classList.add("hidden"))},se=function(){qt.classList.add("active")},ue=function(){qt.classList.remove("active")},ce=function(t,e){!function(t){Dt=(qt=t).querySelector("#confirmation-popup"),Mt=Dt.querySelector(".confirmation-no-button"),Ft=Dt.querySelector(".confirmation-yes-button")}(t),Mt.onmousedown=function(t){return t.preventDefault()},Ft.onmousedown=function(t){return t.preventDefault()},Ft.onclick=function(){ue(),e()},Mt.onclick=ue,qt.onclick=ue,Dt.onclick=function(t){return t.stopPropagation()}},le=function(){Gt.classList.remove("active"),Ht.innerHTML=""},de=function(t,e){var n,r,o;!function(t){zt=(Gt=t).querySelector("#summary-popup"),Ht=Gt.querySelector(".task-summary-list"),Jt=Gt.querySelector(".summary-actual-pomos"),Yt=Gt.querySelector(".summary-estimated-pomos"),Vt=Gt.querySelector(".summary-close-button")}(t),r=(n=e).filter((function(t){return t.completed})),o=n.filter((function(t){return!t.completed})),[].concat(j(r),j(o)).forEach((function(t){var e=function(t){var e=t.name,n=t.usedPomodoros,r=t.estimatedPomodoros,o=t.completed,i=g("div",{className:"task-summary-item ".concat(o?"completed":"incompleted")}),a=g("span",{className:"task-summary-name",innerText:e}),s=g("span",{className:"task-summary-pomodoros",innerText:"".concat(n,"/").concat(r)});return i.append(a,s),i}(t);Ht.append(e)}));var i=e.reduce((function(t,e){return{actual:t.actual+e.usedPomodoros,estimated:t.estimated+e.estimatedPomodoros}}),{actual:0,estimated:0}),a=i.actual,s=i.estimated;Jt.innerText="Actual: ".concat(a),Yt.innerText="Estimated: ".concat(s),Vt.onclick=le,Vt.onmousedown=function(t){return t.preventDefault()},Gt.onclick=le,zt.onclick=function(t){return t.stopPropagation()}};customElements.define("timer-component",A),customElements.define("progress-ring",N),customElements.define("task-list",O),customElements.define("settings-component",H),customElements.define("pomodoro-circles",R);var me,fe,pe=!1,he=new Audio;he.volume=.2;var ve=function(){var t=r(i().mark((function t(e){var n,r;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e;case 1:if(!(n>=0)){t.next=12;break}if(pe){t.next=4;break}return t.abrupt("return",!1);case 4:return r=100*n/e,Pt(n),Ct(r),t.next=9,E(1);case 9:n--,t.next=1;break;case 12:return t.abrupt("return",!0);case 13:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),be=function(){var e=r(i().mark((function e(n){var r,o,a,s;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:r=0,o=q,a=null;case 3:if(!pe){e.next=38;break}if(o!==q){e.next=29;break}if((a=bt())||(a=wt()),a){e.next=9;break}return e.abrupt("return",0===r?-1:r);case 9:return 0===r&&n(),r%4==0&&At(0),St(!1),oe("Focus."),e.next=15,ve(3);case 15:if(e.sent){e.next=18;break}return e.abrupt("return",r);case 18:void 0,c=(u=a).usedPomodoros,a=vt(u,V(V({},u),{},{usedPomodoros:c+1})),he.pause(),he.src=$t(),he.play(),r++,At((r-1)%4+1),o=r>0&&r%4==0?D:"shortBreakInterval",e.next=33;break;case 29:return e.delegateYield(i().mark((function t(){var e,n,s;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return ae("visible"),oe("Did you finish the task?"),e=a,n=o===D?"Good work. Enjoy a longer break!":"Enjoy your short break!",s=!1,i=function(){Lt(e),wt(),oe(n),ae("hidden"),s=!0,St(!0)},It.onclick=i,ie((function(){oe(n),ae("hidden"),s=!0})),t.next=9,ve(o===D?60*fe:60*me);case 9:if(t.sent){t.next=12;break}return t.abrupt("return",{v:r});case 12:he.pause(),he.src=$t(),he.play(),s||ae("hidden"),o=q;case 17:case"end":return t.stop()}var i}),t)}))(),"t0",30);case 30:if("object"!==t(s=e.t0)){e.next=33;break}return e.abrupt("return",s.v);case 33:return Ct(100),e.next=36,E(.5);case 36:e.next=3;break;case 38:return e.abrupt("return",r);case 39:case"end":return e.stop()}var u,c}),e)})));return function(t){return e.apply(this,arguments)}}(),ye=function(t,e){oe(-1===e?"No work to be done.":"Good work today!"),Et(),t.innerText="Start",t.className="session-button",e>0&&(de(document.querySelector("#summary-overlay"),lt),Gt.classList.add("active"))};window.addEventListener("DOMContentLoaded",(function(){var t=document.querySelector(".material-icons"),e=document.querySelector(".progress-ring"),n=e.shadowRoot.querySelector(".timer"),o=e.shadowRoot.querySelector(".circles"),a=document.querySelector(".session-button"),s=document.querySelector(".announcement-container"),u=document.querySelector(".task-list"),c=document.querySelector("#confirmation-overlay"),l=document.querySelector(".settings");_t(e),Ot(n),Bt(o),re(s),function(t){K=t.shadowRoot.querySelector(".container"),U=K.querySelector(".task-item-container"),$=K.querySelector(".task-item-form"),Q=$.shadowRoot.querySelector(".task-form"),W={name:Q.querySelector("#name-input"),pomodoro:Q.querySelector("#pomodoro-input")}}(u),Q.addEventListener("submit",kt),function(){var t;try{t=JSON.parse(window.localStorage.getItem("tasks"))}catch(e){t=null}t||(window.localStorage.setItem("tasks",JSON.stringify([])),t=[]),t=t.filter(L),(lt=t).forEach((function(t){return pt(gt(t))}))}(),W.name.oninput=xt,ce(c,(function(){pe=!1})),ne(l,(function(t,e){me=t,fe=e}));var d=document.querySelector(".navbar");window.onscroll=function(){0===window.scrollY?d.classList.remove("scrolled"):d.classList.add("scrolled")},me=Kt(),fe=Ut(),me=.05,fe=.1,t.onclick=Zt,a.onmousedown=function(t){t.preventDefault()},n.onclick=function(){return he.pause()},Pt(3),Et(),a.addEventListener("click",r(i().mark((function t(){var e,n;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if("Start"!==a.innerText){t.next=14;break}return pe=!0,e=function(){a.innerText="End",a.classList.add("session-button","in-session")},t.next=5,be(e);case 5:n=t.sent,St(!0),ae("hidden"),Ct(100),Pt(3),At(0),ye(a,n),t.next=15;break;case 14:se();case 15:case"end":return t.stop()}}),t)}))))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,