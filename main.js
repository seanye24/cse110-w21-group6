(()=>{"use strict";const t=(t,e={},n={})=>{const{namespace:s}=n;let i;return i=s?document.createElementNS(s,t):document.createElement(t),Object.entries(e).forEach((([t,e])=>{s||!(t in i)?i.setAttribute(t,e):i[t]=e})),i},e=t=>{const e=parseInt(t,10);return Number.isNaN(e)?null:e};class n extends HTMLElement{static get observedAttributes(){return["title","description"]}constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.styleElement=document.createElement("style"),this.styleElement.innerText="\n      .container {\n        background: lightblue;\n        font-family: Roboto, sans-serif;\n        margin: 1em;\n        padding: 0.5em;\n        position: relative;\n        border-radius: 5px;\n      }\n\n      .title {\n        font-size: 1.25rem;\n      }\n\n      .description {\n        font-size: 1rem;\n        color: darkgray;\n      }\n\n      .task-button {\n        position: absolute;\n        padding: 0.5em;\n        color: rgba(51, 51, 51, 0.5);\n      }\n\n      .task-button:hover {\n        border-radius: 50%;\n        background: rgba(238, 238, 238, 0.5);\n        color: rgba(51, 51, 51, 1);\n        cursor: pointer;\n      }\n\n      #edit-button {\n        display: none;\n      }\n\n      .container:hover > #edit-button {\n        display: initial;\n        top: 0;\n        right: 0;\n      }\n\n      #finish-button {\n        bottom: 0;\n        right: 1.5em;\n      }\n\n      #delete-button {\n        bottom: 0;\n        right: 0;\n      }\n    ",this.materialIconLinkElement=t("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/icon?family=Material+Icons"}),this.containerElement=t("div",{className:"container"}),this.titleElement=t("h1",{className:"title"}),this.descriptionElement=t("h2",{className:"description"}),this.editTaskButton=t("span",{className:"material-icons task-button",id:"edit-button",innerText:"mode"}),this.finishTaskButton=t("span",{className:"material-icons task-button",id:"finish-button",innerText:"done"}),this.deleteTaskButton=t("span",{className:"material-icons task-button",id:"delete-button",innerText:"delete"}),this.shadow.append(this.materialIconLinkElement,this.styleElement,this.containerElement),this.containerElement.append(this.titleElement,this.descriptionElement,this.editTaskButton,this.finishTaskButton,this.deleteTaskButton)}attributeChangedCallback(t,e,n){switch(t){case"title":this.titleElement.innerText=n;break;case"description":this.descriptionElement.innerText=n}}}customElements.define("task-item",n);class s extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.styleElement=document.createElement("style"),this.styleElement.innerText="\n      .task-form {\n        margin: 1em;\n        padding: 1em 20%;\n        font-family: Roboto, sans-serif;\n        display: flex;\n        flex-direction: column;\n        border-radius: 5px;\n      }\n\n      .task-input[type='text'] {\n        margin-bottom: 1em;\n        padding: 0.75em;\n        border-radius: 5px;\n        border: 1px solid #777;\n        font-size: 0.9rem;\n        color: #444;\n      }\n\n      .task-input[type='text']:focus {\n        border: 2px solid #0077b6;\n        outline: none;\n        box-shadow: none;\n      }\n\n      .task-input[type='text']::placeholder {\n        color: #777;\n      }\n\n      #submit-input {\n        width: 100%;\n        margin: auto;\n        background: rgba(51, 51, 51, 0.75);\n        border-radius: 5px;\n        outline: none;\n        border: none;\n        color: white;\n        padding: 1em;\n        font-size: 1rem;\n      }\n\n      #submit-input:hover {\n        cursor: pointer;\n        background: rgba(51, 51, 51, 1);\n      }\n    ",this.containerElement=t("form",{className:"task-form"}),this.titleInputLabel=t("label",{for:"title-input",innerText:"Title"}),this.titleInputElement=t("input",{className:"task-input",id:"title-input",type:"text",name:"title",placeholder:"task title"}),this.descriptionInputLabel=t("label",{for:"description-input",innerText:"Description"}),this.descriptionInputElement=t("input",{className:"task-input",id:"description-input",type:"text",name:"description",placeholder:"task description"}),this.submitInputElement=t("input",{className:"task-input",id:"submit-input",type:"submit",value:"Add"}),this.shadow.append(this.styleElement,this.containerElement),this.containerElement.append(this.titleInputLabel,this.titleInputElement,this.descriptionInputLabel,this.descriptionInputElement,this.submitInputElement)}}customElements.define("task-item-form",s);class i extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.styleElement=document.createElement("style"),this.styleElement.innerText="\n      .container {\n        margin: 1em;\n        font-family: Roboto, sans-serif;\n        border: 1px solid #aaa;\n        border-radius: 5px;\n      }\n\n      .title {\n        text-align: center;\n      }\n    ",this.containerElement=t("div",{className:"container"}),this.titleElement=t("h1",{className:"title",innerText:"Task List"}),this.taskItemListContainerElement=t("div",{className:"task-item-container"}),this.taskItemFormElement=t("task-item-form",{className:"task-item-form"}),this.shadow.append(this.styleElement,this.containerElement),this.containerElement.append(this.titleElement,this.taskItemListContainerElement,this.taskItemFormElement)}}customElements.define("task-list",i);let r=[];const o=t("task-list",{}),a=Array.from(o.shadowRoot.childNodes).find((t=>"container"===t.className)),l=a.querySelector(".task-item-container"),d=a.querySelector(".task-item-form"),c=Array.from(d.shadowRoot.childNodes).find((t=>"task-form"===t.className)),m=Array.from(c.querySelectorAll('.task-input[type="text"]')).reduce(((t,e)=>({...t,[e.name]:e})),{}),h=t=>{const{title:e,description:n}=t,s=r.findIndex((({title:t,description:s})=>e===t&&n===s));r.splice(s,1),window.localStorage.setItem("tasks",JSON.stringify(r)),l.querySelector(`[title="${e}"][description="${n}"]`).remove()},p=e=>{const{title:n,description:s}=e,i=t("task-item",{title:n,description:s}),r=(t=>{const e=Array.from(Array.from(t.shadowRoot.childNodes).find((t=>"container"===t.getAttribute("class"))).querySelectorAll(".task-button"));return{finish:e.find((t=>"finish-button"===t.getAttribute("id"))),delete:e.find((t=>"delete-button"===t.getAttribute("id"))),edit:e.find((t=>"edit-button"===t.getAttribute("id")))}})(i);r.finish.addEventListener("click",(()=>h(e))),r.delete.addEventListener("click",(()=>h(e))),r.edit.addEventListener("click",(()=>window.alert("editting task!"))),l.append(i)},u=t=>{t.preventDefault();const{title:{value:e},description:{value:n}}=m,[s,i]=[e.trim(),n.trim()];var o;s&&i?r.some((({title:t,description:e})=>s===t&&i===e))?console.error({title:s,description:i}," already defined"):(o={title:s,description:i},r.push(o),window.localStorage.setItem("tasks",JSON.stringify(r)),p(o),Object.values(m).forEach((t=>({...t,value:""})))):console.error("task fields cannot be empty")};class b extends HTMLElement{static get observedAttributes(){return["radius","stroke","progress"]}constructor(){super(),this.root=this.attachShadow({mode:"open"}),this.styleElement=document.createElement("style");const e="http://www.w3.org/2000/svg";this.svgElement=t("svg",{class:"svg"},{namespace:e}),this.circleElement=t("circle",{class:"circle"},{namespace:e}),this._radius=0,this._stroke=0,this._progress=0,this.updateComponent(this._radius,this._stroke,this._progress),this.root.append(this.styleElement,this.svgElement),this.svgElement.appendChild(this.circleElement)}updateComponent(t,e,n){const s=t-2*e,i=2*s*Math.PI;this.styleElement.innerText=`\n      .svg {\n        overflow: hidden;\n        width: ${2*t}px;\n        height: ${2*t}px;\n      }\n\n      .circle {\n        stroke: #0095b3;\n        stroke-dasharray: ${i} ${i};\n        stroke-dashoffset: ${(1-n/100)*i};\n        fill: transparent;\n        stroke-width: ${e};\n\n        transition: stroke-dashoffset 0.5s;\n        transform: rotate(-90deg);\n        transform-origin: 50% 50%;\n      }\n    `,this.circleElement.setAttribute("r",s),this.circleElement.setAttribute("cx",t),this.circleElement.setAttribute("cy",t)}attributeChangedCallback(t,n,s){const i=e(s);if(null!==i){switch(t){case"radius":case"stroke":if(i<0)return;break;case"progress":if("progress"===t&&(i<0||i>100))return;break;default:return}this[`_${t}`]=i,this.updateComponent(this._radius,this._stroke,this._progress)}}get radius(){return this._radius}set radius(t){const n=e(t);this.setAttribute("radius",n)}get stroke(){return this._stroke}set stroke(t){const n=e(t);this.setAttribute("stroke",n)}get progress(){return this._progress}set progress(t){const n=e(t);this.setAttribute("progress",n)}}const g=b;let k;window.customElements.define("progress-ring",g);window.addEventListener("DOMContentLoaded",(()=>{((e,n=0,s=0,i=0)=>{k=t("progress-ring",{radius:n,stroke:s,progress:i}),e.appendChild(k)})(document.body,Math.min(window.innerWidth/3,window.innerHeight/3),10,100),((t,e)=>{const n=setInterval((()=>{var e;k.progress<=0&&clearInterval(n),e=k.progress-t,k.progress=e}),e)})(.5,60),document.body.appendChild(o),c.addEventListener("submit",u),window.localStorage.getItem("tasks")||window.localStorage.setItem("tasks",JSON.stringify([])),r=JSON.parse(window.localStorage.getItem("tasks")),r.forEach((t=>p(t)))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,