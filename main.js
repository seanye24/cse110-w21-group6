(()=>{var e={757:(e,t,n)=>{e.exports=n(666)},666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof b?t:b,a=Object.create(o.prototype),i=new O(r||[]);return a._invoke=function(e,t,n){var r=m;return function(o,a){if(r===f)throw new Error("Generator is already running");if(r===p){if("throw"===o)throw a;return I()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var s=x(i,n);if(s){if(s===h)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===m)throw r=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=f;var c=l(e,t,n);if("normal"===c.type){if(r=n.done?p:d,c.arg===h)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=p,n.method="throw",n.arg=c.arg)}}}(e,n,i),a}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var m="suspendedStart",d="suspendedYield",f="executing",p="completed",h={};function b(){}function v(){}function g(){}var k={};k[a]=function(){return this};var y=Object.getPrototypeOf,w=y&&y(y(P([])));w&&w!==n&&r.call(w,a)&&(k=w);var E=g.prototype=b.prototype=Object.create(k);function L(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,s){var c=l(e[o],e,a);if("throw"!==c.type){var u=c.arg,m=u.value;return m&&"object"==typeof m&&r.call(m,"__await")?t.resolve(m.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(m).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,s)}))}s(c.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function x(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,x(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=l(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function P(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:I}}function I(){return{value:t,done:!0}}return v.prototype=E.constructor=g,g.constructor=v,v.displayName=c(g,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,c(e,s,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},L(S.prototype),S.prototype[i]=function(){return this},e.AsyncIterator=S,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new S(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},L(E),c(E,s,"Generator"),E[a]=function(){return this},E.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=P,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;T(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:P(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";function e(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function m(e,t,n){return(m=l()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&a(o,n.prototype),o}).apply(null,arguments)}function d(e){var t="function"==typeof Map?new Map:void 0;return(d=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return m(e,arguments,u(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),a(r,e)})(e)}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function p(e,t){if(e){if("string"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?f(e,t):void 0}}function h(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}}(e,t)||p(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var b="Focus.",v="Enjoy your short break!",g="Good work. Enjoy a longer break!",k="Did you finish the task?",y="pomodoroInterval",w="shortBreakInterval",E="longBreakInterval",L="shortBreakLength",S="longBreakLength",x="timerAudio",C="tasks",T={calm:"assets/calm-alarm.mp3",annoying:"assets/original-alarm.mp3",kanye:"assets/kanye-stop.mp3"},O={changeSession:"change current session",changeCurrentTime:"change current time",changeCurrentInterval:"change current interval",changeNumberOfPomodoros:"change number of pomodoros completed",changePomodoroLength:"change pomodoro length",changeShortBreakLength:"change short break length",changeLongBreakLength:"change long break length",changeTimerAudio:"change timer audio",changeSelectedTask:"change currently selected task",incrementSelectedTask:"increment current task",completeSelectedTask:"complete current task",doNotCompleteSelectedTask:"do not complete current task",addToCompletedTasks:"add to completed tasks",clearCompletedTasks:"clear completed tasks"};function P(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function I(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?P(Object(r),!0).forEach((function(n){e(t,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):P(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var B=new Audio;B.volume=.2;var _={session:"inactive",numberOfPomodorosCompleted:0,currentTime:0,currentInterval:y,currentSelectedTask:null,completedTasks:[],pomodoroLength:.05,shortBreakLength:0,longBreakLength:0,timerAudio:B},A=Object.values(O).reduce((function(t,n){return I(I({},t),{},e({},n,[]))}),{}),N=function(e){return"object"===s(e)&&null!==e&&Object.entries(e).forEach((function(e){var t=h(e,2),n=t[0],r=t[1];Object.prototype.hasOwnProperty.call(A,n)&&A[n].push(r)})),_},j=function(e,t){switch(e){case O.changeSession:_.session=t;break;case O.changeCurrentTime:_.currentTime=t;break;case O.changeCurrentInterval:_.currentInterval=t;break;case O.changeSelectedTask:_.currentSelectedTask=t;break;case O.incrementSelectedTask:case O.completeSelectedTask:case O.doNotCompleteSelectedTask:break;case O.addToCompletedTasks:_.completedTasks.push(t);break;case O.clearCompletedTasks:_.completedTasks=[];break;case O.changeNumberOfPomodoros:_.numberOfPomodorosCompleted=t;break;case O.changePomodoroLength:_.pomodoroLength=t;break;case O.changeShortBreakLength:_.shortBreakLength=t;break;case O.changeLongBreakLength:_.longBreakLength=t;break;case O.changeTimerAudio:_.timerAudio.src=t;break;default:return}A[e].forEach((function(e){return e(_)}))};function R(e,t,n,r,o,a,i){try{var s=e[a](i),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}function q(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){R(a,r,o,i,s,"next",e)}function s(e){R(a,r,o,i,s,"throw",e)}i(void 0)}))}}var D=n(757),M=n.n(D),F=function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=r.namespace;return t=o?document.createElementNS(o,e):document.createElement(e),Object.entries(n).forEach((function(e){var n=h(e,2),r=n[0],a=n[1];o||!(r in t)?t.setAttribute(r,a):t[r]=a})),t},G=function(e){return"string"==typeof e||e instanceof String?e:null},H=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n="number"==typeof e||e instanceof Number||null!==G(e),r=Number(e);return!n||Number.isNaN(r)?null:t?Math.floor(r):r},z=function(e){if("boolean"==typeof e||e instanceof Boolean)return e;var t=null!==G(e);return!(!t||"true"!==e)||(!t||"false"!==e)&&null},J=function(){var e=q(M().mark((function e(t){return M().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e){return setTimeout(e,1e3*t)})));case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Y=function(e){var t=H(e,!0);return null===t||t<0?null:t},V=function(e){try{var t=e.name,n=e.usedPomodoros,r=e.estimatedPomodoros,o=e.selected,a=e.completed,i=null!==G(t),s=null!==Y(n),c=null!==Y(r),u=null!==z(o),l=null!==z(a);return i&&s&&c&&l&&u?{name:t,usedPomodoros:n,estimatedPomodoros:r,selected:o,completed:a}:null}catch(e){return null}};const K=function(n){i(l,n);var r,a,s=(r=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(r);if(a){var n=u(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return c(this,e)});function l(){var n,r;return t(this,l),(r=s.call(this))._name="",r._usedPomodoros=0,r._estimatedPomodoros=0,r._selected=!1,r._completed=!1,r.shadow=r.attachShadow({mode:"open"}),r.styleElement=document.createElement("style"),r.styleElement.innerText="\n      .item-container {\n        margin-bottom: 1em;\n        padding: 0.5em 2em;\n        border-radius: 5px;\n        position: relative;\n        cursor: pointer;\n      }\n\n      .item-container:focus {\n        outline: none;\n      }\n\n      .item-container.selected.pomodoro {\n        background: #90e0ef;\n      }\n\n      .item-container.selected.short-break {\n        background: #7ce407;\n      }\n\n      .item-container.selected.long-break {\n        background: #f99e3d;\n      }\n\n      .text-container {\n        background: rgba(255, 255, 255, 1);\n        color: #555;\n        position: relative;\n        padding: 0.5em;\n        border-radius: 5px;\n        width: 100%;\n        text-align: left;\n        font: 1rem Source Sans Pro, sans-serif;\n        border: none;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n      }\n\n      .item-container:not(.disabled):not(.selected):not(.completed) > .text-container:hover {\n        background: rgba(255, 255, 255, 0.8);\n      }\n\n      .text-container:focus {\n        outline: none;\n        box-shadow: 0 0 0 2pt #90e0ef;\n      }\n\n      .item-container.selected > .text-container:focus {\n        box-shadow: 0 0 0 2pt #00b4d8;\n      }\n      \n      .task-name {\n        width: 80%;\n        display: inline-block;\n        margin: 0.5em 0;\n      }\n\n      .item-container.completed .task-name {\n        text-decoration: line-through;\n      }\n      \n      .task-pomodoro-container {\n        width: 20%;\n        height: 100%;\n        display: inline-block;\n        position: relative;\n        text-align: right;\n      }\n\n      .task-pomodoro-label {\n        position: absolute;\n        top: -0.5em;\n        right: 0;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      .task-pomodoro {\n        display: inline-block;\n        margin: 1em 0 0 0;\n      }\n\n      .task-button {\n        opacity: 0;\n        position: absolute;\n        border: none;\n        padding: 0.25em;\n        color: rgba(255, 255, 255, 1); \n        background: transparent;\n        border-radius: 50%;\n      }\n\n      .item-container:hover:not(.disabled) > .task-button,\n      .task-button:focus {\n        opacity: 1;\n      }\n\n      .task-button:focus {\n        outline: none;\n        z-index: 1;\n        position: absolute;\n      }\n\n      .task-button:focus {\n        box-shadow: inset 0 0 0 2pt #90e0ef;\n      }\n\n      .item-container.selected > .task-button:focus {\n        box-shadow: inset 0 0 0 2pt #00b4d8;\n      }\n\n      .task-button:hover {\n        border-radius: 50%;\n        color: rgba(255, 255, 255, 0.8); \n        cursor: pointer;\n        background: rgba(255, 255, 255, 0.3);\n      }\n\n      .item-container.selected > .task-button,\n      .item-container.selected > .task-button:hover {\n        color: rgba(0, 0, 0, 0.54);\n      }\n\n      .task-button:disabled {\n        opacity: 0;\n      }\n\n      .task-button-icon {\n        font-size: 1.2rem;\n      }\n\n      #delete-button {\n        top: 50%;\n        right: 0;\n        transform: translate(0, -50%);\n      }\n    ",r.materialIconLinkElement=F("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/icon?family=Material+Icons"}),r.itemContainerElement=F("div",{className:"item-container pomodoro"}),r.textContainerElement=F("button",{className:"text-container",onmouseout:function(e){e.target.blur()},onmousedown:function(e){e.preventDefault()}}),r.nameElement=F("p",{className:"task-name"}),r.pomodoroContainer=F("span",{className:"task-pomodoro-container"}),r.pomodoroLabel=F("label",{className:"task-pomodoro-label",for:"task-pomodoro",innerText:"Pomodoros"}),r.pomodoroElement=F("p",{className:"task-pomodoro",id:"task-pomodoro"}),r.deleteTaskButton=F("button",{className:"task-button",id:"delete-button",onmouseout:function(e){e.target.blur()},onmousedown:function(e){e.preventDefault()}}),r.deleteTaskIcon=F("span",{className:"material-icons task-button-icon",innerText:"delete"}),r.shadow.append(r.materialIconLinkElement,r.styleElement,r.itemContainerElement),r.itemContainerElement.append(r.textContainerElement,r.deleteTaskButton),r.deleteTaskButton.appendChild(r.deleteTaskIcon),r.textContainerElement.append(r.nameElement,r.pomodoroContainer),r.pomodoroContainer.append(r.pomodoroLabel,r.pomodoroElement),N((e(n={},O.changeSession,(function(e){"inactive"===e.session&&(r.itemContainerElement.classList.add("pomodoro"),r.itemContainerElement.classList.remove("short-break"),r.itemContainerElement.classList.remove("long-break"))})),e(n,O.changeCurrentInterval,(function(e){if("active"===e.session)switch(e.currentInterval){case y:r.itemContainerElement.classList.add("pomodoro"),r.itemContainerElement.classList.remove("short-break"),r.itemContainerElement.classList.remove("long-break");break;case w:r.itemContainerElement.classList.remove("pomodoro"),r.itemContainerElement.classList.add("short-break"),r.itemContainerElement.classList.remove("long-break");break;case E:r.itemContainerElement.classList.remove("pomodoro"),r.itemContainerElement.classList.remove("short-break"),r.itemContainerElement.classList.add("long-break");break;default:r.itemContainerElement.classList.add("pomodoro"),r.itemContainerElement.classList.remove("short-break"),r.itemContainerElement.classList.remove("long-break")}})),n)),r}return o(l,[{key:"attributeChangedCallback",value:function(e,t,n){switch(e){case"name":var r=G(n);this.nameElement.innerText=r,this._name=r;break;case"used-pomodoros":var o=Y(n);if(null===o)return void this.setAttribute(e,t);this._usedPomodoros=o,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"estimated-pomodoros":var a=Y(n);if(null===a)return void this.setAttribute(e,t);this._estimatedPomodoros=a,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"selected":var i=z(n);if(null===i)return void this.setAttribute(e,t);this._selected=i,i?this.itemContainerElement.classList.add("selected"):this.itemContainerElement.classList.remove("selected");break;case"completed":var s=z(n);if(null===s)return void this.setAttribute(e,t);this._completed=s,s?this.itemContainerElement.classList.add("completed"):this.itemContainerElement.classList.remove("completed")}}},{key:"name",get:function(){return this._name},set:function(e){var t=G(e);null!==t&&(this._name=t,this.setAttribute("name",this._name))}},{key:"usedPomodoros",get:function(){return this._usedPomodoros},set:function(e){var t=Y(e);null!==t&&(this._usedPomodoros=t,this.setAttribute("used-pomodoros",this._usedPomodoros))}},{key:"estimatedPomodoros",get:function(){return this._estimatedPomodoros},set:function(e){var t=Y(e);null!==t&&(this._estimatedPomodoros=t,this.setAttribute("estimated-pomodoros",this._estimatedPomodoros))}},{key:"selected",get:function(){return this._selected},set:function(e){var t=z(e);null!==t&&(this._selected=t,this.setAttribute("selected",this._selected))}},{key:"completed",get:function(){return this._completed},set:function(e){var t=z(e);null!==t&&(this._completed=t,this.setAttribute("completed",this._completed))}}],[{key:"observedAttributes",get:function(){return["name","estimated-pomodoros","used-pomodoros","selected","completed"]}}]),l}(d(HTMLElement));const U=function(n){i(s,n);var r,o,a=(r=s,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(r);if(o){var n=u(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return c(this,e)});function s(){var n,r;return t(this,s),(r=a.call(this)).shadow=r.attachShadow({mode:"open"}),r.styleElement=document.createElement("style"),r.styleElement.innerText="\n      .task-form {\n        margin: 1em;\n        padding: 1em ;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .field-input-container {\n        margin-bottom: 1em;\n        border-radius: 5px;\n        position: relative;\n        width: 100%;\n        display: flex;\n      }\n\n      .name-input-container {\n        flex: 4;\n        position: relative;\n      }\n\n      .pomodoro-input-container {\n        flex: 1;\n        min-width: 95px;\n        position: relative;\n      }\n\n      .task-input-label {\n        position: absolute;\n        z-index: 2;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      #name-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      #pomodoro-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      .task-input[type='text'],\n      .task-input[type='number'] {\n        padding: 1.5em 0.75em 0.75em 0.75em;\n        border: none;\n        font: 1rem 'Source Sans Pro', sans-serif;\n        color: #444;\n        box-sizing: border-box;\n        width: 100%;\n      }\n\n      .task-input:focus {\n        box-shadow: 0 0 0 2pt #c8c8c8;\n        outline: none;\n        z-index: 1;\n        position: relative;\n      }\n\n      #name-input {\n        border-top-left-radius: 5px;\n        border-bottom-left-radius: 5px;\n      }\n\n      #pomodoro-input {\n        border-top-right-radius: 5px;\n        border-bottom-right-radius: 5px;\n      }\n\n      .task-input[type='text']::placeholder,\n      .task-input[type='number']::placeholder {\n        color: #c8c8c8;\n      }\n\n      #submit-input {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        width: 50%;\n        margin: auto;\n        border-radius: 5px;\n        outline: none;\n        border: none;\n        color: white;\n        padding: 0.5em;\n        font: 1.1rem 'Duru Sans', sans-serif;\n      }\n\n      #submit-input.pomodoro {\n        background: rgb(77, 207, 233);\n      }\n\n      #submit-input.short-break {\n        background: #69da00;\n      }\n\n      #submit-input.long-break {\n        background: #f98f38;\n      }\n\n      #submit-input.pomodoro:hover {\n        background: rgb(112, 216, 237);\n        cursor: pointer;\n      }\n\n      #submit-input.short-break:hover {\n        background: #7ce407;\n        cursor: pointer;\n      }\n\n      #submit-input.long-break:hover {\n        background: #f99e3d;\n        cursor: pointer;\n      }\n    ",r.containerElement=F("form",{className:"task-form"}),r.fieldInputContainer=F("div",{className:"field-input-container"}),r.nameInputContainer=F("div",{className:"name-input-container"}),r.nameInputLabel=F("label",{className:"task-input-label",id:"name-input-label",for:"name-input",innerText:"Name"}),r.nameInputElement=F("input",{className:"task-input",id:"name-input",type:"text",name:"name",placeholder:"Task Description...",required:!0}),r.pomodoroInputContainer=F("div",{className:"pomodoro-input-container"}),r.pomodoroInputLabel=F("label",{className:"task-input-label",id:"pomodoro-input-label",for:"pomodoro-input",innerText:"Est Pomodoros"}),r.pomodoroInputElement=F("input",{className:"task-input",id:"pomodoro-input",type:"number",name:"pomodoro",placeholder:"#",min:"1",required:!0}),r.submitInputElement=F("input",{className:"task-input pomodoro",id:"submit-input",type:"submit",value:"ADD"}),r.shadow.append(r.styleElement,r.containerElement),r.containerElement.append(r.fieldInputContainer,r.submitInputElement),r.fieldInputContainer.append(r.nameInputContainer,r.pomodoroInputContainer),r.nameInputContainer.append(r.nameInputLabel,r.nameInputElement),r.pomodoroInputContainer.append(r.pomodoroInputLabel,r.pomodoroInputElement),N((e(n={},O.changeSession,(function(e){"inactive"===e.session&&(r.submitInputElement.className="pomodoro")})),e(n,O.changeCurrentInterval,(function(e){if("active"===e.session)switch(e.currentInterval){case y:r.submitInputElement.className="pomodoro";break;case w:r.submitInputElement.className="short-break";break;case E:r.submitInputElement.className="long-break";break;default:r.submitInputElement.className="pomodoro"}})),n)),r}return s}(d(HTMLElement));customElements.define("task-item",K),customElements.define("task-item-form",U);const W=function(n){i(s,n);var r,o,a=(r=s,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(r);if(o){var n=u(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return c(this,e)});function s(){var n,r;return t(this,s),(r=a.call(this)).shadow=r.attachShadow({mode:"open"}),r.styleElement=document.createElement("style"),r.styleElement.innerText="\n      .container {\n        padding: 1em;\n        font: normal 1rem 'Source Sans Pro', sans-serif;\n        border-radius: 5px;\n        height: 100%;\n        flex: 1 1 0;\n        display: flex;\n        flex-direction: column;\n        box-sizing: border-box;\n      }\n\n      .container.pomodoro {\n        background: #00b4d8;\n      }\n\n      .container.short-break {\n        background: #54C800;\n      }\n\n      .container.long-break {\n        background: #f87335;\n      }\n\n      .task-item-container {\n        flex: 1;\n        overflow: auto;\n      }\n\n      .title {\n        text-align: center;\n        color: #fff;\n        margin-top: 0;\n      }\n    ",r.containerElement=F("div",{className:"container pomodoro"}),r.titleElement=F("h1",{className:"title",innerText:"Task List"}),r.taskItemListContainerElement=F("div",{className:"task-item-container"}),r.taskItemFormElement=F("task-item-form",{className:"task-item-form"}),r.shadow.append(r.styleElement,r.containerElement),r.containerElement.append(r.titleElement,r.taskItemListContainerElement,r.taskItemFormElement),N((e(n={},O.changeSession,(function(e){"inactive"===e.session&&(r.containerElement.className="container pomodoro")})),e(n,O.changeCurrentInterval,(function(e){if("active"===e.session)switch(e.currentInterval){case y:r.containerElement.className="container pomodoro";break;case w:r.containerElement.className="container short-break";break;case E:r.containerElement.className="container long-break";break;default:r.containerElement.className="container pomodoro"}})),n)),r}return s}(d(HTMLElement));var $=function(e){var t=H(e,!0);return null===t||t<0||t>=3600?null:t},Q=function(e){var t=H(e);return null===t||t<0?null:t};const X=function(e){i(s,e);var n,r,a=(n=s,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(n);if(r){var o=u(this).constructor;e=Reflect.construct(t,arguments,o)}else e=t.apply(this,arguments);return c(this,e)});function s(){var e;return t(this,s),(e=a.call(this))._time=0,e._containerRadius=0,e.styleElement=F("style",{innerText:"\n        .container {\n          font: initial 'Duru-Sans', sans-serif;\n          color: #fff;\n        }\n      "}),e.shadow=e.attachShadow({mode:"open"}),e.timerContainer=F("div",{className:"container"}),e.shadow.append(e.styleElement,e.timerContainer),e}return o(s,[{key:"attributeChangedCallback",value:function(e,t,n){switch(e){case"time":var r=$(n);if(null===r)return void this.setAttribute(e,t);this._time=r,this.timerContainer.innerText=(a=this._time,s=(i=h([Math.floor(a/60),Math.floor(a%60)].map((function(e){return e<10?"0".concat(e):e})),2))[0],c=i[1],"".concat(s,":").concat(c));break;case"container-radius":var o=Q(n);if(null===o)return void this.setAttribute(e,t);this._containerRadius=o,this.styleElement.innerText="\n            .container {\n              font: ".concat(this._containerRadius/2,"px 'Duru-Sans', sans-serif; \n              color: #fff;\n            }\n          ")}var a,i,s,c}},{key:"time",get:function(){return this._time},set:function(e){var t=$(e);null!==t&&(this._time=t,this.setAttribute("time",this._time))}},{key:"containerRadius",get:function(){return this._containerRadius},set:function(e){var t=Q(e);null!==t&&(this._containerRadius=t,this.setAttribute("container-radius",this._containerRadius))}}],[{key:"observedAttributes",get:function(){return["time","container-radius"]}}]),s}(d(HTMLElement));var Z=function(e){var t=H(e);return null===t||t<0?null:t},ee=function(e){var t=H(e);return null===t||t<0||t>100?null:t};const te=function(n){i(l,n);var r,a,s=(r=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(r);if(a){var n=u(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return c(this,e)});function l(){var e;t(this,l),(e=s.call(this)).root=e.attachShadow({mode:"open"}),e.styleElement=document.createElement("style");var n="http://www.w3.org/2000/svg";return e.svgElement=F("svg",{class:"svg"},{namespace:n}),e.overlayCircleElement=F("circle",{class:"overlay-circle pomodoro"},{namespace:n}),e.baseCircleElement=F("circle",{class:"base-circle"},{namespace:n}),e.foreignObjectElement=F("foreignObject",{class:"foreign-object"},{namespace:n}),e.foreignObjectContainer=F("div",{class:"foreign-object-container"}),e.timerComponent=F("timer-component",{className:"timer",time:0}),e.circleComponent=F("pomodoro-circles",{className:"circles",circleCount:0}),e.root.append(e.styleElement,e.svgElement),e.svgElement.append(e.baseCircleElement,e.overlayCircleElement,e.foreignObjectElement),e.foreignObjectElement.appendChild(e.foreignObjectContainer),e.foreignObjectContainer.append(e.timerComponent,e.circleComponent),e._radius=0,e._stroke=0,e._progress=0,e.updateComponent(e._radius,e._stroke,e._progress),e}return o(l,[{key:"updateComponent",value:function(t,n,r){var o,a=this,i=t-2*n,s=2*i*Math.PI;this.styleElement.innerText="\n      .svg {\n        overflow: hidden;\n        width: ".concat(2*t,"px;\n        height: ").concat(2*t,"px;\n      }\n\n      .base-circle {\n        stroke: #fff;\n        stroke-dasharray: ").concat(s," ").concat(s,";\n        stroke-dashoffset: 0;\n        stroke-width: ").concat(n,";\n        fill: transparent;\n      }\n\n      .overlay-circle {\n        stroke-dasharray: ").concat(s," ").concat(s,";\n        stroke-dashoffset: ").concat((1-r/100)*s,";\n        stroke-width: ").concat(n,";\n        fill: transparent;\n\n        transition: stroke-dashoffset 0.5s;\n        transform: rotate(-90deg);\n        transform-origin: 50% 50%;\n      }\n\n      .overlay-circle.pomodoro {\n        stroke: #0095b3;\n      }\n\n      .overlay-circle.short-break {\n        stroke: #4ab717;\n      }\n\n      .overlay-circle.long-break {\n        stroke: #f87335;\n      }\n\n      .foreign-object {\n      }\n\n      .foreign-object-container {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n      }\n    "),this.foreignObjectElement.setAttribute("width",2*t),this.foreignObjectElement.setAttribute("height",2*t),this.overlayCircleElement.setAttribute("r",i),this.overlayCircleElement.setAttribute("cx",t),this.overlayCircleElement.setAttribute("cy",t),this.baseCircleElement.setAttribute("r",i),this.baseCircleElement.setAttribute("cx",t),this.baseCircleElement.setAttribute("cy",t),this.timerComponent.containerRadius=t,N((e(o={},O.changeSession,(function(e){"inactive"===e.session&&a.overlayCircleElement.setAttribute("class","overlay-circle pomodoro")})),e(o,O.changeCurrentInterval,(function(e){if("active"===e.session)switch(e.currentInterval){case y:a.overlayCircleElement.setAttribute("class","overlay-circle pomodoro");break;case w:a.overlayCircleElement.setAttribute("class","overlay-circle short-break");break;case E:a.overlayCircleElement.setAttribute("class","overlay-circle long-break");break;default:a.overlayCircleElement.setAttribute("class","overlay-circle pomodoro")}})),o))}},{key:"attributeChangedCallback",value:function(e,t,n){switch(e){case"radius":var r=Z(n);if(null===r)return void this.setAttribute(e,t);this._radius=r;break;case"stroke":var o=Z(n);if(null===o)return void this.setAttribute(e,t);this._stroke=o;break;case"progress":var a=ee(n);if(null===a)return void this.setAttribute(e,t);this._progress=a}this.updateComponent(this._radius,this._stroke,this._progress)}},{key:"radius",get:function(){return this._radius},set:function(e){var t=Z(e);null!==t&&(this._radius=t,this.setAttribute("radius",this._radius))}},{key:"stroke",get:function(){return this._stroke},set:function(e){var t=Z(e);null!==t&&(this._stroke=t,this.setAttribute("stroke",this._stroke))}},{key:"progress",get:function(){return this._progress},set:function(e){var t=ee(e);null!==t&&(this._progress=t,this.setAttribute("progress",this._progress))}}],[{key:"observedAttributes",get:function(){return["radius","stroke","progress"]}}]),l}(d(HTMLElement));function ne(e){return function(e){if(Array.isArray(e))return f(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||p(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var re=function(e){var t=H(e,!0);return null===t||t<0||t>4?null:t};const oe=function(e){i(s,e);var n,r,a=(n=s,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(n);if(r){var o=u(this).constructor;e=Reflect.construct(t,arguments,o)}else e=t.apply(this,arguments);return c(this,e)});function s(){var e,n;return t(this,s),(n=a.call(this))._circleCount=0,n.styleElement=F("style",{innerText:"\n      .circle-container {\n        display: flex;\n      }\n      \n      .circle {\n        height: 15px;\n        width: 15px;\n        border: 1px solid white;\n        border-radius: 50%;\n        margin: 15px 7px 0px;\n        display: inline-block;\n      }\n\n      .circle.active {\n        background-color: #fff;\n      }\n      "}),n.shadow=n.attachShadow({mode:"open"}),n.counterContainer=F("div",{className:"circle-container"}),n.circles=new Array(4).fill(null).map((function(){return F("div",{className:"circle"})})),(e=n.counterContainer).append.apply(e,ne(n.circles)),n.shadow.append(n.styleElement,n.counterContainer),n}return o(s,[{key:"attributeChangedCallback",value:function(e,t,n){if("circle-count"===e){var r=re(n);if(null===r)return void this.setAttribute(e,t);this._circleCount=r,this.circles.forEach((function(e,t){t<r?e.classList.add("active"):e.classList.remove("active")}))}}},{key:"circleCount",get:function(){return this._circleCount},set:function(e){var t=re(e);null!==t&&(this._circleCount=t,this.setAttribute("circle-count",this._circleCount))}}],[{key:"observedAttributes",get:function(){return["circle-count"]}}]),s}(d(HTMLElement));var ae=function(e){var t=H(e,!0);return null===t||t<3||t>5?null:t},ie=function(e){var t=H(e,!0);return null===t||t<15||t>30?null:t},se=function(e){var t=G(e);return null!==t&&Object.values(T).includes(t)?t:null};var ce={calm:"Calm Alarm",annoying:"Original Alarm",kanye:"Kanye Telling You to Stop"};const ue=function(e){i(s,e);var n,r,a=(n=s,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(n);if(r){var o=u(this).constructor;e=Reflect.construct(t,arguments,o)}else e=t.apply(this,arguments);return c(this,e)});function s(){var e,n;return t(this,s),(n=a.call(this))._shortBreakLength=0,n._longBreakLength=0,n._timerAudio="",n.styleElement=F("style",{innerText:"\n          .popup-container {\n            position: fixed;\n            z-index: 5;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%) scale(0);\n            width: 65%;\n            min-width: 360px;\n            border-radius: 5px;\n            padding: 1.5rem 3rem;\n            transition: 200ms ease-in-out;\n            background: white;\n            font: 1.1rem 'Source Sans Pro', sans-serif;\n            color: #2b2b2b;\n          }\n          \n          .popup-container.active {\n            transform: translate(-50%, -50%) scale(1);\n          }\n          \n          .popup-title {\n            margin: 0;\n            font: 2rem 'Lato', sans-serif;\n            color: #757575;\n            opacity: 0.9;\n          }\n          \n          .popup-title-hr {\n            margin: 0 0 1rem 0;\n          }\n\n          .form-inputs-container {\n            margin: 0 0 2rem 0;\n          }\n          \n          .form-input-container {\n            margin: 1rem 0 0 0;\n            display: flex;\n            align-items: center;\n          }\n          \n          .form-input-label {\n            width: 12ch;\n            margin-right: 1rem;\n          }\n\n          .form-input {\n            cursor: pointer;\n            width: 4.5ch;\n            border: none;\n            border-radius: 5px;\n            margin-right: 1rem;\n            padding: 0.3em 0.5em;\n            font: 1.1rem 'Source Sans Pro', sans-serif;\n            color: #2b2b2b;\n            background: #eee;\n          }\n          \n          #timer-audio-input {\n            -webkit-appearance: none;\n            -moz-appearance: none;\n            appearance: none;\n            width: 30ch;\n            background: url(assets/sound.png) 96% / 10% no-repeat #eee;\n          }\n          \n          .break-input-bounds {\n            color: #808080;\n          }\n\n          .error-message {\n            margin: 0; \n            display: none;\n            color: red;\n          }\n          \n          .save-button {\n            cursor: pointer;\n            width: 75%;\n            display: block;\n            border: none;\n            border-radius: 0.25rem;\n            margin: 0 auto 0.5rem auto;\n            padding: 0.5em;\n            background: #b0b0b0;\n            font: 1.1rem 'Duru Sans', sans-serif;\n            text-align: center;\n            color: #2b2b2b;\n          }\n\n          .save-button:hover {\n            opacity: 0.9;\n          }\n          \n          #overlay {\n            position: fixed;\n            z-index: 4;\n            top: 0;\n            width: 100vw;\n            height: 100vh;\n            transition: 200ms ease-in-out;\n            visibility: hidden;\n            background-color: rgba(0, 0, 0, 0.5);\n          }\n          \n          #overlay.active {\n            cursor: pointer;\n            visibility: visible;\n          }\n        "}),n.shadow=n.attachShadow({mode:"open"}),n.popupContainer=F("div",{className:"popup-container"}),n.formInputsContainer=F("div",{className:"form-inputs-container"}),n.popupTitle=F("h1",{className:"popup-title",innerText:"SETTINGS"}),n.popupTitleHr=F("hr",{className:"popup-title-hr"}),n.shortBreakContainer=F("div",{className:"form-input-container"}),n.shortBreakLabel=F("label",{innerText:"Short Break: ",for:"short-break-input",className:"form-input-label"}),n.shortBreakInput=F("input",{id:"short-break-input",className:"form-input",name:"short-break-input",type:"number",min:"3",max:"5",value:n._shortBreakLength}),n.shortBreakBounds=F("span",{className:"break-input-bounds",innerText:"3 - 5 minutes"}),n.shortBreakError=F("p",{className:"error-message",innerText:"Please enter a valid short break length."}),n.longBreakContainer=F("div",{className:"form-input-container"}),n.longBreakLabel=F("label",{innerText:"Long Break: ",for:"long-break-input",className:"form-input-label"}),n.longBreakInput=F("input",{id:"long-break-input",className:"form-input",name:"long-break-input",type:"number",min:"15",max:"30",value:n._longBreakLength}),n.longBreakBounds=F("span",{className:"break-input-bounds",innerText:"15 - 30 minutes"}),n.longBreakError=F("p",{className:"error-message",innerText:"Please enter a valid long break length."}),n.timerAudioContainer=F("div",{className:"form-input-container"}),n.timerAudioLabel=F("label",{for:"timer-audio-input",innerText:"Sound: ",className:"form-input-label"}),n.timerAudioInput=F("select",{id:"timer-audio-input",className:"form-input",name:"sound"}),n.timerAudioOptions=Object.entries(T).map((function(e){var t=h(e,2),n=t[0],r=t[1];return F("option",{value:r,innerText:ce[n]})})),n.saveButton=F("button",{innerText:"SAVE",className:"save-button",onmousedown:function(e){return e.preventDefault()}}),n.overlayEl=F("div",{id:"overlay"}),n.shadow.append(n.styleElement,n.popupContainer,n.overlayEl),n.popupContainer.append(n.popupTitle,n.popupTitleHr,n.formInputsContainer,n.saveButton),n.formInputsContainer.append(n.shortBreakContainer,n.shortBreakError,n.longBreakContainer,n.longBreakError,n.timerAudioContainer),n.shortBreakContainer.append(n.shortBreakLabel,n.shortBreakInput,n.shortBreakBounds),n.longBreakContainer.append(n.longBreakLabel,n.longBreakInput,n.longBreakBounds),n.timerAudioContainer.append(n.timerAudioLabel,n.timerAudioInput),(e=n.timerAudioInput).append.apply(e,ne(n.timerAudioOptions)),n}return o(s,[{key:"attributeChangedCallback",value:function(e,t,n){switch(e){case"short-break-length":var r=ae(n);if(null===r)return void this.setAttribute(e,t);this._shortBreakLength=r,this.shortBreakInput.value=this._shortBreakLength,this.shortBreakError.visibility="hidden";break;case"long-break-length":var o=ie(n);if(null===o)return void this.setAttribute(e,t);this._longBreakLength=o,this.longBreakInput.value=this._longBreakLength,this.longBreakError.visibility="hidden";break;case"timer-audio":var a=se(n);if(null===a)return void this.setAttribute(e,t);this._timerAudio=a,this.timerAudioInput.value=this._timerAudio}}},{key:"shortBreakLength",get:function(){return this._shortBreakLength},set:function(e){var t=ae(e);null!==t&&(this._shortBreakLength=t,this.setAttribute("short-break-length",this._shortBreakLength))}},{key:"longBreakLength",get:function(){return this._longBreakLength},set:function(e){var t=ie(e);null!==t&&(this._longBreakLength=t,this.setAttribute("long-break-length",this._longBreakLength))}},{key:"timerAudio",get:function(){return this._timerAudio},set:function(e){var t=se(e);null!==t&&(this._timerAudio=t,this.setAttribute("timer-audio",this._timerAudio))}}],[{key:"observedAttributes",get:function(){return["short-break-length","long-break-length","timer-audio"]}}]),s}(d(HTMLElement));function le(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function me(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?le(Object(r),!0).forEach((function(n){e(t,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):le(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var de,fe,pe,he,be,ve,ge,ke,ye,we,Ee,Le,Se,xe,Ce,Te,Oe=[],Pe=function(){window.localStorage.setItem(C,JSON.stringify(Oe))},Ie=function(e){var t=e.name;return{taskIndex:Oe.findIndex((function(e){return e.name===t})),taskElement:fe.querySelector('[name="'.concat(t,'"]'))}},Be=function(e){return{delete:Array.from(e.shadowRoot.querySelectorAll(".task-button")).find((function(e){return"delete-button"===e.getAttribute("id")}))}},_e=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"end";if("end"!==t&&"start"!==t){var n=Ie(t),r=n.taskElement;r.before(e)}else"end"===t?fe.append(e):"start"===t&&fe.prepend(e);return e},Ae=function(e){var t=Ie(e).taskElement;return t.remove(),t},Ne=function(e,t){var n=Ie(e),r=n.taskIndex,o=n.taskElement;return Oe[r]=t,Pe(),Object.getOwnPropertyNames(t).forEach((function(e){o[e]=t[e]})),t},je=function(e){var t=Oe.find((function(e){return e.selected}));t&&Ne(t,me(me({},t),{},{selected:!1}));var n=Ie(e),r=n.taskElement,o=n.taskIndex;Ae(e),_e(r,"start"),Oe.splice(o,1),Oe.unshift(e);var a=me(me({},e),{},{selected:!0});return j(O.changeSelectedTask,a),Ne(e,a)},Re=function(e){var t=e.name,n=e.usedPomodoros,r=e.estimatedPomodoros,o=e.selected,a=e.completed,i=F("task-item",{name:t,usedPomodoros:n,estimatedPomodoros:r,selected:o}),s=i.shadowRoot.querySelector(".text-container"),c=Be(i).delete;return a||(s.onclick=function(){return je(e)}),c.onclick=function(){return n=Ie(t=e).taskIndex,Oe.splice(n,1),window.localStorage.setItem(C,JSON.stringify(Oe)),void Ae(t);var t,n},i},qe=function(e){e.preventDefault();var t,n,r,o=be,a=o.name,i=o.pomodoro,s=a.value,c=i.value,u=s.trim(),l=Number(c);a.focus(),n=Re(t={name:u,estimatedPomodoros:l,usedPomodoros:0,selected:!1,completed:!1}),-1!==(r=Oe.findIndex((function(e){return e.completed})))?(Oe.splice(r,0,t),_e(n,Oe[r+1])):(Oe.push(t),_e(n)),Pe(),Object.values(be).forEach((function(e){e.value=""}))},De=function(e){var t=e.target.value.trim();Oe.some((function(e){return e.name===t}))?e.target.setCustomValidity("Duplicate task."):e.target.setCustomValidity("")},Me=function(){return Oe.length>0&&!Oe[0].completed?je(Oe[0]):null},Fe=function(){Oe.forEach((function(e){Ne(e,me(me({},e),{},{selected:!1}))}))},Ge=function(e){Oe.forEach((function(t){var n=Ie(t).taskElement,r=n.shadowRoot,o=r.querySelector(".item-container"),a=r.querySelector(".text-container");e?o.classList.remove("disabled"):o.classList.add("disabled"),e&&!t.completed?a.onclick=function(){return je(t)}:a.onclick=null;var i=Be(n);Object.values(i).forEach((function(t){t.disabled=!e}))}))},He=function(e){var t=ee(e);null!==t&&(ve.progress=t)},ze=function(t){var n,r=(ve=t).shadowRoot.querySelector(".overlay-circle");N((e(n={},O.changeSession,(function(e){"inactive"===e.session&&(He(100),r.setAttribute("class","overlay-circle pomodoro"))})),e(n,O.changeCurrentInterval,(function(e){switch(He(100),e.currentInterval){case y:r.setAttribute("class","overlay-circle pomodoro");break;case w:r.setAttribute("class","overlay-circle short-break");break;case E:r.setAttribute("class","overlay-circle long-break")}})),e(n,O.changeCurrentTime,(function(e){if("active"===e.session){var t;switch(e.currentInterval){case y:t=e.pomodoroLength;break;case w:t=e.shortBreakLength;break;case E:t=e.longBreakLength;break;default:return}var n=100*e.currentTime/(60*t);He(n)}})),n))},Je=function(e){ge.time=e},Ye=function(t){var n;ge=t;var r=N((e(n={},O.changeSession,(function(e){"inactive"===e.session&&Je(60*e.pomodoroLength)})),e(n,O.changeCurrentTime,(function(e){"active"===e.session&&Je(e.currentTime)})),n)).pomodoroLength;Je(60*r)},Ve=function(e){var t=re(e);null!==t&&(ke.circleCount=t)},Ke=function(t){var n;ke=t,N((e(n={},O.changeSession,(function(e){"inactive"===e.session&&Ve(0)})),e(n,O.changeCurrentInterval,(function(e){"active"===e.session&&(e.currentInterval===y?e.numberOfPomodorosCompleted%4==0&&Ve(0):Ve((e.numberOfPomodorosCompleted-1)%4+1))})),n))},Ue=new Audio;Ue.volume=.2;var We,$e,Qe,Xe,Ze,et,tt,nt,rt,ot,at,it,st,ct,ut,lt=function(e){var t=ae(e);null!==t&&(ye.shortBreakLength=t)},mt=function(e){var t=ie(e);null!==t&&(ye.longBreakLength=t)},dt=function(e){var t=se(e);null!==t&&(ye.timerAudio=t)},ft=function(){Ue.src="",Ue.play().catch((function(){return!0})),we.classList.add("active"),Le.classList.add("active"),Se.value=ye.shortBreakLength,xe.value=ye.longBreakLength,Ce.value=ye.timerAudio},pt=function(){Ue.pause(),we.classList.remove("active"),Le.classList.remove("active"),Te.forEach((function(e){e.style.display="none"}))},ht=pt,bt=function(e){var t=function(){var e,t;try{e=JSON.parse(window.localStorage.getItem(L)),t=JSON.parse(window.localStorage.getItem(S))}catch(n){e=null,t=null}return e&&null!==ae(e)||(e=5,window.localStorage.setItem(L,e)),t&&null!==ie(t)||(t=15,window.localStorage.setItem(S,t)),{shortBreakLength:e,longBreakLength:t}}(),n=t.shortBreakLength,r=t.longBreakLength;!function(e){var t=(ye=e).shadowRoot;we=t.querySelector(".popup-container"),Se=t.querySelector("#short-break-input"),xe=t.querySelector("#long-break-input"),Ce=t.querySelector("#timer-audio-input"),Te=t.querySelectorAll(".error-message"),Ee=t.querySelector(".save-button"),Le=t.querySelector("#overlay")}(e),lt(n),mt(r),j(O.changeShortBreakLength,n),j(O.changeLongBreakLength,r);var o=window.localStorage.getItem(x);null===se(o)?(dt(T.calm),window.localStorage.setItem(x,T.calm),j(O.changeTimerAudio,T.calm)):(dt(o),j(O.changeTimerAudio,o)),Le.onclick=pt,Ee.addEventListener("click",(function(){var e=function(){var e=ae(Se.value),t=ie(xe.value),n=se(Ce.value),r=null!==e,o=null!==t;return Te[0].style.display=r?"none":"initial",Te[1].style.display=o?"none":"initial",r&&o?(lt(e),mt(t),dt(n),j(O.changeShortBreakLength,e),j(O.changeLongBreakLength,t),j(O.changeTimerAudio,n),window.localStorage.setItem(L,e),window.localStorage.setItem(S,t),window.localStorage.setItem(x,n),[e,t]):null}();e&&(ht(),j(O.changeShortBreakLength,e[0]),j(O.changeLongBreakLength,e[1]))})),Ce.onchange=function(){Ue.pause(),Ue.src=Ce.value,Ue.play().catch((function(){return!0}))}},vt=function(e){$e.innerText=e},gt=function(e){"visible"===e?(Qe.classList.remove("hidden"),Xe.classList.remove("hidden")):(Qe.classList.add("hidden"),Xe.classList.add("hidden"))},kt=function(t){var n;$e=(We=t).querySelector(".announcement"),Qe=We.querySelector(".announcement-yes-button"),Xe=We.querySelector(".announcement-no-button"),Qe.onmousedown=function(e){return e.preventDefault()},Xe.onmousedown=function(e){return e.preventDefault()},Qe.onclick=function(){return j(O.completeSelectedTask)},Xe.onclick=function(){return j(O.doNotCompleteSelectedTask)},vt("What do you need to work on today?"),N((e(n={},O.changeSession,(function(e){"inactive"===e.session?(null!==e.currentSelectedTask||e.completedTasks.length>0?vt("Good work today!"):vt("Add a task to get started!"),gt("hidden")):"active"===e.session&&vt(b)})),e(n,O.changeCurrentInterval,(function(e){if("active"===e.session)switch(e.currentInterval){case y:vt(b),[Qe,Xe].forEach((function(e){e.classList.add("pomodoro"),e.classList.remove("short-break"),e.classList.remove("long-break")}));break;case w:vt(k),gt("visible"),[Qe,Xe].forEach((function(e){e.classList.remove("pomodoro"),e.classList.add("short-break"),e.classList.remove("long-break")}));break;case E:vt(k),gt("visible"),[Qe,Xe].forEach((function(e){e.classList.remove("pomodoro"),e.classList.remove("short-break"),e.classList.add("long-break")}))}})),e(n,O.changeSelectedTask,(function(e){null!==e.currentSelectedTask&&("inactive"===e.session?vt("Hit start to begin your pomodoro session!"):"active"===e.session&&(e.currentInterval===w?vt(v):e.currentInterval===E&&vt(g)))})),e(n,O.completeSelectedTask,(function(){gt("hidden"),vt("Select a new task!")})),e(n,O.doNotCompleteSelectedTask,(function(e){gt("hidden"),e.currentInterval===w?vt(v):e.currentInterval===E&&vt(g)})),n))},yt=function(){Ze.classList.remove("active")},wt=function(e){!function(e){et=(Ze=e).querySelector("#confirmation-popup"),tt=et.querySelector(".confirmation-no-button"),nt=et.querySelector(".confirmation-yes-button")}(e),tt.onmousedown=function(e){return e.preventDefault()},nt.onmousedown=function(e){return e.preventDefault()},nt.onclick=function(){yt(),j(O.changeSession,"inactive")},tt.onclick=yt,Ze.onclick=yt,et.onclick=function(e){return e.stopPropagation()}};function Et(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Lt(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?Et(Object(r),!0).forEach((function(n){e(t,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Et(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var St,xt,Ct,Tt,Ot,Pt,It,Bt,_t,At,Nt=function(){rt.classList.remove("active"),at.innerHTML=""},jt=function(e,t){!function(e){ot=(rt=e).querySelector("#summary-popup"),at=rt.querySelector(".task-summary-list"),it=rt.querySelector("#summary-pomodoros"),st=rt.querySelector("#summary-tasks"),ct=rt.querySelector("#summary-time"),ut=rt.querySelector(".summary-close-button")}(e);var n=N(),r=n.currentInterval,o=n.currentTime,a=n.completedTasks,i=n.numberOfPomodorosCompleted;!function(e,t){var n=e.filter((function(e){return e.completed&&e.usedPomodoros<=e.estimatedPomodoros&&t.some((function(t){return t.name===e.name}))})).map((function(e){return Lt(Lt({},e),{},{status:"complete under-budget"})})),r=e.filter((function(e){return e.completed&&e.usedPomodoros>e.estimatedPomodoros&&t.some((function(t){return t.name===e.name}))})).map((function(e){return Lt(Lt({},e),{},{status:"complete over-budget"})})),o=e.filter((function(e){return!e.completed&&e.usedPomodoros>0})).map((function(e){return Lt(Lt({},e),{},{status:"in-progress"})})),a=e.filter((function(e){return!e.completed&&0===e.usedPomodoros})).map((function(e){return Lt(Lt({},e),{},{status:"not-started"})})),i=e.filter((function(e){return e.completed&&!t.some((function(t){return t.name===e.name}))})).map((function(e){return Lt(Lt({},e),{},{status:"complete old"})}));[].concat(ne(n),ne(r),ne(o),ne(a),ne(i)).forEach((function(e){var t=function(e){var t=e.name,n=e.usedPomodoros,r=e.estimatedPomodoros,o=e.status,a=F("div",{className:"task-summary-item ".concat(o)}),i=F("span",{className:"task-summary-name",innerText:t}),s=F("span",{className:"task-summary-pomodoros",innerText:"".concat(n,"/").concat(r)});return a.append(i,s),a}(e);at.append(t)}))}(t,a);var s,c,u,l,m=function(e,t){var n=N(),r=e%4,o=e*(60*n.pomodoroLength)+((e-r)*(60*n.shortBreakLength)+r*(60*n.longBreakLength));return t.intervalName===y||t.timeRemaining<=0?o:o-t.timeRemaining}(i,{intervalName:r,timeRemaining:o});it.innerText="Number of pomodoros completed: ".concat(i),st.innerText="Number of tasks completed: ".concat(a.length),ct.innerText="Total session time: ".concat((s=m,c=Math.floor(s/3600),u=Math.floor(s%3600/60),l=s%60,[c>0?"".concat(c,"h"):"",u>0?"".concat(u,"m"):"",l>0||0===c&&0===u?"".concat(l,"s"):""].filter((function(e){return""!==e})).join(" "))),ut.onclick=Nt,ut.onmousedown=function(e){return e.preventDefault()},rt.onclick=Nt,ot.onclick=function(e){return e.stopPropagation()}},Rt=function(){var e=q(M().mark((function e(t){return M().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:j(O.changeCurrentTime,t);case 1:if(!(Ct>=0)){e.next=9;break}if("inactive"!==St){e.next=4;break}return e.abrupt("return",!1);case 4:return e.next=6,J(1);case 6:"active"===St&&j(O.changeCurrentTime,Ct-1),e.next=1;break;case 9:return e.abrupt("return",!0);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),qt=function(){var e=q(M().mark((function e(){var t,n;return M().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("active"!==St){e.next=28;break}if(Tt!==y){e.next=17;break}if(Ot){e.next=5;break}return j(O.changeSession,"inactive"),e.abrupt("return");case 5:return e.next=7,Rt(60*Pt);case 7:if(e.sent){e.next=10;break}return e.abrupt("return");case 10:j(O.incrementSelectedTask),j(O.changeNumberOfPomodoros,xt+1),j(O.changeCurrentInterval,xt>0&&xt%4==0?E:w),e.next=26;break;case 17:return At=!1,t=Tt===E?Bt:It,e.next=21,Rt(60*t);case 21:if(n=e.sent,At||j(O.doNotCompleteSelectedTask),n){e.next=25;break}return e.abrupt("return");case 25:j(O.changeCurrentInterval,y);case 26:e.next=0;break;case 28:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();const Dt=function(){var t,n=document.querySelector("#main"),r=document.querySelector(".navbar"),o=document.querySelector(".footer"),a=document.querySelector(".session-button"),i=document.querySelector(".material-icons"),s=document.querySelector(".progress-ring").shadowRoot.querySelector(".timer"),c=[n,r,a,o],u=N((e(t={},O.changeSession,(function(e){"active"===(St=e.session)?(a.innerText="End",a.classList.add("session-button","in-session")):"inactive"===St&&(c.forEach((function(e){e.classList.add("pomodoro"),e.classList.remove("short-break"),e.classList.remove("long-break")})),a.innerText="Start",a.classList.remove("in-session"),xt>0&&(jt(document.querySelector("#summary-overlay"),Oe),rt.classList.add("active")),j(O.changeCurrentTime,0),j(O.changeCurrentInterval,y),j(O.changeSelectedTask,null),j(O.changeNumberOfPomodoros,0),j(O.clearCompletedTasks))})),e(t,O.changeNumberOfPomodoros,(function(e){xt=e.numberOfPomodorosCompleted})),e(t,O.changeCurrentTime,(function(e){Ct=e.currentTime})),e(t,O.changeCurrentInterval,(function(e){switch(Tt=e.currentInterval){case y:c.forEach((function(e){e.classList.add("pomodoro"),e.classList.remove("short-break"),e.classList.remove("long-break")}));break;case w:c.forEach((function(e){e.classList.remove("pomodoro"),e.classList.add("short-break"),e.classList.remove("long-break")}));break;case E:c.forEach((function(e){e.classList.remove("pomodoro"),e.classList.remove("short-break"),e.classList.add("long-break")}))}e.numberOfPomodorosCompleted>0&&(_t.pause(),_t.play().catch((function(){return!0})))})),e(t,O.changeSelectedTask,(function(e){Ot=e.currentSelectedTask})),e(t,O.changePomodoroLength,(function(e){Pt=e.pomodoroLength})),e(t,O.changeShortBreakLength,(function(e){It=e.shortBreakLength})),e(t,O.changeLongBreakLength,(function(e){Bt=e.longBreakLength})),e(t,O.changeTimerAudio,(function(e){_t=e.timerAudio})),e(t,O.completeSelectedTask,(function(){At=!0})),e(t,O.doNotCompleteSelectedTask,(function(){At=!0})),t));St=u.session,xt=u.numberOfPomodorosCompleted,Ct=u.currentTime,Tt=u.currentInterval,Ot=u.currentSelectedTask,Pt=u.pomodoroLength,It=u.shortBreakLength,Bt=u.longBreakLength,_t=u.timerAudio,j(O.changeShortBreakLength,.05),j(O.changeLongBreakLength,.05),i.onclick=ft,s.onclick=function(){return _t.pause()},a.onmousedown=function(e){e.preventDefault()},ne(document.querySelectorAll(".navbar-link")).forEach((function(e){e.onmousedown=function(e){return e.preventDefault()}})),a.addEventListener("click",q(M().mark((function e(){var t;return M().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("Start"!==a.innerText){e.next=10;break}return t=_t.src,_t.src="",_t.play().catch((function(){return!0})),_t.src=t,j(O.changeSession,"active"),e.next=8,qt();case 8:e.next=11;break;case 10:Ze.classList.add("active");case 11:case"end":return e.stop()}}),e)}))))};customElements.define("timer-component",X),customElements.define("progress-ring",te),customElements.define("task-list",W),customElements.define("settings-component",ue),customElements.define("pomodoro-circles",oe),window.addEventListener("DOMContentLoaded",(function(){var t,n=document.querySelector(".progress-ring"),r=n.shadowRoot.querySelector(".timer"),o=n.shadowRoot.querySelector(".circles"),a=document.querySelector(".announcement-container"),i=document.querySelector(".task-list"),s=document.querySelector("#confirmation-overlay"),c=document.querySelector(".settings");ze(n),Ye(r),Ke(o),kt(a),function(e){de=e.shadowRoot.querySelector(".container"),fe=de.querySelector(".task-item-container"),pe=de.querySelector(".task-item-form"),he=pe.shadowRoot.querySelector(".task-form"),be={name:he.querySelector("#name-input"),pomodoro:he.querySelector("#pomodoro-input")}}(i),he.addEventListener("submit",qe),function(){var e;try{e=JSON.parse(window.localStorage.getItem(C))}catch(t){e=null}e||(window.localStorage.setItem(C,JSON.stringify([])),e=[]),e=e.filter(V),(Oe=e).forEach((function(e){return _e(Re(e))}))}(),be.name.oninput=De,Fe(),N((e(t={},O.changeSession,(function(e){"inactive"===e.session?(Fe(),Ge(!0)):"active"===e.session&&(null===e.currentSelectedTask&&Me(),Ge(!1))})),e(t,O.changeCurrentInterval,(function(e){"active"===e.session&&e.currentInterval===y&&(null===e.currentSelectedTask&&Me(),Ge(!1))})),e(t,O.incrementSelectedTask,(function(e){if("active"===e.session){var t=(r=(n=e.currentSelectedTask).usedPomodoros,Ne(n,me(me({},n),{},{usedPomodoros:r+1})));j(O.changeSelectedTask,t)}var n,r})),e(t,O.completeSelectedTask,(function(e){if("active"===e.session){var t=function(e){var t=Ie(e).taskIndex,n=Ae(e);return _e(n,"end"),n.shadowRoot.querySelector(".text-container").onclick=null,Oe.splice(t,1),Oe.push(e),Ne(e,me(me({},e),{},{selected:!1,completed:!0}))}(e.currentSelectedTask);j(O.changeSelectedTask,null),j(O.addToCompletedTasks,t),Ge(!0)}})),t)),wt(s),bt(c),Dt();var u=document.querySelector(".navbar");window.onscroll=function(){0===window.scrollY?u.classList.remove("scrolled"):u.classList.add("scrolled")}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9ncm91cDYvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZ3JvdXA2L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2dyb3VwNi93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vZ3JvdXA2L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vd3JhcE5hdGl2ZVN1cGVyLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pc05hdGl2ZUZ1bmN0aW9uLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvbW9kZWxzL2luZGV4LmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy91dGlscy9oZWxwZXJzLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy91dGlscy90YXNrTGlzdC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvY29tcG9uZW50cy9UYXNrSXRlbS5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvY29tcG9uZW50cy9UYXNrSXRlbUZvcm0uanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL2NvbXBvbmVudHMvVGFza0xpc3QuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL3V0aWxzL3RpbWVyLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9jb21wb25lbnRzL1RpbWVyLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy91dGlscy9wcm9ncmVzc1JpbmcuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL2NvbXBvbmVudHMvUHJvZ3Jlc3NSaW5nLmpzIiwid2VicGFjazovL2dyb3VwNi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL3V0aWxzL3BvbW9kb3JvQ2lyY2xlcy5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvY29tcG9uZW50cy9Qb21vZG9yb0NpcmNsZXMuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL3V0aWxzL3NldHRpbmdzLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9jb21wb25lbnRzL1NldHRpbmdzLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9zY3JpcHRzL3Rhc2tMaXN0LmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9zY3JpcHRzL3Byb2dyZXNzUmluZy5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvc2NyaXB0cy90aW1lci5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvc2NyaXB0cy9wb21vZG9yb0NpcmNsZXMuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL3NjcmlwdHMvc2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vZ3JvdXA2Ly4vc3JjL3NjcmlwdHMvYW5ub3VuY2VtZW50LmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9zY3JpcHRzL2NvbmZpcm1hdGlvblBvcHVwLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9zY3JpcHRzL3N1bW1hcnlQb3B1cC5qcyIsIndlYnBhY2s6Ly9ncm91cDYvLi9zcmMvc2NyaXB0cy9jb250cm9sbGVyLmpzIiwid2VicGFjazovL2dyb3VwNi8uL3NyYy9zY3JpcHRzL2luZGV4LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJydW50aW1lIiwidW5kZWZpbmVkIiwiT3AiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsIiRTeW1ib2wiLCJTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsIml0ZXJhdG9yIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwib2JqIiwia2V5IiwidmFsdWUiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVyciIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwibWV0aG9kIiwiYXJnIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJFcnJvciIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiZG9uZSIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJtYWtlSW52b2tlTWV0aG9kIiwiZm4iLCJjYWxsIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwidGhpcyIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsImludm9rZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXN1bHQiLCJfX2F3YWl0IiwidGhlbiIsInVud3JhcHBlZCIsImVycm9yIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJUeXBlRXJyb3IiLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNOYU4iLCJsZW5ndGgiLCJpIiwiY29uc3RydWN0b3IiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwiaXRlciIsInRvU3RyaW5nIiwia2V5cyIsIm9iamVjdCIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJGdW5jdGlvbiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsIm8iLCJnZXQiLCJwcm9wIiwiX2RlZmluZVByb3BlcnR5IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3NldFByb3RvdHlwZU9mIiwicCIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl90eXBlb2YiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZmVyZW5jZUVycm9yIiwiX2dldFByb3RvdHlwZU9mIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwidmFsdWVPZiIsImUiLCJfY29uc3RydWN0IiwiUGFyZW50IiwiYXJncyIsIkNsYXNzIiwiYXBwbHkiLCJiaW5kIiwiYXJndW1lbnRzIiwiX3dyYXBOYXRpdmVTdXBlciIsIl9jYWNoZSIsIk1hcCIsImluZGV4T2YiLCJoYXMiLCJzZXQiLCJXcmFwcGVyIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJtaW5MZW4iLCJmcm9tIiwidGVzdCIsIl9zbGljZWRUb0FycmF5IiwiaXNBcnJheSIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsIl9pIiwiQU5OT1VOQ0VNRU5UUyIsIklOVEVSVkFMUyIsIktFWVMiLCJUSU1FUl9BVURJT1MiLCJjYWxtIiwiYW5ub3lpbmciLCJrYW55ZSIsIkFDVElPTlMiLCJjaGFuZ2VTZXNzaW9uIiwiY2hhbmdlQ3VycmVudFRpbWUiLCJjaGFuZ2VDdXJyZW50SW50ZXJ2YWwiLCJjaGFuZ2VOdW1iZXJPZlBvbW9kb3JvcyIsImNoYW5nZVBvbW9kb3JvTGVuZ3RoIiwiY2hhbmdlU2hvcnRCcmVha0xlbmd0aCIsImNoYW5nZUxvbmdCcmVha0xlbmd0aCIsImNoYW5nZVRpbWVyQXVkaW8iLCJjaGFuZ2VTZWxlY3RlZFRhc2siLCJpbmNyZW1lbnRTZWxlY3RlZFRhc2siLCJjb21wbGV0ZVNlbGVjdGVkVGFzayIsImRvTm90Q29tcGxldGVTZWxlY3RlZFRhc2siLCJhZGRUb0NvbXBsZXRlZFRhc2tzIiwiY2xlYXJDb21wbGV0ZWRUYXNrcyIsInRpbWVyQXVkaW8iLCJBdWRpbyIsInZvbHVtZSIsInNlc3Npb25TdGF0ZSIsInNlc3Npb24iLCJudW1iZXJPZlBvbW9kb3Jvc0NvbXBsZXRlZCIsImN1cnJlbnRUaW1lIiwiY3VycmVudEludGVydmFsIiwiY3VycmVudFNlbGVjdGVkVGFzayIsImNvbXBsZXRlZFRhc2tzIiwicG9tb2Rvcm9MZW5ndGgiLCJzaG9ydEJyZWFrTGVuZ3RoIiwibG9uZ0JyZWFrTGVuZ3RoIiwiYWN0aW9uQ2FsbGJhY2tzIiwicmVkdWNlIiwiYWNjIiwiYWN0aW9uIiwic3Vic2NyaWJlIiwiY2FsbGJhY2tzIiwiZW50cmllcyIsImNhbGxiYWNrIiwiZGlzcGF0Y2giLCJwYXlsb2FkIiwic3JjIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX25leHQiLCJfdGhyb3ciLCJfYXN5bmNUb0dlbmVyYXRvciIsImNyZWF0ZUVsZW1lbnQiLCJlbGVtZW50TmFtZSIsImVsZW1lbnQiLCJvcHRpb25zIiwibmFtZXNwYWNlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJzZXRBdHRyaWJ1dGUiLCJ2YWxpZGF0ZVN0cmluZyIsIlN0cmluZyIsInZhbGlkYXRlTnVtYmVyIiwic2hvdWxkVHJ1bmNhdGUiLCJpc051bWJlck9yU3RyaW5nIiwiTnVtYmVyIiwibnVtYmVyIiwiTWF0aCIsImZsb29yIiwidmFsaWRhdGVCb29sZWFuIiwiaXNTdHJpbmciLCJ0aWNrIiwiZHVyYXRpb24iLCJyZXMiLCJzZXRUaW1lb3V0IiwidmFsaWRhdGVQb21vZG9ybyIsInBvbW9kb3JvcyIsInZhbGlkYXRlVGFzayIsInVzZWRQb21vZG9yb3MiLCJlc3RpbWF0ZWRQb21vZG9yb3MiLCJzZWxlY3RlZCIsImNvbXBsZXRlZCIsImlzTmFtZVZhbGlkIiwiaXNVc2VkUG9tb2Rvcm9zVmFsaWQiLCJpc0VzdGltYXRlZFBvbW9kb3Jvc1ZhbGlkIiwiaXNTZWxlY3RlZFZhbGlkIiwiaXNDb21wbGV0ZWRWYWxpZCIsIl9uYW1lIiwiX3VzZWRQb21vZG9yb3MiLCJfZXN0aW1hdGVkUG9tb2Rvcm9zIiwiX3NlbGVjdGVkIiwiX2NvbXBsZXRlZCIsInNoYWRvdyIsImF0dGFjaFNoYWRvdyIsIm1vZGUiLCJzdHlsZUVsZW1lbnQiLCJpbm5lclRleHQiLCJtYXRlcmlhbEljb25MaW5rRWxlbWVudCIsInJlbCIsImhyZWYiLCJpdGVtQ29udGFpbmVyRWxlbWVudCIsImNsYXNzTmFtZSIsInRleHRDb250YWluZXJFbGVtZW50Iiwib25tb3VzZW91dCIsImJsdXIiLCJvbm1vdXNlZG93biIsInByZXZlbnREZWZhdWx0IiwibmFtZUVsZW1lbnQiLCJwb21vZG9yb0NvbnRhaW5lciIsInBvbW9kb3JvTGFiZWwiLCJmb3IiLCJwb21vZG9yb0VsZW1lbnQiLCJpZCIsImRlbGV0ZVRhc2tCdXR0b24iLCJkZWxldGVUYXNrSWNvbiIsImFwcGVuZCIsImFwcGVuZENoaWxkIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsIm5ld05hbWUiLCJIVE1MRWxlbWVudCIsImNvbnRhaW5lckVsZW1lbnQiLCJmaWVsZElucHV0Q29udGFpbmVyIiwibmFtZUlucHV0Q29udGFpbmVyIiwibmFtZUlucHV0TGFiZWwiLCJuYW1lSW5wdXRFbGVtZW50IiwicGxhY2Vob2xkZXIiLCJyZXF1aXJlZCIsInBvbW9kb3JvSW5wdXRDb250YWluZXIiLCJwb21vZG9yb0lucHV0TGFiZWwiLCJwb21vZG9yb0lucHV0RWxlbWVudCIsIm1pbiIsInN1Ym1pdElucHV0RWxlbWVudCIsImN1c3RvbUVsZW1lbnRzIiwiVGFza0l0ZW0iLCJUYXNrSXRlbUZvcm0iLCJ0aXRsZUVsZW1lbnQiLCJ0YXNrSXRlbUxpc3RDb250YWluZXJFbGVtZW50IiwidGFza0l0ZW1Gb3JtRWxlbWVudCIsInZhbGlkYXRlVGltZSIsInRpbWUiLCJ2YWxpZGF0ZUNvbnRhaW5lclJhZGl1cyIsImNvbnRhaW5lclJhZGl1cyIsIl90aW1lIiwiX2NvbnRhaW5lclJhZGl1cyIsInRpbWVyQ29udGFpbmVyIiwidG90YWxTZWNvbmRzIiwibWludXRlcyIsIm1hcCIsInQiLCJzZWNvbmRzIiwidmFsaWRhdGVMZW5ndGgiLCJ2YWxpZGF0ZVByb2dyZXNzIiwicHJvZ3Jlc3MiLCJyb290Iiwic3ZnTmFtZXNwYWNlIiwic3ZnRWxlbWVudCIsImNsYXNzIiwib3ZlcmxheUNpcmNsZUVsZW1lbnQiLCJiYXNlQ2lyY2xlRWxlbWVudCIsImZvcmVpZ25PYmplY3RFbGVtZW50IiwiZm9yZWlnbk9iamVjdENvbnRhaW5lciIsInRpbWVyQ29tcG9uZW50IiwiY2lyY2xlQ29tcG9uZW50IiwiY2lyY2xlQ291bnQiLCJfcmFkaXVzIiwiX3N0cm9rZSIsIl9wcm9ncmVzcyIsInVwZGF0ZUNvbXBvbmVudCIsInJhZGl1cyIsInN0cm9rZSIsIm5vcm1hbGl6ZWRSYWRpdXMiLCJjaXJjdW1mZXJlbmNlIiwiUEkiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJ2YWxpZGF0ZUNpcmNsZUNvdW50IiwiX2NpcmNsZUNvdW50IiwiY291bnRlckNvbnRhaW5lciIsImNpcmNsZXMiLCJmaWxsIiwiY2lyY2xlIiwidmFsaWRhdGVTaG9ydEJyZWFrTGVuZ3RoIiwidmFsaWRhdGVMb25nQnJlYWtMZW5ndGgiLCJ2YWxpZGF0ZVRpbWVyQXVkaW8iLCJpbmNsdWRlcyIsInRpbWVyQXVkaW9EZXNjcmlwdGlvbnMiLCJfc2hvcnRCcmVha0xlbmd0aCIsIl9sb25nQnJlYWtMZW5ndGgiLCJfdGltZXJBdWRpbyIsInBvcHVwQ29udGFpbmVyIiwiZm9ybUlucHV0c0NvbnRhaW5lciIsInBvcHVwVGl0bGUiLCJwb3B1cFRpdGxlSHIiLCJzaG9ydEJyZWFrQ29udGFpbmVyIiwic2hvcnRCcmVha0xhYmVsIiwic2hvcnRCcmVha0lucHV0IiwibWF4Iiwic2hvcnRCcmVha0JvdW5kcyIsInNob3J0QnJlYWtFcnJvciIsImxvbmdCcmVha0NvbnRhaW5lciIsImxvbmdCcmVha0xhYmVsIiwibG9uZ0JyZWFrSW5wdXQiLCJsb25nQnJlYWtCb3VuZHMiLCJsb25nQnJlYWtFcnJvciIsInRpbWVyQXVkaW9Db250YWluZXIiLCJ0aW1lckF1ZGlvTGFiZWwiLCJ0aW1lckF1ZGlvSW5wdXQiLCJ0aW1lckF1ZGlvT3B0aW9ucyIsInBhdGgiLCJzYXZlQnV0dG9uIiwib3ZlcmxheUVsIiwidmlzaWJpbGl0eSIsInRhc2tMaXN0Q29udGFpbmVyIiwidGFza0xpc3RJdGVtQ29udGFpbmVyIiwidGFza0l0ZW1Gb3JtIiwidGFza0l0ZW1Gb3JtQ29udGFpbmVyIiwidGFza0l0ZW1Gb3JtSW5wdXRzIiwicHJvZ3Jlc3NSaW5nRWxlbWVudCIsInRpbWVyRWxlbWVudCIsImNpcmNsZXNFbGVtZW50Iiwic2V0dGluZ3NFbGVtZW50IiwicG9wdXBFbGVtZW50Iiwib3ZlcmxheSIsImVycm9yTWVzc2FnZXMiLCJ0YXNrcyIsInNhdmVUYXNrcyIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0VGFzayIsInRhc2tJbmRleCIsImZpbmRJbmRleCIsInRhc2siLCJ0YXNrRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRUYXNrSXRlbUJ1dHRvbnMiLCJkZWxldGUiLCJzaGFkb3dSb290IiwicXVlcnlTZWxlY3RvckFsbCIsImZpbmQiLCJidG4iLCJnZXRBdHRyaWJ1dGUiLCJhZGRUYXNrVG9Eb20iLCJuZXdUYXNrRWxlbWVudCIsInBvc2l0aW9uIiwiYmVmb3JlIiwicHJlcGVuZCIsInJlbW92ZVRhc2tGcm9tRG9tIiwidGFza1RvUmVtb3ZlIiwidXBkYXRlVGFzayIsInByZXZUYXNrIiwibmV4dFRhc2siLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwic2VsZWN0VGFzayIsInByZXZTZWxlY3RlZFRhc2siLCJzcGxpY2UiLCJ1bnNoaWZ0IiwidXBkYXRlZFRhc2siLCJjcmVhdGVUYXNrRWxlbWVudCIsIm5ld1Rhc2siLCJ0ZXh0Q29udGFpbmVyIiwiZGVsZXRlQnV0dG9uIiwib25jbGljayIsInRhc2tUb0RlbGV0ZSIsImhhbmRsZVRhc2tGb3JtU3VibWl0IiwiaW5kZXhPZkZpcnN0Q29tcGxldGVkIiwibmFtZUlucHV0IiwicG9tb2Rvcm9JbnB1dCIsInBvbW9kb3JvIiwidHJpbW1lZE5hbWUiLCJ0cmltIiwicG9tb2Rvcm9OdW1iZXIiLCJmb2N1cyIsImlucHV0IiwiY2hlY2tEdXBsaWNhdGVUYXNrIiwic29tZSIsInNldEN1c3RvbVZhbGlkaXR5Iiwic2VsZWN0Rmlyc3RUYXNrIiwiZGVzZWxlY3RBbGxUYXNrcyIsInNldFRhc2tsaXN0VXNhYmlsaXR5Iiwic2hvdWxkVGFza2xpc3RCZVVzYWJsZSIsIml0ZW1Db250YWluZXIiLCJidXR0b25zIiwiZGlzYWJsZWQiLCJzZXRQcm9ncmVzcyIsImluaXRpYWxpemVQcm9ncmVzc1JpbmciLCJjdXJyZW50SW50ZXJ2YWxMZW5ndGgiLCJjdXJyUHJvZ3Jlc3MiLCJzZXRUaW1lciIsImluaXRpYWxpemVUaW1lciIsInNldENpcmNsZUNvdW50IiwiaW5pdGlhbGl6ZVBvbW9kb3JvQ2lyY2xlcyIsInRpbWVyQXVkaW9FbGVtZW50IiwiYW5ub3VuY2VtZW50Q29udGFpbmVyIiwiYW5ub3VuY2VtZW50RWxlbWVudCIsInllc0J1dHRvbiIsIm5vQnV0dG9uIiwiY29uZmlybWF0aW9uT3ZlcmxheSIsImNvbmZpcm1hdGlvblBvcHVwIiwic3VtbWFyeU92ZXJsYXkiLCJzdW1tYXJ5UG9wdXAiLCJ0YXNrU3VtbWFyeUxpc3QiLCJwb21vZG9yb3NTdGF0c0VsZW1lbnQiLCJ0YXNrc1N0YXRzRWxlbWVudCIsInNlc3Npb25UaW1lRWxlbWVudCIsImNsb3NlU3VtbWFyeUJ1dHRvbiIsInNldFNob3J0QnJlYWtMZW5ndGgiLCJzZXRMb25nQnJlYWtMZW5ndGgiLCJzZXRUaW1lckF1ZGlvIiwib3BlblBvcHVwIiwicGxheSIsImNhdGNoIiwiY2xvc2VQb3B1cCIsInBhdXNlIiwibXNnIiwic3R5bGUiLCJkaXNwbGF5IiwicG9wdXBGdW5jdGlvbnMiLCJpbml0aWFsaXplUG9wdXAiLCJwYXJzZSIsImdldEl0ZW0iLCJpbml0aWFsaXplSW50ZXJ2YWxMZW5ndGhzIiwiaW5pdGlhbGl6ZUVsZW1lbnRzIiwic2F2ZWRUaW1lckF1ZGlvIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm5ld0JyZWFrTGVuZ3RocyIsIm5ld1Nob3J0QnJlYWtMZW5ndGgiLCJuZXdMb25nQnJlYWtMZW5ndGgiLCJpc05ld1Nob3J0QnJlYWtMZW5ndGhWYWxpZCIsImlzTmV3TG9uZ0JyZWFrTGVuZ3RoVmFsaWQiLCJvbmNoYW5nZSIsInNldEFubm91bmNlbWVudCIsImFubm91bmNlbWVudCIsInNldEJ1dHRvblZpc2liaWxpdHkiLCJpbml0aWFsaXplQW5ub3VuY2VtZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwid2FzQW5ub3VuY2VtZW50QnV0dG9uQ2xpY2tlZCIsImlubmVySFRNTCIsImFsbFRhc2tzIiwiY29tcGxldGVkVW5kZXJCdWRnZXRUYXNrcyIsImZpbHRlciIsIm90aGVyVGFzayIsInN0YXR1cyIsImNvbXBsZXRlZE92ZXJCdWRnZXRUYXNrcyIsImluUHJvZ3Jlc3NUYXNrcyIsIm5vdFN0YXJ0ZWRUYXNrcyIsImNvbXBsZXRlZER1cmluZ1Bhc3RUYXNrcyIsInRhc2tTdW1tYXJ5IiwicG9tb2Rvcm9zRWxlbWVudCIsImNyZWF0ZVRhc2tTdW1tYXJ5IiwiY3JlYXRlVGFza1N1bW1hcnlMaXN0IiwiaG91cnMiLCJ0b3RhbFNlc3Npb25UaW1lIiwibGFzdEludGVydmFsIiwibnVtYmVyT2ZMb25nQnJlYWtzIiwiZXN0aW1hdGVkVG90YWxTZXNzaW9uVGltZSIsImludGVydmFsTmFtZSIsInRpbWVSZW1haW5pbmciLCJnZXRUb3RhbFNlc3Npb25UaW1lIiwicyIsImpvaW4iLCJzdGFydEludGVydmFsIiwiaW50ZXJ2YWxMZW5ndGgiLCJzdGFydFNlc3Npb24iLCJuZXh0SW50ZXJ2YWxMZW5ndGgiLCJzaG91bGRDb250aW51ZSIsIm1haW5FbGVtZW50IiwibmF2QmFyRWxlbWVudCIsImZvb3RlckVsZW1lbnQiLCJzZXNzaW9uQnV0dG9uIiwic2V0dGluZ3NJY29uIiwiZWxlbWVudHNUaGF0Q2hhbmdlVGhlbWUiLCJlbGVtIiwiaW5pdGlhbGl6ZVN1bW1hcnlQb3B1cCIsIm9wZW5TZXR0aW5nc1BvcHVwIiwibCIsIm9sZFRpbWVyQXVkaW9TcmMiLCJUaW1lciIsIlByb2dyZXNzUmluZyIsIlRhc2tMaXN0IiwiU2V0dGluZ3MiLCJQb21vZG9yb0NpcmNsZXMiLCJ0YXNrTGlzdEVsZW1lbnQiLCJyZXN0b3JlZFRhc2tzIiwicmVzdG9yZVRhc2tzIiwib25pbnB1dCIsImluY3JlbWVudGVkVGFzayIsImNvbXBsZXRlZFRhc2siLCJyZW1vdmVkVGFzayIsImNvbXBsZXRlVGFzayIsImluaXRpYWxpemVDb25maXJtYXRpb25Qb3B1cCIsImluaXRpYWxpemVTZXR0aW5nc1BvcHVwIiwiaW5pdGlhbGl6ZUNvbnRyb2xsZXIiLCJuYXZCYXIiLCJvbnNjcm9sbCIsInNjcm9sbFkiXSwibWFwcGluZ3MiOiIyQkFBQUEsRUFBT0MsUUFBVSxFQUFqQixNLFFDT0EsSUFBSUMsRUFBVyxTQUFVRCxHQUN2QixhQUVBLElBRUlFLEVBRkFDLEVBQUtDLE9BQU9DLFVBQ1pDLEVBQVNILEVBQUdJLGVBRVpDLEVBQTRCLG1CQUFYQyxPQUF3QkEsT0FBUyxHQUNsREMsRUFBaUJGLEVBQVFHLFVBQVksYUFDckNDLEVBQXNCSixFQUFRSyxlQUFpQixrQkFDL0NDLEVBQW9CTixFQUFRTyxhQUFlLGdCQUUvQyxTQUFTQyxFQUFPQyxFQUFLQyxFQUFLQyxHQU94QixPQU5BZixPQUFPZ0IsZUFBZUgsRUFBS0MsRUFBSyxDQUM5QkMsTUFBT0EsRUFDUEUsWUFBWSxFQUNaQyxjQUFjLEVBQ2RDLFVBQVUsSUFF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QUFTc0wsY0FBYyxXQUN0Q1YsT0FBTzBLLFNBQVcsV0FDTyxJQUFuQjFLLE9BQU8ySyxRQUNURixFQUFPelIsVUFBVUUsT0FBTyxZQUV4QnVSLEVBQU96UixVQUFVQyxJQUFJLGlCIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn0iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiO1xuaW1wb3J0IGFzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gIHRyeSB7XG4gICAgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5pbXBvcnQgaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IGZyb20gXCIuL2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gIGlmIChpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkge1xuICAgIF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDtcbiAgfSBlbHNlIHtcbiAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBzZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn0iLCJpbXBvcnQgZ2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vZ2V0UHJvdG90eXBlT2YuanNcIjtcbmltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuaW1wb3J0IGlzTmF0aXZlRnVuY3Rpb24gZnJvbSBcIi4vaXNOYXRpdmVGdW5jdGlvbi5qc1wiO1xuaW1wb3J0IGNvbnN0cnVjdCBmcm9tIFwiLi9jb25zdHJ1Y3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDtcblxuICBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzcztcblxuICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtcblxuICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgIHJldHVybiBjb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7XG4gIH07XG5cbiAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiaW1wb3J0IGFycmF5V2l0aEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5TGltaXQuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlUmVzdCBmcm9tIFwiLi9ub25JdGVyYWJsZVJlc3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufSIsIi8qKlxuICogQGZpbGUgQ29uc3RhbnRzIGZpbGVcbiAqL1xuXG4vLyBhbm5vdW5jZW1lbnRzXG5leHBvcnQgY29uc3QgQU5OT1VOQ0VNRU5UUyA9IHtcbiAgcG9tb2Rvcm9JbnRlcnZhbDogJ0ZvY3VzLicsXG4gIHNob3J0QnJlYWtJbnRlcnZhbDogJ0Vuam95IHlvdXIgc2hvcnQgYnJlYWshJyxcbiAgbG9uZ0JyZWFrSW50ZXJ2YWw6ICdHb29kIHdvcmsuIEVuam95IGEgbG9uZ2VyIGJyZWFrIScsXG4gIGludHJvZHVjdGlvbjogJ1doYXQgZG8geW91IG5lZWQgdG8gd29yayBvbiB0b2RheT8nLFxuICBjbGlja1RvU3RhcnQ6ICdIaXQgc3RhcnQgdG8gYmVnaW4geW91ciBwb21vZG9ybyBzZXNzaW9uIScsXG4gIHNlbGVjdE5ld1Rhc2s6ICdTZWxlY3QgYSBuZXcgdGFzayEnLFxuICB0YXNrQ29tcGxldGlvblF1ZXN0aW9uOiAnRGlkIHlvdSBmaW5pc2ggdGhlIHRhc2s/JyxcbiAgZW5kT2ZTZXNzaW9uOiAnR29vZCB3b3JrIHRvZGF5IScsXG4gIG5vVGFza3NBdmFpbGFibGU6ICdBZGQgYSB0YXNrIHRvIGdldCBzdGFydGVkIScsXG59O1xuXG4vLyBpbnRlcnZhbCBuYW1lc1xuZXhwb3J0IGNvbnN0IElOVEVSVkFMUyA9IHtcbiAgcG9tb2Rvcm86ICdwb21vZG9yb0ludGVydmFsJyxcbiAgc2hvcnRCcmVhazogJ3Nob3J0QnJlYWtJbnRlcnZhbCcsXG4gIGxvbmdCcmVhazogJ2xvbmdCcmVha0ludGVydmFsJyxcbn07XG5cbi8vIGxvY2FsU3RvcmFnZSBrZXlzXG5leHBvcnQgY29uc3QgS0VZUyA9IHtcbiAgc2hvcnRCcmVha0xlbmd0aDogJ3Nob3J0QnJlYWtMZW5ndGgnLFxuICBsb25nQnJlYWtMZW5ndGg6ICdsb25nQnJlYWtMZW5ndGgnLFxuICB0aW1lckF1ZGlvOiAndGltZXJBdWRpbycsXG4gIHRhc2tzOiAndGFza3MnLFxufTtcblxuLy8gdGltZXIgYXVkaW8gcGF0aHNcbmV4cG9ydCBjb25zdCBUSU1FUl9BVURJT1MgPSB7XG4gIGNhbG06ICdhc3NldHMvY2FsbS1hbGFybS5tcDMnLFxuICBhbm5veWluZzogJ2Fzc2V0cy9vcmlnaW5hbC1hbGFybS5tcDMnLFxuICBrYW55ZTogJ2Fzc2V0cy9rYW55ZS1zdG9wLm1wMycsXG59O1xuXG4vLyBkZWZhdWx0IHNldHRpbmdzXG5leHBvcnQgY29uc3QgREVGQVVMVF9QT01PRE9ST19MRU5HVEggPSAyNTtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NIT1JUX0JSRUFLX0xFTkdUSCA9IDU7XG5leHBvcnQgY29uc3QgREVGQVVMVF9MT05HX0JSRUFLX0xFTkdUSCA9IDE1O1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVElNRVJfQVVESU8gPSBUSU1FUl9BVURJT1MuY2FsbTtcblxuLy8gYWN0aW9uc1xuZXhwb3J0IGNvbnN0IEFDVElPTlMgPSB7XG4gIGNoYW5nZVNlc3Npb246ICdjaGFuZ2UgY3VycmVudCBzZXNzaW9uJyxcbiAgY2hhbmdlQ3VycmVudFRpbWU6ICdjaGFuZ2UgY3VycmVudCB0aW1lJyxcbiAgY2hhbmdlQ3VycmVudEludGVydmFsOiAnY2hhbmdlIGN1cnJlbnQgaW50ZXJ2YWwnLFxuICBjaGFuZ2VOdW1iZXJPZlBvbW9kb3JvczogJ2NoYW5nZSBudW1iZXIgb2YgcG9tb2Rvcm9zIGNvbXBsZXRlZCcsXG4gIGNoYW5nZVBvbW9kb3JvTGVuZ3RoOiAnY2hhbmdlIHBvbW9kb3JvIGxlbmd0aCcsXG4gIGNoYW5nZVNob3J0QnJlYWtMZW5ndGg6ICdjaGFuZ2Ugc2hvcnQgYnJlYWsgbGVuZ3RoJyxcbiAgY2hhbmdlTG9uZ0JyZWFrTGVuZ3RoOiAnY2hhbmdlIGxvbmcgYnJlYWsgbGVuZ3RoJyxcbiAgY2hhbmdlVGltZXJBdWRpbzogJ2NoYW5nZSB0aW1lciBhdWRpbycsXG4gIGNoYW5nZVNlbGVjdGVkVGFzazogJ2NoYW5nZSBjdXJyZW50bHkgc2VsZWN0ZWQgdGFzaycsXG4gIGluY3JlbWVudFNlbGVjdGVkVGFzazogJ2luY3JlbWVudCBjdXJyZW50IHRhc2snLFxuICBjb21wbGV0ZVNlbGVjdGVkVGFzazogJ2NvbXBsZXRlIGN1cnJlbnQgdGFzaycsXG4gIGRvTm90Q29tcGxldGVTZWxlY3RlZFRhc2s6ICdkbyBub3QgY29tcGxldGUgY3VycmVudCB0YXNrJyxcbiAgYWRkVG9Db21wbGV0ZWRUYXNrczogJ2FkZCB0byBjb21wbGV0ZWQgdGFza3MnLFxuICBjbGVhckNvbXBsZXRlZFRhc2tzOiAnY2xlYXIgY29tcGxldGVkIHRhc2tzJyxcbn07XG4iLCIvKipcbiAqIEBmaWxlIFB1Ymxpc2hlciBpbiB0aGUgcHVibGlzaC1zdWJzY3JpYmUgcGF0dGVybiwgaG9sZHMgZ2xvYmFsIHN0YXRlXG4gKi9cblxuaW1wb3J0IHtcbiAgQUNUSU9OUyxcbiAgREVGQVVMVF9QT01PRE9ST19MRU5HVEgsXG4gIElOVEVSVkFMUyxcbn0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcblxuY29uc3QgdGltZXJBdWRpbyA9IG5ldyBBdWRpbygpO1xudGltZXJBdWRpby52b2x1bWUgPSAwLjI7XG5cbi8vIGluaXRpYWxpemUgc2Vzc2lvbiBzdGF0ZVxuY29uc3Qgc2Vzc2lvblN0YXRlID0ge1xuICBzZXNzaW9uOiAnaW5hY3RpdmUnLFxuICBudW1iZXJPZlBvbW9kb3Jvc0NvbXBsZXRlZDogMCxcbiAgY3VycmVudFRpbWU6IDAsXG4gIGN1cnJlbnRJbnRlcnZhbDogSU5URVJWQUxTLnBvbW9kb3JvLFxuICBjdXJyZW50U2VsZWN0ZWRUYXNrOiBudWxsLFxuICBjb21wbGV0ZWRUYXNrczogW10sXG4gIHBvbW9kb3JvTGVuZ3RoOiAwLjA1IHx8IERFRkFVTFRfUE9NT0RPUk9fTEVOR1RILCAvLyBUT0RPOiBGT1IgVEVTVElORywgdXNlIERFRkFVTFRfUE9NT0RPUk9fTEVOR1RIIGxhdGVyXG4gIHNob3J0QnJlYWtMZW5ndGg6IDAsXG4gIGxvbmdCcmVha0xlbmd0aDogMCxcbiAgdGltZXJBdWRpbyxcbn07XG5cbi8vIG1hcHMgZWFjaCBhY3Rpb24gdG8gYSBzeW5jaHJvbm91cyBtZXNzYWdlIHF1ZXVlIG9mIGNhbGxiYWNrc1xuY29uc3QgYWN0aW9uQ2FsbGJhY2tzID0gT2JqZWN0LnZhbHVlcyhBQ1RJT05TKS5yZWR1Y2UoXG4gIChhY2MsIGFjdGlvbikgPT4gKHsgLi4uYWNjLCBbYWN0aW9uXTogW10gfSksXG4gIHt9LFxuKTtcblxuLyoqXG4gKiBBbGxvdyBjb25zdW1lcnMgdG8gc3Vic2NyaWJlIHRvIHNlc3Npb24gc3RhdGUgYW5kIHVzZSBjYWxsYmFja3MgdG8gYmUgbm90aWZpZWQgb2YgYWN0aW9uc1xuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgRnVuY3Rpb24+fSBjYWxsYmFja3MgLSBvYmplY3QgdGhhdCBtYXBzIGEgc3RhdGUgbmFtZSB0byBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBydW4gd2hlbiB0aGUgc3RhdGUgbmFtZSBjaGFuZ2VzXG4gKiBAcmV0dXJuIHtPYmplY3QuPHN0cmluZywgYW55Pn0gLSBjdXJyZW50IHNlc3Npb24gc3RhdGVcbiAqL1xuY29uc3Qgc3Vic2NyaWJlID0gKGNhbGxiYWNrcykgPT4ge1xuICBpZiAodHlwZW9mIGNhbGxiYWNrcyA9PT0gJ29iamVjdCcgJiYgY2FsbGJhY2tzICE9PSBudWxsKSB7XG4gICAgT2JqZWN0LmVudHJpZXMoY2FsbGJhY2tzKS5mb3JFYWNoKChbYWN0aW9uLCBjYWxsYmFja10pID0+IHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYWN0aW9uQ2FsbGJhY2tzLCBhY3Rpb24pKSB7XG4gICAgICAgIGFjdGlvbkNhbGxiYWNrc1thY3Rpb25dLnB1c2goY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzZXNzaW9uU3RhdGU7XG59O1xuXG4vKipcbiAqIFByb2Nlc3MgYWN0aW9ucywgdXBkYXRlIHN0YXRlLCBhbmQgY2FsbCBjb3JyZXNwb25kaW5nIGNhbGxiYWNrc1xuICogQHBhcmFtIHtzdHJpbmd9IGFjdGlvbiAtIG5hbWUgb2YgYWN0aW9uXG4gKiBAcGFyYW0ge2FueX0gcGF5bG9hZCAtIGFjdGlvbiBwYXlsb2FkXG4gKi9cbmNvbnN0IGRpc3BhdGNoID0gKGFjdGlvbiwgcGF5bG9hZCkgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbikge1xuICAgIGNhc2UgQUNUSU9OUy5jaGFuZ2VTZXNzaW9uOlxuICAgICAgc2Vzc2lvblN0YXRlLnNlc3Npb24gPSBwYXlsb2FkO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBQ1RJT05TLmNoYW5nZUN1cnJlbnRUaW1lOlxuICAgICAgc2Vzc2lvblN0YXRlLmN1cnJlbnRUaW1lID0gcGF5bG9hZDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQUNUSU9OUy5jaGFuZ2VDdXJyZW50SW50ZXJ2YWw6XG4gICAgICBzZXNzaW9uU3RhdGUuY3VycmVudEludGVydmFsID0gcGF5bG9hZDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQUNUSU9OUy5jaGFuZ2VTZWxlY3RlZFRhc2s6XG4gICAgICBzZXNzaW9uU3RhdGUuY3VycmVudFNlbGVjdGVkVGFzayA9IHBheWxvYWQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFDVElPTlMuaW5jcmVtZW50U2VsZWN0ZWRUYXNrOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBQ1RJT05TLmNvbXBsZXRlU2VsZWN0ZWRUYXNrOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBQ1RJT05TLmRvTm90Q29tcGxldGVTZWxlY3RlZFRhc2s6XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFDVElPTlMuYWRkVG9Db21wbGV0ZWRUYXNrczpcbiAgICAgIHNlc3Npb25TdGF0ZS5jb21wbGV0ZWRUYXNrcy5wdXNoKHBheWxvYWQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBQ1RJT05TLmNsZWFyQ29tcGxldGVkVGFza3M6XG4gICAgICBzZXNzaW9uU3RhdGUuY29tcGxldGVkVGFza3MgPSBbXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQUNUSU9OUy5jaGFuZ2VOdW1iZXJPZlBvbW9kb3JvczpcbiAgICAgIHNlc3Npb25TdGF0ZS5udW1iZXJPZlBvbW9kb3Jvc0NvbXBsZXRlZCA9IHBheWxvYWQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFDVElPTlMuY2hhbmdlUG9tb2Rvcm9MZW5ndGg6XG4gICAgICBzZXNzaW9uU3RhdGUucG9tb2Rvcm9MZW5ndGggPSBwYXlsb2FkO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBQ1RJT05TLmNoYW5nZVNob3J0QnJlYWtMZW5ndGg6XG4gICAgICBzZXNzaW9uU3RhdGUuc2hvcnRCcmVha0xlbmd0aCA9IHBheWxvYWQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFDVElPTlMuY2hhbmdlTG9uZ0JyZWFrTGVuZ3RoOlxuICAgICAgc2Vzc2lvblN0YXRlLmxvbmdCcmVha0xlbmd0aCA9IHBheWxvYWQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFDVElPTlMuY2hhbmdlVGltZXJBdWRpbzpcbiAgICAgIHNlc3Npb25TdGF0ZS50aW1lckF1ZGlvLnNyYyA9IHBheWxvYWQ7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuO1xuICB9XG4gIGFjdGlvbkNhbGxiYWNrc1thY3Rpb25dLmZvckVhY2goKGNhbGxiYWNrKSA9PiBjYWxsYmFjayhzZXNzaW9uU3RhdGUpKTtcbn07XG5cbmV4cG9ydCB7IHN1YnNjcmliZSwgZGlzcGF0Y2ggfTtcbiIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufSIsIi8qKlxuICogQGZpbGUgVmFyaW91cyB1dGlsaXR5IG1ldGhvZHNcbiAqL1xuXG5pbXBvcnQgeyBzdWJzY3JpYmUgfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgSU5URVJWQUxTIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gSFRNTEVsZW1lbnQgYW5kIHNldCBpdHMgYXR0cmlidXRlc1xuICogQ3JlYXRlZCB0byByZWR1Y2UgYm9pbGVycGxhdGUgZnJvbSBlbGVtZW50IGNyZWF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWUgLSBlbGVtZW50IHRhZyBuYW1lXG4gKiBAcGFyYW0ge3trZXk6IHN0cmluZ319IHByb3BzIC0gZWxlbWVudCdzIGF0dHJpYnV0ZXMvcHJvcGVydGllc1xuICogQHBhcmFtIHt7b3B0aW9uOiBzdHJpbmd9fSBvcHRpb25zIC0gZWxlbWVudCBvcHRpb25zIHN1Y2ggYXMgbmFtZXNwYWNlXG4gKiBAcmV0dXJuIGVsZW1lbnQgLSBuZXcgSFRNTEVsZW1lbnQgY3JlYXRlZFxuICovXG5jb25zdCBjcmVhdGVFbGVtZW50ID0gKGVsZW1lbnROYW1lLCBwcm9wcyA9IHt9LCBvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgeyBuYW1lc3BhY2UgfSA9IG9wdGlvbnM7XG4gIGxldCBlbGVtZW50O1xuICBpZiAobmFtZXNwYWNlKSB7XG4gICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsIGVsZW1lbnROYW1lKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50TmFtZSk7XG4gIH0gLy8gY3JlYXRlIGVsZW1lbnRcblxuICAvLyBzZXQgYXR0cmlidXRlcy9wcm9wZXJ0aWVzXG4gIE9iamVjdC5lbnRyaWVzKHByb3BzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBpZiAobmFtZXNwYWNlIHx8ICEoa2V5IGluIGVsZW1lbnQpKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudFtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZWxlbWVudDtcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgaWYgaW5wdXQgaXMgc3RyaW5nXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgLSB2YWx1ZSB0byB0byBjaGVja1xuICogQHJldHVybiB7c3RyaW5nIHwgbnVsbH0gLSBzdHJpbmcgaWYgaW5wdXQgaXMgYSB2YWxpZCBzdHJpbmcsIG51bGwgb3RoZXJ3aXNlXG4gKi9cbmNvbnN0IHZhbGlkYXRlU3RyaW5nID0gKHZhbHVlKSA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBUcmllcyB0byBjb252ZXJ0IGlucHV0IHRvIGEgbnVtYmVyXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgLSB0byBiZSBjb252ZXJ0ZWQgdG8gbnVtYmVyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZFRydW5jYXRlIC0gZGV0ZXJtaW5lIGlmIG51bWJlciBzaG91bGQgYmUgdHJ1bmNhdGVkXG4gKiBAcmV0dXJuIHtudW1iZXIgfCBudWxsfSAtIG51bWJlciBpZiBzdWNjZXNzZnVsLCBudWxsIG90aGVyd2lzZVxuICovXG5jb25zdCB2YWxpZGF0ZU51bWJlciA9ICh2YWx1ZSwgc2hvdWxkVHJ1bmNhdGUgPSBmYWxzZSkgPT4ge1xuICBjb25zdCBpc051bWJlck9yU3RyaW5nID1cbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIgfHxcbiAgICB2YWxpZGF0ZVN0cmluZyh2YWx1ZSkgIT09IG51bGw7XG4gIGNvbnN0IG51bWJlciA9IE51bWJlcih2YWx1ZSk7XG4gIGlmICghaXNOdW1iZXJPclN0cmluZyB8fCBOdW1iZXIuaXNOYU4obnVtYmVyKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBzaG91bGRUcnVuY2F0ZSA/IE1hdGguZmxvb3IobnVtYmVyKSA6IG51bWJlcjtcbn07XG5cbi8qKlxuICogVHJpZXMgdG8gY29udmVydCBpbnB1dCB0byBhIGJvb2xlYW5cbiAqIGlucHV0IG11c3QgYmUgYWxyZWFkeSBib29sZWFuIG9yIHRoZSBzdHJpbmdzICd0cnVlJyB8ICdmYWxzZSdcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSAtIHRvIGJlIGNvbnZlcnRlZCB0byBib29sZWFuXG4gKiBAcmV0dXJuIHtib29sZWFuIHwgYW55fSAtIGJvb2xlYW4gaWYgc3VjY2Vzc2Z1bCwgbnVsbCBvdGhlcndpc2VcbiAqL1xuY29uc3QgdmFsaWRhdGVCb29sZWFuID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IGlzQm9vbGVhbiA9IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8IHZhbHVlIGluc3RhbmNlb2YgQm9vbGVhbjtcbiAgaWYgKGlzQm9vbGVhbikge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGNvbnN0IGlzU3RyaW5nID0gdmFsaWRhdGVTdHJpbmcodmFsdWUpICE9PSBudWxsO1xuICBpZiAoaXNTdHJpbmcgJiYgdmFsdWUgPT09ICd0cnVlJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChpc1N0cmluZyAmJiB2YWx1ZSA9PT0gJ2ZhbHNlJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBVc2UgcHJvbWlzZXMgdG8gdGljayBieSBzcGVjaWZpZWQgdGlja0xlbmd0aFxuICogTk9URTogdGlja3MgbWF5IGJlIHNsaWdodGx5IGxvbmdlciB0aGFuIHRoZSBkdXJhdGlvbiBkdWUgdGhlIHNpbmdsZSB0aHJlYWRlZCBuYXR1cmUgb2YgSmF2YVNjcmlwdFxuICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIC0gZHVyYXRpb24gb2YgdGljayAoaW4gc2Vjb25kcylcbiAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IC0gcHJvbWlzZSB0aGF0IHJlc29sdmVzIGFmdGVyIHRpY2sgZHVyYXRpb25cbiAqL1xuY29uc3QgdGljayA9IGFzeW5jIChkdXJhdGlvbikgPT5cbiAgbmV3IFByb21pc2UoKHJlcykgPT4gc2V0VGltZW91dChyZXMsIDEwMDAgKiBkdXJhdGlvbikpO1xuXG4vKipcbiAqIENvbnZlcnRzIHNlY29uZHMgaW50byBNTTpTU1xuICogQHBhcmFtIHtzdHJpbmd9IHNlY29uZHMgLSBzZWNvbmRzIHRvIGNvbnZlcnRcbiAqIEByZXR1cm4ge3N0cmluZ30gLSB0aW1lIGluIGZvcm1hdCBNTTpTU1xuICovXG5jb25zdCBnZXRNaW51dGVzQW5kU2Vjb25kcyA9ICh0b3RhbFNlY29uZHMpID0+IHtcbiAgY29uc3QgW21pbnV0ZXMsIHNlY29uZHNdID0gW1xuICAgIE1hdGguZmxvb3IodG90YWxTZWNvbmRzIC8gNjApLFxuICAgIE1hdGguZmxvb3IodG90YWxTZWNvbmRzICUgNjApLFxuICBdLm1hcCgodCkgPT4gKHQgPCAxMCA/IGAwJHt0fWAgOiB0KSk7IC8vIGxlZnQgdGltZSB1bml0IHdpdGggMCBpZiBuZWNlc3NhcnlcbiAgcmV0dXJuIGAke21pbnV0ZXN9OiR7c2Vjb25kc31gO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBzZWNvbmRzIGludG8gSEg6TU06U1NcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWNvbmRzIC0gc2Vjb25kcyB0byBjb252ZXJ0XG4gKiBAcmV0dXJuIHtzdHJpbmd9IC0gdGltZSBpbiBmb3JtYXQgSEggaCBNTSBtIFNTIHNcbiAqL1xuY29uc3QgZ2V0SG91cnNNaW51dGVzQW5kU2Vjb25kcyA9ICh0b3RhbFNlY29uZHMpID0+IHtcbiAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKHRvdGFsU2Vjb25kcyAvICg2MCAqIDYwKSk7XG4gIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKCh0b3RhbFNlY29uZHMgJSAoNjAgKiA2MCkpIC8gNjApO1xuICBjb25zdCBzZWNvbmRzID0gdG90YWxTZWNvbmRzICUgNjA7XG4gIGNvbnN0IGhvdXJzRm9ybWF0dGVkID0gaG91cnMgPiAwID8gYCR7aG91cnN9aGAgOiAnJztcbiAgY29uc3QgbWludXRlc0Zvcm1hdHRlZCA9IG1pbnV0ZXMgPiAwID8gYCR7bWludXRlc31tYCA6ICcnO1xuICBjb25zdCBzZWNvbmRzRm9ybWF0dGVkID1cbiAgICBzZWNvbmRzID4gMCB8fCAoaG91cnMgPT09IDAgJiYgbWludXRlcyA9PT0gMCkgPyBgJHtzZWNvbmRzfXNgIDogJyc7XG4gIHJldHVybiBbaG91cnNGb3JtYXR0ZWQsIG1pbnV0ZXNGb3JtYXR0ZWQsIHNlY29uZHNGb3JtYXR0ZWRdXG4gICAgLmZpbHRlcigocykgPT4gcyAhPT0gJycpXG4gICAgLmpvaW4oJyAnKTtcbn07XG5cbi8qKlxuICogQ29tcHV0ZXMgdG90YWwgdGltZSBlbGFwc2VkIGR1cmluZyBhIHNlc3Npb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJPZlBvbW9kb3Jvc0NvbXBsZXRlZCAtIG51bWJlciBvZiBwb21vZG9yb3MgY29tcGxldGVkIGR1cmluZyB0aGUgc2Vzc2lvblxuICogQHBhcmFtIHt7aW50ZXJ2YWxOYW1lOiBzdHJpbmcsIHRpbWVSZW1haW5pbmc6IG51bWJlcn19IGxhc3RJbnRlcnZhbCAtIHRoZSBpbnRlcnZhbCBpbiB3aGljaCB0aGUgc2Vzc2lvbiBzdG9wcGVkIGluXG4gKi9cbmNvbnN0IGdldFRvdGFsU2Vzc2lvblRpbWUgPSAobnVtYmVyT2ZQb21vZG9yb3NDb21wbGV0ZWQsIGxhc3RJbnRlcnZhbCkgPT4ge1xuICBjb25zdCB7IHBvbW9kb3JvTGVuZ3RoLCBzaG9ydEJyZWFrTGVuZ3RoLCBsb25nQnJlYWtMZW5ndGggfSA9IHN1YnNjcmliZSgpO1xuICBjb25zdCBudW1iZXJPZkxvbmdCcmVha3MgPSBudW1iZXJPZlBvbW9kb3Jvc0NvbXBsZXRlZCAlIDQ7XG4gIGNvbnN0IG51bWJlck9mU2hvcnRCcmVha3MgPSBudW1iZXJPZlBvbW9kb3Jvc0NvbXBsZXRlZCAtIG51bWJlck9mTG9uZ0JyZWFrcztcbiAgY29uc3QgdG90YWxQb21vZG9yb1RpbWUgPSBudW1iZXJPZlBvbW9kb3Jvc0NvbXBsZXRlZCAqICg2MCAqIHBvbW9kb3JvTGVuZ3RoKTtcbiAgY29uc3QgdG90YWxCcmVha1RpbWUgPVxuICAgIG51bWJlck9mU2hvcnRCcmVha3MgKiAoNjAgKiBzaG9ydEJyZWFrTGVuZ3RoKSArXG4gICAgbnVtYmVyT2ZMb25nQnJlYWtzICogKDYwICogbG9uZ0JyZWFrTGVuZ3RoKTtcbiAgY29uc3QgZXN0aW1hdGVkVG90YWxTZXNzaW9uVGltZSA9IHRvdGFsUG9tb2Rvcm9UaW1lICsgdG90YWxCcmVha1RpbWU7XG5cbiAgLy8gaWYgc2Vzc2lvbiB3YXMgc3RvcHBlZCBkdXJpbmcgcG9tb2Rvcm8gaW50ZXJ2YWwgb3IgYXQgdGhlIGVuZCBvZiBhIGJyZWFrIGludGVydmFsLCB1c2UgdGhlIGVzdGltYXRlZFxuICAvLyBvdGhlcndpc2UsIHN1YnRyYWN0IHRpbWUgbGVmdCBpbiBicmVhayBpbnRlcnZhbFxuICBpZiAoXG4gICAgbGFzdEludGVydmFsLmludGVydmFsTmFtZSA9PT0gSU5URVJWQUxTLnBvbW9kb3JvIHx8XG4gICAgbGFzdEludGVydmFsLnRpbWVSZW1haW5pbmcgPD0gMFxuICApIHtcbiAgICByZXR1cm4gZXN0aW1hdGVkVG90YWxTZXNzaW9uVGltZTtcbiAgfVxuICByZXR1cm4gZXN0aW1hdGVkVG90YWxTZXNzaW9uVGltZSAtIGxhc3RJbnRlcnZhbC50aW1lUmVtYWluaW5nO1xufTtcblxuZXhwb3J0IHtcbiAgY3JlYXRlRWxlbWVudCxcbiAgZ2V0TWludXRlc0FuZFNlY29uZHMsXG4gIGdldEhvdXJzTWludXRlc0FuZFNlY29uZHMsXG4gIGdldFRvdGFsU2Vzc2lvblRpbWUsXG4gIHRpY2ssXG4gIHZhbGlkYXRlTnVtYmVyLFxuICB2YWxpZGF0ZVN0cmluZyxcbiAgdmFsaWRhdGVCb29sZWFuLFxufTtcbiIsIi8qKlxuICogQGZpbGUgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIHRhc2tMaXN0IGNvbXBvbmVudFxuICovXG5cbmltcG9ydCB7IHZhbGlkYXRlQm9vbGVhbiwgdmFsaWRhdGVOdW1iZXIsIHZhbGlkYXRlU3RyaW5nIH0gZnJvbSAnLi9oZWxwZXJzJztcblxuLyoqXG4gKiBWYWxpZGF0ZSBpZiBpbnB1dCBpcyBudW1iZXIsIGdyZWF0ZXIgdGhhbiAwXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgLSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybiB7bnVtYmVyIHwgbnVsbH0gLSBzaG9ydCBicmVhayBsZW5ndGggaWYgdmFsaWQsIG51bGwgb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZVBvbW9kb3JvID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IHBvbW9kb3JvcyA9IHZhbGlkYXRlTnVtYmVyKHZhbHVlLCB0cnVlKTtcbiAgaWYgKHBvbW9kb3JvcyA9PT0gbnVsbCB8fCBwb21vZG9yb3MgPCAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHBvbW9kb3Jvcztcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgaWYgaW5wdXQgaXMgdmFsaWQgdGFza1xuICogQHBhcmFtIHthbnl9IHZhbHVlIC0gdmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm4ge1Rhc2sgfCBudWxsfSAtIFRhc2sgaWYgdmFsaWQsIG51bGwgb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZVRhc2sgPSAodmFsdWUpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7XG4gICAgICBuYW1lLFxuICAgICAgdXNlZFBvbW9kb3JvcyxcbiAgICAgIGVzdGltYXRlZFBvbW9kb3JvcyxcbiAgICAgIHNlbGVjdGVkLFxuICAgICAgY29tcGxldGVkLFxuICAgIH0gPSB2YWx1ZTtcbiAgICBjb25zdCBpc05hbWVWYWxpZCA9IHZhbGlkYXRlU3RyaW5nKG5hbWUpICE9PSBudWxsO1xuICAgIGNvbnN0IGlzVXNlZFBvbW9kb3Jvc1ZhbGlkID0gdmFsaWRhdGVQb21vZG9ybyh1c2VkUG9tb2Rvcm9zKSAhPT0gbnVsbDtcbiAgICBjb25zdCBpc0VzdGltYXRlZFBvbW9kb3Jvc1ZhbGlkID1cbiAgICAgIHZhbGlkYXRlUG9tb2Rvcm8oZXN0aW1hdGVkUG9tb2Rvcm9zKSAhPT0gbnVsbDtcbiAgICBjb25zdCBpc1NlbGVjdGVkVmFsaWQgPSB2YWxpZGF0ZUJvb2xlYW4oc2VsZWN0ZWQpICE9PSBudWxsO1xuICAgIGNvbnN0IGlzQ29tcGxldGVkVmFsaWQgPSB2YWxpZGF0ZUJvb2xlYW4oY29tcGxldGVkKSAhPT0gbnVsbDtcbiAgICBpZiAoXG4gICAgICAhaXNOYW1lVmFsaWQgfHxcbiAgICAgICFpc1VzZWRQb21vZG9yb3NWYWxpZCB8fFxuICAgICAgIWlzRXN0aW1hdGVkUG9tb2Rvcm9zVmFsaWQgfHxcbiAgICAgICFpc0NvbXBsZXRlZFZhbGlkIHx8XG4gICAgICAhaXNTZWxlY3RlZFZhbGlkXG4gICAgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB0YXNrID0ge1xuICAgICAgbmFtZSxcbiAgICAgIHVzZWRQb21vZG9yb3MsXG4gICAgICBlc3RpbWF0ZWRQb21vZG9yb3MsXG4gICAgICBzZWxlY3RlZCxcbiAgICAgIGNvbXBsZXRlZCxcbiAgICB9O1xuICAgIHJldHVybiB0YXNrO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG4iLCIvKipcbiAqIEBmaWxlIHRhc2staXRlbSB3ZWIgY29tcG9uZW50XG4gKi9cblxuaW1wb3J0IHsgc3Vic2NyaWJlIH0gZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB7IEFDVElPTlMsIElOVEVSVkFMUyB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQge1xuICBjcmVhdGVFbGVtZW50LFxuICB2YWxpZGF0ZUJvb2xlYW4sXG4gIHZhbGlkYXRlU3RyaW5nLFxufSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCB7IHZhbGlkYXRlUG9tb2Rvcm8gfSBmcm9tICcuLi91dGlscy90YXNrTGlzdCc7XG5cbi8qKlxuICogQ3VzdG9tIHdlYiBjb21wb25lbnQgcmVwcmVzZW50aW5nIGEgdGFzayBpdGVtLlxuICogQGV4dGVuZHMgSFRNTEVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBuYW1lIC0gbmFtZSBvZiB0YXNrXG4gKiBAcGFyYW0ge251bWJlcn0gZXN0aW1hdGVkLXBvbW9kb3JvcyAtIGVzdGltYXRlZCBudW1iZXIgb2YgcG9tb2Rvcm9zIG5lZWRlZFxuICogQHBhcmFtIHtudW1iZXJ9IHVzZWQtcG9tb2Rvcm9zIC0gcG9tb2Rvcm9zIHVzZWQgc28gZmFyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNlbGVjdGVkIC0gaW5kaWNhdGVzIGlmIHRoZSBjdXJyZW50IHRhc2sgaXMgc2VsZWN0ZWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcGxldGVkIC0gaW5kaWNhdGVzIGlmIHRoZSBjdXJyZW50IHRhc2sgaXMgY29tcGxldGVkXG4gKi9cbmNsYXNzIFRhc2tJdGVtIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ25hbWUnLFxuICAgICAgJ2VzdGltYXRlZC1wb21vZG9yb3MnLFxuICAgICAgJ3VzZWQtcG9tb2Rvcm9zJyxcbiAgICAgICdzZWxlY3RlZCcsXG4gICAgICAnY29tcGxldGVkJyxcbiAgICBdO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX25hbWUgPSAnJztcbiAgICB0aGlzLl91c2VkUG9tb2Rvcm9zID0gMDtcbiAgICB0aGlzLl9lc3RpbWF0ZWRQb21vZG9yb3MgPSAwO1xuICAgIHRoaXMuX3NlbGVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5fY29tcGxldGVkID0gZmFsc2U7XG5cbiAgICAvLyBjcmVhdGUgc2hhZG93IHJvb3RcbiAgICB0aGlzLnNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuXG4gICAgdGhpcy5zdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHRoaXMuc3R5bGVFbGVtZW50LmlubmVyVGV4dCA9IGBcbiAgICAgIC5pdGVtLWNvbnRhaW5lciB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDFlbTtcbiAgICAgICAgcGFkZGluZzogMC41ZW0gMmVtO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgfVxuXG4gICAgICAuaXRlbS1jb250YWluZXI6Zm9jdXMge1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgfVxuXG4gICAgICAuaXRlbS1jb250YWluZXIuc2VsZWN0ZWQucG9tb2Rvcm8ge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjOTBlMGVmO1xuICAgICAgfVxuXG4gICAgICAuaXRlbS1jb250YWluZXIuc2VsZWN0ZWQuc2hvcnQtYnJlYWsge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjN2NlNDA3O1xuICAgICAgfVxuXG4gICAgICAuaXRlbS1jb250YWluZXIuc2VsZWN0ZWQubG9uZy1icmVhayB7XG4gICAgICAgIGJhY2tncm91bmQ6ICNmOTllM2Q7XG4gICAgICB9XG5cbiAgICAgIC50ZXh0LWNvbnRhaW5lciB7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMSk7XG4gICAgICAgIGNvbG9yOiAjNTU1O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHBhZGRpbmc6IDAuNWVtO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgICBmb250OiAxcmVtIFNvdXJjZSBTYW5zIFBybywgc2Fucy1zZXJpZjtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICB9XG5cbiAgICAgIC5pdGVtLWNvbnRhaW5lcjpub3QoLmRpc2FibGVkKTpub3QoLnNlbGVjdGVkKTpub3QoLmNvbXBsZXRlZCkgPiAudGV4dC1jb250YWluZXI6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCk7XG4gICAgICB9XG5cbiAgICAgIC50ZXh0LWNvbnRhaW5lcjpmb2N1cyB7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDJwdCAjOTBlMGVmO1xuICAgICAgfVxuXG4gICAgICAuaXRlbS1jb250YWluZXIuc2VsZWN0ZWQgPiAudGV4dC1jb250YWluZXI6Zm9jdXMge1xuICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAycHQgIzAwYjRkODtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLnRhc2stbmFtZSB7XG4gICAgICAgIHdpZHRoOiA4MCU7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgbWFyZ2luOiAwLjVlbSAwO1xuICAgICAgfVxuXG4gICAgICAuaXRlbS1jb250YWluZXIuY29tcGxldGVkIC50YXNrLW5hbWUge1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLnRhc2stcG9tb2Rvcm8tY29udGFpbmVyIHtcbiAgICAgICAgd2lkdGg6IDIwJTtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLXBvbW9kb3JvLWxhYmVsIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IC0wLjVlbTtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIGZvbnQ6IDAuOHJlbSAnU291cmNlIFNhbnMgUHJvJywgc2Fucy1zZXJpZjtcbiAgICAgICAgY29sb3I6ICM3Nzc7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLXBvbW9kb3JvIHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICBtYXJnaW46IDFlbSAwIDAgMDtcbiAgICAgIH1cblxuICAgICAgLnRhc2stYnV0dG9uIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIHBhZGRpbmc6IDAuMjVlbTtcbiAgICAgICAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMSk7IFxuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgfVxuXG4gICAgICAuaXRlbS1jb250YWluZXI6aG92ZXI6bm90KC5kaXNhYmxlZCkgPiAudGFzay1idXR0b24sXG4gICAgICAudGFzay1idXR0b246Zm9jdXMge1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgfVxuXG4gICAgICAudGFzay1idXR0b246Zm9jdXMge1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICB6LWluZGV4OiAxO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLWJ1dHRvbjpmb2N1cyB7XG4gICAgICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDJwdCAjOTBlMGVmO1xuICAgICAgfVxuXG4gICAgICAuaXRlbS1jb250YWluZXIuc2VsZWN0ZWQgPiAudGFzay1idXR0b246Zm9jdXMge1xuICAgICAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAycHQgIzAwYjRkODtcbiAgICAgIH1cblxuICAgICAgLnRhc2stYnV0dG9uOmhvdmVyIHtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpOyBcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyk7XG4gICAgICB9XG5cbiAgICAgIC5pdGVtLWNvbnRhaW5lci5zZWxlY3RlZCA+IC50YXNrLWJ1dHRvbixcbiAgICAgIC5pdGVtLWNvbnRhaW5lci5zZWxlY3RlZCA+IC50YXNrLWJ1dHRvbjpob3ZlciB7XG4gICAgICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNTQpO1xuICAgICAgfVxuXG4gICAgICAudGFzay1idXR0b246ZGlzYWJsZWQge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgfVxuXG4gICAgICAudGFzay1idXR0b24taWNvbiB7XG4gICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xuICAgICAgfVxuXG4gICAgICAjZGVsZXRlLWJ1dHRvbiB7XG4gICAgICAgIHRvcDogNTAlO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XG4gICAgICB9XG4gICAgYDtcblxuICAgIHRoaXMubWF0ZXJpYWxJY29uTGlua0VsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdsaW5rJywge1xuICAgICAgcmVsOiAnc3R5bGVzaGVldCcsXG4gICAgICBocmVmOiAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9pY29uP2ZhbWlseT1NYXRlcmlhbCtJY29ucycsXG4gICAgfSk7XG5cbiAgICB0aGlzLml0ZW1Db250YWluZXJFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnaXRlbS1jb250YWluZXIgcG9tb2Rvcm8nLFxuICAgIH0pO1xuICAgIHRoaXMudGV4dENvbnRhaW5lckVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XG4gICAgICBjbGFzc05hbWU6ICd0ZXh0LWNvbnRhaW5lcicsXG4gICAgICBvbm1vdXNlb3V0OiAoZSkgPT4ge1xuICAgICAgICBlLnRhcmdldC5ibHVyKCk7XG4gICAgICB9LFxuICAgICAgb25tb3VzZWRvd246IChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgdGhpcy5uYW1lRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ3AnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXNrLW5hbWUnLFxuICAgIH0pO1xuICAgIHRoaXMucG9tb2Rvcm9Db250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgY2xhc3NOYW1lOiAndGFzay1wb21vZG9yby1jb250YWluZXInLFxuICAgIH0pO1xuICAgIHRoaXMucG9tb2Rvcm9MYWJlbCA9IGNyZWF0ZUVsZW1lbnQoJ2xhYmVsJywge1xuICAgICAgY2xhc3NOYW1lOiAndGFzay1wb21vZG9yby1sYWJlbCcsXG4gICAgICBmb3I6ICd0YXNrLXBvbW9kb3JvJyxcbiAgICAgIGlubmVyVGV4dDogJ1BvbW9kb3JvcycsXG4gICAgfSk7XG4gICAgdGhpcy5wb21vZG9yb0VsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdwJywge1xuICAgICAgY2xhc3NOYW1lOiAndGFzay1wb21vZG9ybycsXG4gICAgICBpZDogJ3Rhc2stcG9tb2Rvcm8nLFxuICAgIH0pO1xuXG4gICAgdGhpcy5kZWxldGVUYXNrQnV0dG9uID0gY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1xuICAgICAgY2xhc3NOYW1lOiAndGFzay1idXR0b24nLFxuICAgICAgaWQ6ICdkZWxldGUtYnV0dG9uJyxcbiAgICAgIG9ubW91c2VvdXQ6IChlKSA9PiB7XG4gICAgICAgIGUudGFyZ2V0LmJsdXIoKTtcbiAgICAgIH0sXG4gICAgICBvbm1vdXNlZG93bjogKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICB0aGlzLmRlbGV0ZVRhc2tJY29uID0gY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ21hdGVyaWFsLWljb25zIHRhc2stYnV0dG9uLWljb24nLFxuICAgICAgaW5uZXJUZXh0OiAnZGVsZXRlJyxcbiAgICB9KTtcblxuICAgIHRoaXMuc2hhZG93LmFwcGVuZChcbiAgICAgIHRoaXMubWF0ZXJpYWxJY29uTGlua0VsZW1lbnQsXG4gICAgICB0aGlzLnN0eWxlRWxlbWVudCxcbiAgICAgIHRoaXMuaXRlbUNvbnRhaW5lckVsZW1lbnQsXG4gICAgKTtcbiAgICB0aGlzLml0ZW1Db250YWluZXJFbGVtZW50LmFwcGVuZChcbiAgICAgIHRoaXMudGV4dENvbnRhaW5lckVsZW1lbnQsXG4gICAgICB0aGlzLmRlbGV0ZVRhc2tCdXR0b24sXG4gICAgKTtcbiAgICB0aGlzLmRlbGV0ZVRhc2tCdXR0b24uYXBwZW5kQ2hpbGQodGhpcy5kZWxldGVUYXNrSWNvbik7XG4gICAgdGhpcy50ZXh0Q29udGFpbmVyRWxlbWVudC5hcHBlbmQodGhpcy5uYW1lRWxlbWVudCwgdGhpcy5wb21vZG9yb0NvbnRhaW5lcik7XG4gICAgdGhpcy5wb21vZG9yb0NvbnRhaW5lci5hcHBlbmQodGhpcy5wb21vZG9yb0xhYmVsLCB0aGlzLnBvbW9kb3JvRWxlbWVudCk7XG5cbiAgICBzdWJzY3JpYmUoe1xuICAgICAgW0FDVElPTlMuY2hhbmdlU2Vzc2lvbl06IChzZXNzaW9uU3RhdGUpID0+IHtcbiAgICAgICAgaWYgKHNlc3Npb25TdGF0ZS5zZXNzaW9uID09PSAnaW5hY3RpdmUnKSB7XG4gICAgICAgICAgdGhpcy5pdGVtQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdwb21vZG9ybycpO1xuICAgICAgICAgIHRoaXMuaXRlbUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc2hvcnQtYnJlYWsnKTtcbiAgICAgICAgICB0aGlzLml0ZW1Db250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2xvbmctYnJlYWsnKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFtBQ1RJT05TLmNoYW5nZUN1cnJlbnRJbnRlcnZhbF06IChzZXNzaW9uU3RhdGUpID0+IHtcbiAgICAgICAgaWYgKHNlc3Npb25TdGF0ZS5zZXNzaW9uID09PSAnYWN0aXZlJykge1xuICAgICAgICAgIHN3aXRjaCAoc2Vzc2lvblN0YXRlLmN1cnJlbnRJbnRlcnZhbCkge1xuICAgICAgICAgICAgY2FzZSBJTlRFUlZBTFMucG9tb2Rvcm86XG4gICAgICAgICAgICAgIHRoaXMuaXRlbUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LmFkZCgncG9tb2Rvcm8nKTtcbiAgICAgICAgICAgICAgdGhpcy5pdGVtQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzaG9ydC1icmVhaycpO1xuICAgICAgICAgICAgICB0aGlzLml0ZW1Db250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2xvbmctYnJlYWsnKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIElOVEVSVkFMUy5zaG9ydEJyZWFrOlxuICAgICAgICAgICAgICB0aGlzLml0ZW1Db250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3BvbW9kb3JvJyk7XG4gICAgICAgICAgICAgIHRoaXMuaXRlbUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2hvcnQtYnJlYWsnKTtcbiAgICAgICAgICAgICAgdGhpcy5pdGVtQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdsb25nLWJyZWFrJyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBJTlRFUlZBTFMubG9uZ0JyZWFrOlxuICAgICAgICAgICAgICB0aGlzLml0ZW1Db250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3BvbW9kb3JvJyk7XG4gICAgICAgICAgICAgIHRoaXMuaXRlbUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc2hvcnQtYnJlYWsnKTtcbiAgICAgICAgICAgICAgdGhpcy5pdGVtQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdsb25nLWJyZWFrJyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdGhpcy5pdGVtQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdwb21vZG9ybycpO1xuICAgICAgICAgICAgICB0aGlzLml0ZW1Db250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3J0LWJyZWFrJyk7XG4gICAgICAgICAgICAgIHRoaXMuaXRlbUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnbG9uZy1icmVhaycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgJ25hbWUnOiB7XG4gICAgICAgIGNvbnN0IG5ld05hbWUgPSB2YWxpZGF0ZVN0cmluZyhuZXdWYWx1ZSk7XG5cbiAgICAgICAgdGhpcy5uYW1lRWxlbWVudC5pbm5lclRleHQgPSBuZXdOYW1lO1xuICAgICAgICB0aGlzLl9uYW1lID0gbmV3TmFtZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICd1c2VkLXBvbW9kb3Jvcyc6IHtcbiAgICAgICAgY29uc3QgdXNlZFBvbW9kb3JvcyA9IHZhbGlkYXRlUG9tb2Rvcm8obmV3VmFsdWUpO1xuICAgICAgICBpZiAodXNlZFBvbW9kb3JvcyA9PT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl91c2VkUG9tb2Rvcm9zID0gdXNlZFBvbW9kb3JvcztcbiAgICAgICAgdGhpcy5wb21vZG9yb0VsZW1lbnQuaW5uZXJUZXh0ID0gYCR7dGhpcy51c2VkUG9tb2Rvcm9zfS8ke3RoaXMuZXN0aW1hdGVkUG9tb2Rvcm9zfWA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnZXN0aW1hdGVkLXBvbW9kb3Jvcyc6IHtcbiAgICAgICAgY29uc3QgZXN0aW1hdGVkUG9tb2Rvcm9zID0gdmFsaWRhdGVQb21vZG9ybyhuZXdWYWx1ZSk7XG4gICAgICAgIGlmIChlc3RpbWF0ZWRQb21vZG9yb3MgPT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZXN0aW1hdGVkUG9tb2Rvcm9zID0gZXN0aW1hdGVkUG9tb2Rvcm9zO1xuICAgICAgICB0aGlzLnBvbW9kb3JvRWxlbWVudC5pbm5lclRleHQgPSBgJHt0aGlzLnVzZWRQb21vZG9yb3N9LyR7dGhpcy5lc3RpbWF0ZWRQb21vZG9yb3N9YDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdzZWxlY3RlZCc6IHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSB2YWxpZGF0ZUJvb2xlYW4obmV3VmFsdWUpO1xuICAgICAgICBpZiAoc2VsZWN0ZWQgPT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgICAgdGhpcy5pdGVtQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaXRlbUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2NvbXBsZXRlZCc6IHtcbiAgICAgICAgY29uc3QgY29tcGxldGVkID0gdmFsaWRhdGVCb29sZWFuKG5ld1ZhbHVlKTtcbiAgICAgICAgaWYgKGNvbXBsZXRlZCA9PT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jb21wbGV0ZWQgPSBjb21wbGV0ZWQ7XG4gICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICB0aGlzLml0ZW1Db250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NvbXBsZXRlZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaXRlbUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnY29tcGxldGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxuXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICB9XG5cbiAgc2V0IG5hbWUodmFsdWUpIHtcbiAgICBjb25zdCBuYW1lID0gdmFsaWRhdGVTdHJpbmcodmFsdWUpO1xuICAgIGlmIChuYW1lID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ25hbWUnLCB0aGlzLl9uYW1lKTtcbiAgfVxuXG4gIGdldCB1c2VkUG9tb2Rvcm9zKCkge1xuICAgIHJldHVybiB0aGlzLl91c2VkUG9tb2Rvcm9zO1xuICB9XG5cbiAgc2V0IHVzZWRQb21vZG9yb3ModmFsdWUpIHtcbiAgICBjb25zdCB1c2VkUG9tb2Rvcm9zID0gdmFsaWRhdGVQb21vZG9ybyh2YWx1ZSk7XG4gICAgaWYgKHVzZWRQb21vZG9yb3MgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl91c2VkUG9tb2Rvcm9zID0gdXNlZFBvbW9kb3JvcztcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgndXNlZC1wb21vZG9yb3MnLCB0aGlzLl91c2VkUG9tb2Rvcm9zKTtcbiAgfVxuXG4gIGdldCBlc3RpbWF0ZWRQb21vZG9yb3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VzdGltYXRlZFBvbW9kb3JvcztcbiAgfVxuXG4gIHNldCBlc3RpbWF0ZWRQb21vZG9yb3ModmFsdWUpIHtcbiAgICBjb25zdCBlc3RpbWF0ZWRQb21vZG9yb3MgPSB2YWxpZGF0ZVBvbW9kb3JvKHZhbHVlKTtcbiAgICBpZiAoZXN0aW1hdGVkUG9tb2Rvcm9zID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fZXN0aW1hdGVkUG9tb2Rvcm9zID0gZXN0aW1hdGVkUG9tb2Rvcm9zO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdlc3RpbWF0ZWQtcG9tb2Rvcm9zJywgdGhpcy5fZXN0aW1hdGVkUG9tb2Rvcm9zKTtcbiAgfVxuXG4gIGdldCBzZWxlY3RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWQ7XG4gIH1cblxuICBzZXQgc2VsZWN0ZWQodmFsdWUpIHtcbiAgICBjb25zdCBzZWxlY3RlZCA9IHZhbGlkYXRlQm9vbGVhbih2YWx1ZSk7XG4gICAgaWYgKHNlbGVjdGVkID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCB0aGlzLl9zZWxlY3RlZCk7XG4gIH1cblxuICBnZXQgY29tcGxldGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9jb21wbGV0ZWQ7XG4gIH1cblxuICBzZXQgY29tcGxldGVkKHZhbHVlKSB7XG4gICAgY29uc3QgY29tcGxldGVkID0gdmFsaWRhdGVCb29sZWFuKHZhbHVlKTtcbiAgICBpZiAoY29tcGxldGVkID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fY29tcGxldGVkID0gY29tcGxldGVkO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdjb21wbGV0ZWQnLCB0aGlzLl9jb21wbGV0ZWQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRhc2tJdGVtO1xuIiwiLyoqXG4gKiBAZmlsZSB0YXNrLWl0ZW0tZm9ybSB3ZWIgY29tcG9uZW50XG4gKi9cblxuaW1wb3J0IHsgc3Vic2NyaWJlIH0gZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB7IEFDVElPTlMsIElOVEVSVkFMUyB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5cbi8qKlxuICogQ3VzdG9tIHdlYiBjb21wb25lbnQgcmVwcmVzZW50aW5nIGEgdGFzayBpdGVtIGZvcm0uXG4gKiBAZXh0ZW5kcyBIVE1MRWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IG5hbWUgLSBuYW1lIG9mIHRhc2tcbiAqIEBwYXJhbSB7bnVtYmVyfSBlc3RpbWF0ZWQtcG9tb2Rvcm9zIC0gZXN0aW1hdGVkIG51bWJlciBvZiBwb21vZG9yb3MgbmVlZGVkXG4gKi9cbmNsYXNzIFRhc2tJdGVtRm9ybSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuc2hhZG93ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG5cbiAgICB0aGlzLnN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgdGhpcy5zdHlsZUVsZW1lbnQuaW5uZXJUZXh0ID0gYFxuICAgICAgLnRhc2stZm9ybSB7XG4gICAgICAgIG1hcmdpbjogMWVtO1xuICAgICAgICBwYWRkaW5nOiAxZW0gO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgfVxuXG4gICAgICAuZmllbGQtaW5wdXQtY29udGFpbmVyIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMWVtO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICB9XG5cbiAgICAgIC5uYW1lLWlucHV0LWNvbnRhaW5lciB7XG4gICAgICAgIGZsZXg6IDQ7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIH1cblxuICAgICAgLnBvbW9kb3JvLWlucHV0LWNvbnRhaW5lciB7XG4gICAgICAgIGZsZXg6IDE7XG4gICAgICAgIG1pbi13aWR0aDogOTVweDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgfVxuXG4gICAgICAudGFzay1pbnB1dC1sYWJlbCB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgei1pbmRleDogMjtcbiAgICAgICAgZm9udDogMC44cmVtICdTb3VyY2UgU2FucyBQcm8nLCBzYW5zLXNlcmlmO1xuICAgICAgICBjb2xvcjogIzc3NztcbiAgICAgIH1cblxuICAgICAgI25hbWUtaW5wdXQtbGFiZWwge1xuICAgICAgICB0b3A6IDAuMmVtO1xuICAgICAgICBsZWZ0OiAwLjc1ZW07XG4gICAgICB9XG5cbiAgICAgICNwb21vZG9yby1pbnB1dC1sYWJlbCB7XG4gICAgICAgIHRvcDogMC4yZW07XG4gICAgICAgIGxlZnQ6IDAuNzVlbTtcbiAgICAgIH1cblxuICAgICAgLnRhc2staW5wdXRbdHlwZT0ndGV4dCddLFxuICAgICAgLnRhc2staW5wdXRbdHlwZT0nbnVtYmVyJ10ge1xuICAgICAgICBwYWRkaW5nOiAxLjVlbSAwLjc1ZW0gMC43NWVtIDAuNzVlbTtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBmb250OiAxcmVtICdTb3VyY2UgU2FucyBQcm8nLCBzYW5zLXNlcmlmO1xuICAgICAgICBjb2xvcjogIzQ0NDtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLWlucHV0OmZvY3VzIHtcbiAgICAgICAgYm94LXNoYWRvdzogMCAwIDAgMnB0ICNjOGM4Yzg7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIH1cblxuICAgICAgI25hbWUtaW5wdXQge1xuICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiA1cHg7XG4gICAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDVweDtcbiAgICAgIH1cblxuICAgICAgI3BvbW9kb3JvLWlucHV0IHtcbiAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDVweDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDVweDtcbiAgICAgIH1cblxuICAgICAgLnRhc2staW5wdXRbdHlwZT0ndGV4dCddOjpwbGFjZWhvbGRlcixcbiAgICAgIC50YXNrLWlucHV0W3R5cGU9J251bWJlciddOjpwbGFjZWhvbGRlciB7XG4gICAgICAgIGNvbG9yOiAjYzhjOGM4O1xuICAgICAgfVxuXG4gICAgICAjc3VibWl0LWlucHV0IHtcbiAgICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAgICAgICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XG4gICAgICAgIHdpZHRoOiA1MCU7XG4gICAgICAgIG1hcmdpbjogYXV0bztcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgcGFkZGluZzogMC41ZW07XG4gICAgICAgIGZvbnQ6IDEuMXJlbSAnRHVydSBTYW5zJywgc2Fucy1zZXJpZjtcbiAgICAgIH1cblxuICAgICAgI3N1Ym1pdC1pbnB1dC5wb21vZG9ybyB7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYig3NywgMjA3LCAyMzMpO1xuICAgICAgfVxuXG4gICAgICAjc3VibWl0LWlucHV0LnNob3J0LWJyZWFrIHtcbiAgICAgICAgYmFja2dyb3VuZDogIzY5ZGEwMDtcbiAgICAgIH1cblxuICAgICAgI3N1Ym1pdC1pbnB1dC5sb25nLWJyZWFrIHtcbiAgICAgICAgYmFja2dyb3VuZDogI2Y5OGYzODtcbiAgICAgIH1cblxuICAgICAgI3N1Ym1pdC1pbnB1dC5wb21vZG9ybzpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYigxMTIsIDIxNiwgMjM3KTtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgfVxuXG4gICAgICAjc3VibWl0LWlucHV0LnNob3J0LWJyZWFrOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZDogIzdjZTQwNztcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgfVxuXG4gICAgICAjc3VibWl0LWlucHV0LmxvbmctYnJlYWs6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjZjk5ZTNkO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICB9XG4gICAgYDtcblxuICAgIHRoaXMuY29udGFpbmVyRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2Zvcm0nLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXNrLWZvcm0nLFxuICAgIH0pO1xuXG4gICAgdGhpcy5maWVsZElucHV0Q29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnZmllbGQtaW5wdXQtY29udGFpbmVyJyxcbiAgICB9KTtcblxuICAgIHRoaXMubmFtZUlucHV0Q29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnbmFtZS1pbnB1dC1jb250YWluZXInLFxuICAgIH0pO1xuXG4gICAgdGhpcy5uYW1lSW5wdXRMYWJlbCA9IGNyZWF0ZUVsZW1lbnQoJ2xhYmVsJywge1xuICAgICAgY2xhc3NOYW1lOiAndGFzay1pbnB1dC1sYWJlbCcsXG4gICAgICBpZDogJ25hbWUtaW5wdXQtbGFiZWwnLFxuICAgICAgZm9yOiAnbmFtZS1pbnB1dCcsXG4gICAgICBpbm5lclRleHQ6ICdOYW1lJyxcbiAgICB9KTtcblxuICAgIHRoaXMubmFtZUlucHV0RWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xuICAgICAgY2xhc3NOYW1lOiAndGFzay1pbnB1dCcsXG4gICAgICBpZDogJ25hbWUtaW5wdXQnLFxuICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgbmFtZTogJ25hbWUnLFxuICAgICAgcGxhY2Vob2xkZXI6ICdUYXNrIERlc2NyaXB0aW9uLi4uJyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgdGhpcy5wb21vZG9yb0lucHV0Q29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAncG9tb2Rvcm8taW5wdXQtY29udGFpbmVyJyxcbiAgICB9KTtcblxuICAgIHRoaXMucG9tb2Rvcm9JbnB1dExhYmVsID0gY3JlYXRlRWxlbWVudCgnbGFiZWwnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXNrLWlucHV0LWxhYmVsJyxcbiAgICAgIGlkOiAncG9tb2Rvcm8taW5wdXQtbGFiZWwnLFxuICAgICAgZm9yOiAncG9tb2Rvcm8taW5wdXQnLFxuICAgICAgaW5uZXJUZXh0OiAnRXN0IFBvbW9kb3JvcycsXG4gICAgfSk7XG5cbiAgICB0aGlzLnBvbW9kb3JvSW5wdXRFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXNrLWlucHV0JyxcbiAgICAgIGlkOiAncG9tb2Rvcm8taW5wdXQnLFxuICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICBuYW1lOiAncG9tb2Rvcm8nLFxuICAgICAgcGxhY2Vob2xkZXI6ICcjJyxcbiAgICAgIG1pbjogJzEnLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgfSk7XG5cbiAgICB0aGlzLnN1Ym1pdElucHV0RWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xuICAgICAgY2xhc3NOYW1lOiAndGFzay1pbnB1dCBwb21vZG9ybycsXG4gICAgICBpZDogJ3N1Ym1pdC1pbnB1dCcsXG4gICAgICB0eXBlOiAnc3VibWl0JyxcbiAgICAgIHZhbHVlOiAnQUREJyxcbiAgICB9KTtcblxuICAgIHRoaXMuc2hhZG93LmFwcGVuZCh0aGlzLnN0eWxlRWxlbWVudCwgdGhpcy5jb250YWluZXJFbGVtZW50KTtcbiAgICB0aGlzLmNvbnRhaW5lckVsZW1lbnQuYXBwZW5kKFxuICAgICAgdGhpcy5maWVsZElucHV0Q29udGFpbmVyLFxuICAgICAgdGhpcy5zdWJtaXRJbnB1dEVsZW1lbnQsXG4gICAgKTtcbiAgICB0aGlzLmZpZWxkSW5wdXRDb250YWluZXIuYXBwZW5kKFxuICAgICAgdGhpcy5uYW1lSW5wdXRDb250YWluZXIsXG4gICAgICB0aGlzLnBvbW9kb3JvSW5wdXRDb250YWluZXIsXG4gICAgKTtcbiAgICB0aGlzLm5hbWVJbnB1dENvbnRhaW5lci5hcHBlbmQodGhpcy5uYW1lSW5wdXRMYWJlbCwgdGhpcy5uYW1lSW5wdXRFbGVtZW50KTtcbiAgICB0aGlzLnBvbW9kb3JvSW5wdXRDb250YWluZXIuYXBwZW5kKFxuICAgICAgdGhpcy5wb21vZG9yb0lucHV0TGFiZWwsXG4gICAgICB0aGlzLnBvbW9kb3JvSW5wdXRFbGVtZW50LFxuICAgICk7XG5cbiAgICBzdWJzY3JpYmUoe1xuICAgICAgW0FDVElPTlMuY2hhbmdlU2Vzc2lvbl06IChzZXNzaW9uU3RhdGUpID0+IHtcbiAgICAgICAgaWYgKHNlc3Npb25TdGF0ZS5zZXNzaW9uID09PSAnaW5hY3RpdmUnKSB7XG4gICAgICAgICAgdGhpcy5zdWJtaXRJbnB1dEVsZW1lbnQuY2xhc3NOYW1lID0gJ3BvbW9kb3JvJztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFtBQ1RJT05TLmNoYW5nZUN1cnJlbnRJbnRlcnZhbF06IChzZXNzaW9uU3RhdGUpID0+IHtcbiAgICAgICAgaWYgKHNlc3Npb25TdGF0ZS5zZXNzaW9uID09PSAnYWN0aXZlJykge1xuICAgICAgICAgIHN3aXRjaCAoc2Vzc2lvblN0YXRlLmN1cnJlbnRJbnRlcnZhbCkge1xuICAgICAgICAgICAgY2FzZSBJTlRFUlZBTFMucG9tb2Rvcm86XG4gICAgICAgICAgICAgIHRoaXMuc3VibWl0SW5wdXRFbGVtZW50LmNsYXNzTmFtZSA9ICdwb21vZG9ybyc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBJTlRFUlZBTFMuc2hvcnRCcmVhazpcbiAgICAgICAgICAgICAgdGhpcy5zdWJtaXRJbnB1dEVsZW1lbnQuY2xhc3NOYW1lID0gJ3Nob3J0LWJyZWFrJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIElOVEVSVkFMUy5sb25nQnJlYWs6XG4gICAgICAgICAgICAgIHRoaXMuc3VibWl0SW5wdXRFbGVtZW50LmNsYXNzTmFtZSA9ICdsb25nLWJyZWFrJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aGlzLnN1Ym1pdElucHV0RWxlbWVudC5jbGFzc05hbWUgPSAncG9tb2Rvcm8nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUYXNrSXRlbUZvcm07XG4iLCIvKipcbiAqIEBmaWxlIHRhc2stbGlzdCB3ZWIgY29tcG9uZW50XG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IFRhc2tJdGVtIGZyb20gJy4vVGFza0l0ZW0nO1xuaW1wb3J0IFRhc2tJdGVtRm9ybSBmcm9tICcuL1Rhc2tJdGVtRm9ybSc7XG5pbXBvcnQgeyBzdWJzY3JpYmUgfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgQUNUSU9OUywgSU5URVJWQUxTIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCd0YXNrLWl0ZW0nLCBUYXNrSXRlbSk7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3Rhc2staXRlbS1mb3JtJywgVGFza0l0ZW1Gb3JtKTtcblxuLyoqXG4gKiBDdXN0b20gd2ViIGNvbXBvbmVudCByZXByZXNlbnRpbmcgYSB0YXNrIGxpc3QuXG4gKiBAZXh0ZW5kcyBIVE1MRWxlbWVudFxuICovXG5jbGFzcyBUYXNrTGlzdCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuc2hhZG93ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgdGhpcy5zdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHRoaXMuc3R5bGVFbGVtZW50LmlubmVyVGV4dCA9IGBcbiAgICAgIC5jb250YWluZXIge1xuICAgICAgICBwYWRkaW5nOiAxZW07XG4gICAgICAgIGZvbnQ6IG5vcm1hbCAxcmVtICdTb3VyY2UgU2FucyBQcm8nLCBzYW5zLXNlcmlmO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgZmxleDogMSAxIDA7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICB9XG5cbiAgICAgIC5jb250YWluZXIucG9tb2Rvcm8ge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjMDBiNGQ4O1xuICAgICAgfVxuXG4gICAgICAuY29udGFpbmVyLnNob3J0LWJyZWFrIHtcbiAgICAgICAgYmFja2dyb3VuZDogIzU0QzgwMDtcbiAgICAgIH1cblxuICAgICAgLmNvbnRhaW5lci5sb25nLWJyZWFrIHtcbiAgICAgICAgYmFja2dyb3VuZDogI2Y4NzMzNTtcbiAgICAgIH1cblxuICAgICAgLnRhc2staXRlbS1jb250YWluZXIge1xuICAgICAgICBmbGV4OiAxO1xuICAgICAgICBvdmVyZmxvdzogYXV0bztcbiAgICAgIH1cblxuICAgICAgLnRpdGxlIHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgIH1cbiAgICBgO1xuXG4gICAgdGhpcy5jb250YWluZXJFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnY29udGFpbmVyIHBvbW9kb3JvJyxcbiAgICB9KTtcblxuICAgIHRoaXMudGl0bGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnaDEnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0aXRsZScsXG4gICAgICBpbm5lclRleHQ6ICdUYXNrIExpc3QnLFxuICAgIH0pO1xuXG4gICAgdGhpcy50YXNrSXRlbUxpc3RDb250YWluZXJFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndGFzay1pdGVtLWNvbnRhaW5lcicsXG4gICAgfSk7XG5cbiAgICB0aGlzLnRhc2tJdGVtRm9ybUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCd0YXNrLWl0ZW0tZm9ybScsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Rhc2staXRlbS1mb3JtJyxcbiAgICB9KTtcblxuICAgIHRoaXMuc2hhZG93LmFwcGVuZCh0aGlzLnN0eWxlRWxlbWVudCwgdGhpcy5jb250YWluZXJFbGVtZW50KTtcbiAgICB0aGlzLmNvbnRhaW5lckVsZW1lbnQuYXBwZW5kKFxuICAgICAgdGhpcy50aXRsZUVsZW1lbnQsXG4gICAgICB0aGlzLnRhc2tJdGVtTGlzdENvbnRhaW5lckVsZW1lbnQsXG4gICAgICB0aGlzLnRhc2tJdGVtRm9ybUVsZW1lbnQsXG4gICAgKTtcblxuICAgIHN1YnNjcmliZSh7XG4gICAgICBbQUNUSU9OUy5jaGFuZ2VTZXNzaW9uXTogKHNlc3Npb25TdGF0ZSkgPT4ge1xuICAgICAgICBpZiAoc2Vzc2lvblN0YXRlLnNlc3Npb24gPT09ICdpbmFjdGl2ZScpIHtcbiAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsZW1lbnQuY2xhc3NOYW1lID0gJ2NvbnRhaW5lciBwb21vZG9ybyc7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbQUNUSU9OUy5jaGFuZ2VDdXJyZW50SW50ZXJ2YWxdOiAoc2Vzc2lvblN0YXRlKSA9PiB7XG4gICAgICAgIGlmIChzZXNzaW9uU3RhdGUuc2Vzc2lvbiA9PT0gJ2FjdGl2ZScpIHtcbiAgICAgICAgICBzd2l0Y2ggKHNlc3Npb25TdGF0ZS5jdXJyZW50SW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIGNhc2UgSU5URVJWQUxTLnBvbW9kb3JvOlxuICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsZW1lbnQuY2xhc3NOYW1lID0gJ2NvbnRhaW5lciBwb21vZG9ybyc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBJTlRFUlZBTFMuc2hvcnRCcmVhazpcbiAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbGVtZW50LmNsYXNzTmFtZSA9ICdjb250YWluZXIgc2hvcnQtYnJlYWsnO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgSU5URVJWQUxTLmxvbmdCcmVhazpcbiAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbGVtZW50LmNsYXNzTmFtZSA9ICdjb250YWluZXIgbG9uZy1icmVhayc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbGVtZW50LmNsYXNzTmFtZSA9ICdjb250YWluZXIgcG9tb2Rvcm8nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUYXNrTGlzdDtcbiIsIi8qKlxuICogQGZpbGUgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIHRpbWVyIGNvbXBvbmVudFxuICovXG5cbmltcG9ydCB7IHZhbGlkYXRlTnVtYmVyIH0gZnJvbSAnLi9oZWxwZXJzJztcblxuLyoqXG4gKiBWYWxpZGF0ZSBpZiBpbnB1dCBpcyBudW1iZXIsIGJldHdlZW4gMHMgYW5kIDM2MDBzICgxIGhyKVxuICogQHBhcmFtIHthbnl9IHZhbHVlIC0gdmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm4ge251bWJlciB8IG51bGx9IC0gdGltZSBpZiB2YWxpZCwgbnVsbCBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGNvbnN0IHZhbGlkYXRlVGltZSA9ICh2YWx1ZSkgPT4ge1xuICBjb25zdCB0aW1lID0gdmFsaWRhdGVOdW1iZXIodmFsdWUsIHRydWUpO1xuICBpZiAodGltZSA9PT0gbnVsbCB8fCB0aW1lIDwgMCB8fCB0aW1lID49IDYwICogNjApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gdGltZTtcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgaWYgaW5wdXQgaXMgbnVtYmVyIGFuZCBwb3NpdGl2ZVxuICogQHBhcmFtIHthbnl9IHZhbHVlIC0gdmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm4ge251bWJlciB8IG51bGx9IC0gcmFkaXVzIGlmIHZhbGlkLCBudWxsIG90aGVyd2lzZVxuICovXG5leHBvcnQgY29uc3QgdmFsaWRhdGVDb250YWluZXJSYWRpdXMgPSAodmFsdWUpID0+IHtcbiAgY29uc3QgY29udGFpbmVyUmFkaXVzID0gdmFsaWRhdGVOdW1iZXIodmFsdWUpO1xuICBpZiAoY29udGFpbmVyUmFkaXVzID09PSBudWxsIHx8IGNvbnRhaW5lclJhZGl1cyA8IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY29udGFpbmVyUmFkaXVzO1xufTtcbiIsIi8qKlxuICogQGZpbGUgcHJvZ3Jlc3MtcmluZyB3ZWIgY29tcG9uZW50XG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgZ2V0TWludXRlc0FuZFNlY29uZHMgfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCB7IHZhbGlkYXRlQ29udGFpbmVyUmFkaXVzLCB2YWxpZGF0ZVRpbWUgfSBmcm9tICcuLi91dGlscy90aW1lcic7XG5cbi8qKlxuICogQ3VzdG9tIHdlYiBjb21wb25lbnQgcmVwcmVzZW50aW5nIGEgdGltZXJcbiAqIEBleHRlbmRzIEhUTUxFbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gdGltZSAtIGN1cnJlbnQgcmVtYWluaW5nIHRpbWUgKGluIHNlY29uZHMpXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzIC0gcmFkaXVzIG9mIGNvbnRhaW5lciAocHJvZ3Jlc3MgcmluZylcbiAqL1xuY2xhc3MgVGltZXIgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiBbJ3RpbWUnLCAnY29udGFpbmVyLXJhZGl1cyddO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX3RpbWUgPSAwO1xuICAgIHRoaXMuX2NvbnRhaW5lclJhZGl1cyA9IDA7XG5cbiAgICB0aGlzLnN0eWxlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ3N0eWxlJywge1xuICAgICAgaW5uZXJUZXh0OiBgXG4gICAgICAgIC5jb250YWluZXIge1xuICAgICAgICAgIGZvbnQ6IGluaXRpYWwgJ0R1cnUtU2FucycsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgIH1cbiAgICAgIGAsXG4gICAgfSk7XG5cbiAgICB0aGlzLnNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgIHRoaXMudGltZXJDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICdjb250YWluZXInLFxuICAgIH0pO1xuXG4gICAgdGhpcy5zaGFkb3cuYXBwZW5kKHRoaXMuc3R5bGVFbGVtZW50LCB0aGlzLnRpbWVyQ29udGFpbmVyKTtcbiAgfVxuXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgJ3RpbWUnOiB7XG4gICAgICAgIGNvbnN0IHRpbWUgPSB2YWxpZGF0ZVRpbWUobmV3VmFsdWUpO1xuICAgICAgICBpZiAodGltZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICAgICAgdGhpcy50aW1lckNvbnRhaW5lci5pbm5lclRleHQgPSBnZXRNaW51dGVzQW5kU2Vjb25kcyh0aGlzLl90aW1lKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdjb250YWluZXItcmFkaXVzJzoge1xuICAgICAgICBjb25zdCBjb250YWluZXJSYWRpdXMgPSB2YWxpZGF0ZUNvbnRhaW5lclJhZGl1cyhuZXdWYWx1ZSk7XG4gICAgICAgIGlmIChjb250YWluZXJSYWRpdXMgPT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY29udGFpbmVyUmFkaXVzID0gY29udGFpbmVyUmFkaXVzO1xuICAgICAgICAvLyBzY2FsZSBmb250IHJlbGF0aXZlIHRvIHByb2dyZXNzIHJpbmcgcmFkaXVzXG4gICAgICAgIHRoaXMuc3R5bGVFbGVtZW50LmlubmVyVGV4dCA9IGBcbiAgICAgICAgICAgIC5jb250YWluZXIge1xuICAgICAgICAgICAgICBmb250OiAke3RoaXMuX2NvbnRhaW5lclJhZGl1cyAvIDJ9cHggJ0R1cnUtU2FucycsIHNhbnMtc2VyaWY7IFxuICAgICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBgO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9XG5cbiAgZ2V0IHRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWU7XG4gIH1cblxuICBzZXQgdGltZSh2YWx1ZSkge1xuICAgIGNvbnN0IHRpbWUgPSB2YWxpZGF0ZVRpbWUodmFsdWUpO1xuICAgIGlmICh0aW1lID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3RpbWUnLCB0aGlzLl90aW1lKTtcbiAgfVxuXG4gIGdldCBjb250YWluZXJSYWRpdXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lclJhZGl1cztcbiAgfVxuXG4gIHNldCBjb250YWluZXJSYWRpdXModmFsdWUpIHtcbiAgICBjb25zdCBjb250YWluZXJSYWRpdXMgPSB2YWxpZGF0ZUNvbnRhaW5lclJhZGl1cyh2YWx1ZSk7XG4gICAgaWYgKGNvbnRhaW5lclJhZGl1cyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2NvbnRhaW5lclJhZGl1cyA9IGNvbnRhaW5lclJhZGl1cztcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnY29udGFpbmVyLXJhZGl1cycsIHRoaXMuX2NvbnRhaW5lclJhZGl1cyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGltZXI7XG4iLCIvKipcbiAqIEBmaWxlIHV0aWxpdHkgZnVuY3Rpb25zIGZvciBwcm9ncmVzcyByaW5nIGNvbXBvbmVudFxuICovXG5cbmltcG9ydCB7IHZhbGlkYXRlTnVtYmVyIH0gZnJvbSAnLi9oZWxwZXJzJztcblxuLyoqXG4gKiBWYWxpZGF0ZSBpZiBpbnB1dCBpcyBudW1iZXIsIG5vbm5lZ2F0aXZlXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgLSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybiB7bnVtYmVyIHwgbnVsbH0gLSB0aW1lIGlmIHZhbGlkLCBudWxsIG90aGVyd2lzZVxuICovXG5leHBvcnQgY29uc3QgdmFsaWRhdGVMZW5ndGggPSAodmFsdWUpID0+IHtcbiAgY29uc3QgbGVuZ3RoID0gdmFsaWRhdGVOdW1iZXIodmFsdWUpO1xuICBpZiAobGVuZ3RoID09PSBudWxsIHx8IGxlbmd0aCA8IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gbGVuZ3RoO1xufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBpZiBpbnB1dCBpcyBudW1iZXIgYW5kIGJldHdlZW4gMCAtIDEwMFxuICogQHBhcmFtIHthbnl9IHZhbHVlIC0gdmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm4ge251bWJlciB8IG51bGx9IC0gcHJvZ3Jlc3MgaWYgdmFsaWQsIG51bGwgb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZVByb2dyZXNzID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IHByb2dyZXNzID0gdmFsaWRhdGVOdW1iZXIodmFsdWUpO1xuICBpZiAocHJvZ3Jlc3MgPT09IG51bGwgfHwgcHJvZ3Jlc3MgPCAwIHx8IHByb2dyZXNzID4gMTAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHByb2dyZXNzO1xufTtcbiIsIi8qKlxuICogQGZpbGUgcHJvZ3Jlc3MtcmluZyB3ZWIgY29tcG9uZW50XG4gKi9cblxuaW1wb3J0IHsgc3Vic2NyaWJlIH0gZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB7IEFDVElPTlMsIElOVEVSVkFMUyB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgeyB2YWxpZGF0ZUxlbmd0aCwgdmFsaWRhdGVQcm9ncmVzcyB9IGZyb20gJy4uL3V0aWxzL3Byb2dyZXNzUmluZyc7XG5cbi8qKlxuICogQ3VzdG9tIHdlYiBjb21wb25lbnQgcmVwcmVzZW50aW5nIGEgcHJvZ3Jlc3MgcmluZy5cbiAqIEBleHRlbmRzIEhUTUxFbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gc3Ryb2tlIC0gd2lkdGggb2YgY2lyY2xlIHN0cm9rZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyAtIHJhZGl1cyBvZiBjaXJjbGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBwcm9ncmVzcyAtIHByb2dyZXNzIG9mIHJpbmdcbiAqL1xuY2xhc3MgUHJvZ3Jlc3NSaW5nIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gWydyYWRpdXMnLCAnc3Ryb2tlJywgJ3Byb2dyZXNzJ107XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5yb290ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgdGhpcy5zdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gICAgY29uc3Qgc3ZnTmFtZXNwYWNlID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbiAgICB0aGlzLnN2Z0VsZW1lbnQgPSBjcmVhdGVFbGVtZW50KFxuICAgICAgJ3N2ZycsXG4gICAgICB7IGNsYXNzOiAnc3ZnJyB9LFxuICAgICAgeyBuYW1lc3BhY2U6IHN2Z05hbWVzcGFjZSB9LFxuICAgICk7XG5cbiAgICB0aGlzLm92ZXJsYXlDaXJjbGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudChcbiAgICAgICdjaXJjbGUnLFxuICAgICAgeyBjbGFzczogJ292ZXJsYXktY2lyY2xlIHBvbW9kb3JvJyB9LFxuICAgICAgeyBuYW1lc3BhY2U6IHN2Z05hbWVzcGFjZSB9LFxuICAgICk7XG4gICAgdGhpcy5iYXNlQ2lyY2xlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoXG4gICAgICAnY2lyY2xlJyxcbiAgICAgIHsgY2xhc3M6ICdiYXNlLWNpcmNsZScgfSxcbiAgICAgIHsgbmFtZXNwYWNlOiBzdmdOYW1lc3BhY2UgfSxcbiAgICApO1xuXG4gICAgdGhpcy5mb3JlaWduT2JqZWN0RWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZm9yZWlnbk9iamVjdCcsXG4gICAgICB7IGNsYXNzOiAnZm9yZWlnbi1vYmplY3QnIH0sXG4gICAgICB7IG5hbWVzcGFjZTogc3ZnTmFtZXNwYWNlIH0sXG4gICAgKTtcbiAgICB0aGlzLmZvcmVpZ25PYmplY3RDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzczogJ2ZvcmVpZ24tb2JqZWN0LWNvbnRhaW5lcicsXG4gICAgfSk7XG4gICAgdGhpcy50aW1lckNvbXBvbmVudCA9IGNyZWF0ZUVsZW1lbnQoJ3RpbWVyLWNvbXBvbmVudCcsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3RpbWVyJyxcbiAgICAgIHRpbWU6IDAsXG4gICAgfSk7XG4gICAgdGhpcy5jaXJjbGVDb21wb25lbnQgPSBjcmVhdGVFbGVtZW50KCdwb21vZG9yby1jaXJjbGVzJywge1xuICAgICAgY2xhc3NOYW1lOiAnY2lyY2xlcycsXG4gICAgICBjaXJjbGVDb3VudDogMCxcbiAgICB9KTtcblxuICAgIHRoaXMucm9vdC5hcHBlbmQodGhpcy5zdHlsZUVsZW1lbnQsIHRoaXMuc3ZnRWxlbWVudCk7XG4gICAgdGhpcy5zdmdFbGVtZW50LmFwcGVuZChcbiAgICAgIHRoaXMuYmFzZUNpcmNsZUVsZW1lbnQsXG4gICAgICB0aGlzLm92ZXJsYXlDaXJjbGVFbGVtZW50LFxuICAgICAgdGhpcy5mb3JlaWduT2JqZWN0RWxlbWVudCxcbiAgICApO1xuICAgIHRoaXMuZm9yZWlnbk9iamVjdEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5mb3JlaWduT2JqZWN0Q29udGFpbmVyKTtcbiAgICB0aGlzLmZvcmVpZ25PYmplY3RDb250YWluZXIuYXBwZW5kKFxuICAgICAgdGhpcy50aW1lckNvbXBvbmVudCxcbiAgICAgIHRoaXMuY2lyY2xlQ29tcG9uZW50LFxuICAgICk7XG5cbiAgICB0aGlzLl9yYWRpdXMgPSAwO1xuICAgIHRoaXMuX3N0cm9rZSA9IDA7XG4gICAgdGhpcy5fcHJvZ3Jlc3MgPSAwO1xuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KHRoaXMuX3JhZGl1cywgdGhpcy5fc3Ryb2tlLCB0aGlzLl9wcm9ncmVzcyk7XG4gIH1cblxuICAvKiogVXBkYXRlcyBjb21wb25lbnQgdmlldyAqL1xuICB1cGRhdGVDb21wb25lbnQocmFkaXVzLCBzdHJva2UsIHByb2dyZXNzKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZFJhZGl1cyA9IHJhZGl1cyAtIHN0cm9rZSAqIDI7XG4gICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IG5vcm1hbGl6ZWRSYWRpdXMgKiAyICogTWF0aC5QSTtcblxuICAgIHRoaXMuc3R5bGVFbGVtZW50LmlubmVyVGV4dCA9IGBcbiAgICAgIC5zdmcge1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICB3aWR0aDogJHsyICogcmFkaXVzfXB4O1xuICAgICAgICBoZWlnaHQ6ICR7MiAqIHJhZGl1c31weDtcbiAgICAgIH1cblxuICAgICAgLmJhc2UtY2lyY2xlIHtcbiAgICAgICAgc3Ryb2tlOiAjZmZmO1xuICAgICAgICBzdHJva2UtZGFzaGFycmF5OiAke2NpcmN1bWZlcmVuY2V9ICR7Y2lyY3VtZmVyZW5jZX07XG4gICAgICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwO1xuICAgICAgICBzdHJva2Utd2lkdGg6ICR7c3Ryb2tlfTtcbiAgICAgICAgZmlsbDogdHJhbnNwYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIC5vdmVybGF5LWNpcmNsZSB7XG4gICAgICAgIHN0cm9rZS1kYXNoYXJyYXk6ICR7Y2lyY3VtZmVyZW5jZX0gJHtjaXJjdW1mZXJlbmNlfTtcbiAgICAgICAgc3Ryb2tlLWRhc2hvZmZzZXQ6ICR7KDEgLSBwcm9ncmVzcyAvIDEwMCkgKiBjaXJjdW1mZXJlbmNlfTtcbiAgICAgICAgc3Ryb2tlLXdpZHRoOiAke3N0cm9rZX07XG4gICAgICAgIGZpbGw6IHRyYW5zcGFyZW50O1xuXG4gICAgICAgIHRyYW5zaXRpb246IHN0cm9rZS1kYXNob2Zmc2V0IDAuNXM7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC05MGRlZyk7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDUwJSA1MCU7XG4gICAgICB9XG5cbiAgICAgIC5vdmVybGF5LWNpcmNsZS5wb21vZG9ybyB7XG4gICAgICAgIHN0cm9rZTogIzAwOTViMztcbiAgICAgIH1cblxuICAgICAgLm92ZXJsYXktY2lyY2xlLnNob3J0LWJyZWFrIHtcbiAgICAgICAgc3Ryb2tlOiAjNGFiNzE3O1xuICAgICAgfVxuXG4gICAgICAub3ZlcmxheS1jaXJjbGUubG9uZy1icmVhayB7XG4gICAgICAgIHN0cm9rZTogI2Y4NzMzNTtcbiAgICAgIH1cblxuICAgICAgLmZvcmVpZ24tb2JqZWN0IHtcbiAgICAgIH1cblxuICAgICAgLmZvcmVpZ24tb2JqZWN0LWNvbnRhaW5lciB7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICB9XG4gICAgYDtcblxuICAgIHRoaXMuZm9yZWlnbk9iamVjdEVsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIDIgKiByYWRpdXMpO1xuICAgIHRoaXMuZm9yZWlnbk9iamVjdEVsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAyICogcmFkaXVzKTtcbiAgICB0aGlzLm92ZXJsYXlDaXJjbGVFbGVtZW50LnNldEF0dHJpYnV0ZSgncicsIG5vcm1hbGl6ZWRSYWRpdXMpO1xuICAgIHRoaXMub3ZlcmxheUNpcmNsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdjeCcsIHJhZGl1cyk7XG4gICAgdGhpcy5vdmVybGF5Q2lyY2xlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2N5JywgcmFkaXVzKTtcblxuICAgIHRoaXMuYmFzZUNpcmNsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdyJywgbm9ybWFsaXplZFJhZGl1cyk7XG4gICAgdGhpcy5iYXNlQ2lyY2xlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2N4JywgcmFkaXVzKTtcbiAgICB0aGlzLmJhc2VDaXJjbGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnY3knLCByYWRpdXMpO1xuXG4gICAgdGhpcy50aW1lckNvbXBvbmVudC5jb250YWluZXJSYWRpdXMgPSByYWRpdXM7XG5cbiAgICBzdWJzY3JpYmUoe1xuICAgICAgW0FDVElPTlMuY2hhbmdlU2Vzc2lvbl06IChzZXNzaW9uU3RhdGUpID0+IHtcbiAgICAgICAgaWYgKHNlc3Npb25TdGF0ZS5zZXNzaW9uID09PSAnaW5hY3RpdmUnKSB7XG4gICAgICAgICAgdGhpcy5vdmVybGF5Q2lyY2xlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAnY2xhc3MnLFxuICAgICAgICAgICAgJ292ZXJsYXktY2lyY2xlIHBvbW9kb3JvJyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW0FDVElPTlMuY2hhbmdlQ3VycmVudEludGVydmFsXTogKHNlc3Npb25TdGF0ZSkgPT4ge1xuICAgICAgICBpZiAoc2Vzc2lvblN0YXRlLnNlc3Npb24gPT09ICdhY3RpdmUnKSB7XG4gICAgICAgICAgc3dpdGNoIChzZXNzaW9uU3RhdGUuY3VycmVudEludGVydmFsKSB7XG4gICAgICAgICAgICBjYXNlIElOVEVSVkFMUy5wb21vZG9ybzpcbiAgICAgICAgICAgICAgdGhpcy5vdmVybGF5Q2lyY2xlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgJ2NsYXNzJyxcbiAgICAgICAgICAgICAgICAnb3ZlcmxheS1jaXJjbGUgcG9tb2Rvcm8nLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgSU5URVJWQUxTLnNob3J0QnJlYWs6XG4gICAgICAgICAgICAgIHRoaXMub3ZlcmxheUNpcmNsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICdjbGFzcycsXG4gICAgICAgICAgICAgICAgJ292ZXJsYXktY2lyY2xlIHNob3J0LWJyZWFrJyxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIElOVEVSVkFMUy5sb25nQnJlYWs6XG4gICAgICAgICAgICAgIHRoaXMub3ZlcmxheUNpcmNsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICdjbGFzcycsXG4gICAgICAgICAgICAgICAgJ292ZXJsYXktY2lyY2xlIGxvbmctYnJlYWsnLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHRoaXMub3ZlcmxheUNpcmNsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICdjbGFzcycsXG4gICAgICAgICAgICAgICAgJ292ZXJsYXktY2lyY2xlIHBvbW9kb3JvJyxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICBjYXNlICdyYWRpdXMnOiB7XG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IHZhbGlkYXRlTGVuZ3RoKG5ld1ZhbHVlKTtcbiAgICAgICAgaWYgKHJhZGl1cyA9PT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yYWRpdXMgPSByYWRpdXM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnc3Ryb2tlJzoge1xuICAgICAgICBjb25zdCBzdHJva2UgPSB2YWxpZGF0ZUxlbmd0aChuZXdWYWx1ZSk7XG4gICAgICAgIGlmIChzdHJva2UgPT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3Ryb2tlID0gc3Ryb2tlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3Byb2dyZXNzJzoge1xuICAgICAgICBjb25zdCBwcm9ncmVzcyA9IHZhbGlkYXRlUHJvZ3Jlc3MobmV3VmFsdWUpO1xuICAgICAgICBpZiAocHJvZ3Jlc3MgPT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3MgPSBwcm9ncmVzcztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KHRoaXMuX3JhZGl1cywgdGhpcy5fc3Ryb2tlLCB0aGlzLl9wcm9ncmVzcyk7XG4gIH1cblxuICBnZXQgcmFkaXVzKCkge1xuICAgIHJldHVybiB0aGlzLl9yYWRpdXM7XG4gIH1cblxuICBzZXQgcmFkaXVzKHZhbHVlKSB7XG4gICAgY29uc3QgcmFkaXVzID0gdmFsaWRhdGVMZW5ndGgodmFsdWUpO1xuICAgIGlmIChyYWRpdXMgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9yYWRpdXMgPSByYWRpdXM7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3JhZGl1cycsIHRoaXMuX3JhZGl1cyk7XG4gIH1cblxuICBnZXQgc3Ryb2tlKCkge1xuICAgIHJldHVybiB0aGlzLl9zdHJva2U7XG4gIH1cblxuICBzZXQgc3Ryb2tlKHZhbHVlKSB7XG4gICAgY29uc3Qgc3Ryb2tlID0gdmFsaWRhdGVMZW5ndGgodmFsdWUpO1xuICAgIGlmIChzdHJva2UgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9zdHJva2UgPSBzdHJva2U7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIHRoaXMuX3N0cm9rZSk7XG4gIH1cblxuICBnZXQgcHJvZ3Jlc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb2dyZXNzO1xuICB9XG5cbiAgc2V0IHByb2dyZXNzKHZhbHVlKSB7XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSB2YWxpZGF0ZVByb2dyZXNzKHZhbHVlKTtcbiAgICBpZiAocHJvZ3Jlc3MgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9wcm9ncmVzcyA9IHByb2dyZXNzO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdwcm9ncmVzcycsIHRoaXMuX3Byb2dyZXNzKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzc1Jpbmc7XG4iLCJpbXBvcnQgYXJyYXlXaXRob3V0SG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRob3V0SG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiLi9ub25JdGVyYWJsZVNwcmVhZC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufSIsImltcG9ydCB7IHZhbGlkYXRlTnVtYmVyIH0gZnJvbSAnLi9oZWxwZXJzJztcblxuLyoqXG4gKiBWYWxpZGF0ZSBpZiBpbnB1dCBpcyB2YWxpZCBjaXJjbGUgY291bnQgKGlzIE51bWJlciBhbmQgaW4gcmFuZ2UpXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgLSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybiB7bnVtYmVyIHwgbnVsbH0gLSBjaXJjbGUgY291bnQgaWYgdmFsaWQsIG90aGVyd2lzZSBudWxsXG4gKi9cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUNpcmNsZUNvdW50ID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IGNpcmNsZUNvdW50ID0gdmFsaWRhdGVOdW1iZXIodmFsdWUsIHRydWUpO1xuICBpZiAoY2lyY2xlQ291bnQgPT09IG51bGwgfHwgY2lyY2xlQ291bnQgPCAwIHx8IGNpcmNsZUNvdW50ID4gNCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjaXJjbGVDb3VudDtcbn07XG4iLCIvKipcbiAqIEBmaWxlIHBvbW9kb3JvLWNpcmNsZXMgd2ViIGNvbXBvbmVudFxuICovXG5cbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCB7IHZhbGlkYXRlQ2lyY2xlQ291bnQgfSBmcm9tICcuLi91dGlscy9wb21vZG9yb0NpcmNsZXMnO1xuXG4vKipcbiAqIEN1c3RvbSB3ZWIgY29tcG9uZW50IHJlcHJlc2VudGluZyBwb21vZG9ybyBjaXJjbGVzLlxuICogQGV4dGVuZHMgSFRNTEVsZW1lbnRcbiAqL1xuY2xhc3MgUG9tb2Rvcm9DaXJjbGVzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gWydjaXJjbGUtY291bnQnXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9jaXJjbGVDb3VudCA9IDA7XG4gICAgdGhpcy5zdHlsZUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdzdHlsZScsIHtcbiAgICAgIGlubmVyVGV4dDogYFxuICAgICAgLmNpcmNsZS1jb250YWluZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgfVxuICAgICAgXG4gICAgICAuY2lyY2xlIHtcbiAgICAgICAgaGVpZ2h0OiAxNXB4O1xuICAgICAgICB3aWR0aDogMTVweDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgbWFyZ2luOiAxNXB4IDdweCAwcHg7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIH1cblxuICAgICAgLmNpcmNsZS5hY3RpdmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgICAgfVxuICAgICAgYCxcbiAgICB9KTtcblxuICAgIHRoaXMuc2hhZG93ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgLy8gYWRkIGh0bWwgZWxlbWVudHMgYW5kIHN0eWxpbmdcbiAgICB0aGlzLmNvdW50ZXJDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICdjaXJjbGUtY29udGFpbmVyJyxcbiAgICB9KTtcbiAgICB0aGlzLmNpcmNsZXMgPSBuZXcgQXJyYXkoNClcbiAgICAgIC5maWxsKG51bGwpXG4gICAgICAubWFwKCgpID0+IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnY2lyY2xlJyB9KSk7XG5cbiAgICB0aGlzLmNvdW50ZXJDb250YWluZXIuYXBwZW5kKC4uLnRoaXMuY2lyY2xlcyk7XG4gICAgdGhpcy5zaGFkb3cuYXBwZW5kKHRoaXMuc3R5bGVFbGVtZW50LCB0aGlzLmNvdW50ZXJDb250YWluZXIpO1xuICB9XG5cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgIGlmIChuYW1lID09PSAnY2lyY2xlLWNvdW50Jykge1xuICAgICAgY29uc3QgY2lyY2xlQ291bnQgPSB2YWxpZGF0ZUNpcmNsZUNvdW50KG5ld1ZhbHVlKTtcbiAgICAgIGlmIChjaXJjbGVDb3VudCA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2lyY2xlQ291bnQgPSBjaXJjbGVDb3VudDtcblxuICAgICAgdGhpcy5jaXJjbGVzLmZvckVhY2goKGNpcmNsZSwgaSkgPT4ge1xuICAgICAgICBpZiAoaSA8IGNpcmNsZUNvdW50KSB7XG4gICAgICAgICAgY2lyY2xlLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNpcmNsZS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGNpcmNsZUNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLl9jaXJjbGVDb3VudDtcbiAgfVxuXG4gIHNldCBjaXJjbGVDb3VudCh2YWx1ZSkge1xuICAgIGNvbnN0IGNpcmNsZUNvdW50ID0gdmFsaWRhdGVDaXJjbGVDb3VudCh2YWx1ZSk7XG4gICAgaWYgKGNpcmNsZUNvdW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fY2lyY2xlQ291bnQgPSBjaXJjbGVDb3VudDtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnY2lyY2xlLWNvdW50JywgdGhpcy5fY2lyY2xlQ291bnQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvbW9kb3JvQ2lyY2xlcztcbiIsIi8qKlxuICogQGZpbGUgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIHNldHRpbmdzIHBvcHVwIGNvbXBvbmVudFxuICovXG5cbmltcG9ydCB7XG4gIERFRkFVTFRfTE9OR19CUkVBS19MRU5HVEgsXG4gIERFRkFVTFRfU0hPUlRfQlJFQUtfTEVOR1RILFxuICBLRVlTLFxuICBUSU1FUl9BVURJT1MsXG59IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IHZhbGlkYXRlTnVtYmVyLCB2YWxpZGF0ZVN0cmluZyB9IGZyb20gJy4vaGVscGVycyc7XG5cbi8qKlxuICogVmFsaWRhdGUgaWYgaW5wdXQgaXMgbnVtYmVyLCBiZXR3ZWVuIDMgLSA1XG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgLSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybiB7bnVtYmVyIHwgbnVsbH0gLSBzaG9ydCBicmVhayBsZW5ndGggaWYgdmFsaWQsIG51bGwgb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZVNob3J0QnJlYWtMZW5ndGggPSAodmFsdWUpID0+IHtcbiAgY29uc3Qgc2hvcnRCcmVha0xlbmd0aCA9IHZhbGlkYXRlTnVtYmVyKHZhbHVlLCB0cnVlKTtcbiAgaWYgKFxuICAgIHNob3J0QnJlYWtMZW5ndGggPT09IG51bGwgfHxcbiAgICBzaG9ydEJyZWFrTGVuZ3RoIDwgMyB8fFxuICAgIHNob3J0QnJlYWtMZW5ndGggPiA1XG4gICkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBzaG9ydEJyZWFrTGVuZ3RoO1xufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBpZiBpbnB1dCBpcyBudW1iZXIsIGJldHdlZW4gMTUgLSAzMFxuICogQHBhcmFtIHthbnl9IHZhbHVlIC0gdmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm4ge251bWJlciB8IG51bGx9IC0gbG9uZyBicmVhayBsZW5ndGggaWYgdmFsaWQsIG51bGwgb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUxvbmdCcmVha0xlbmd0aCA9ICh2YWx1ZSkgPT4ge1xuICBjb25zdCBsb25nQnJlYWtMZW5ndGggPSB2YWxpZGF0ZU51bWJlcih2YWx1ZSwgdHJ1ZSk7XG4gIGlmIChcbiAgICBsb25nQnJlYWtMZW5ndGggPT09IG51bGwgfHxcbiAgICBsb25nQnJlYWtMZW5ndGggPCAxNSB8fFxuICAgIGxvbmdCcmVha0xlbmd0aCA+IDMwXG4gICkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBsb25nQnJlYWtMZW5ndGg7XG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGlmIGlucHV0IGlzIHZhbGlkIGF1ZGlvIGZpbGUgcGF0aFxuICogQHBhcmFtIHthbnl9IHZhbHVlIC0gdmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm4ge3N0cmluZyB8IG51bGx9IC0gcGF0aCBpZiB2YWxpZCwgbnVsbCBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGNvbnN0IHZhbGlkYXRlVGltZXJBdWRpbyA9ICh2YWx1ZSkgPT4ge1xuICBjb25zdCB0aW1lckF1ZGlvID0gdmFsaWRhdGVTdHJpbmcodmFsdWUpO1xuICBpZiAoXG4gICAgdGltZXJBdWRpbyA9PT0gbnVsbCB8fFxuICAgICFPYmplY3QudmFsdWVzKFRJTUVSX0FVRElPUykuaW5jbHVkZXModGltZXJBdWRpbylcbiAgKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHRpbWVyQXVkaW87XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgaW50ZXJ2YWwgbGVuZ3RocywgcmV0cmlldmUgZnJvbSBsb2NhbFN0b3JhZ2UgaWYgcG9zc2libGVcbiAqIEByZXR1cm4ge3tzaG9ydEJyZWFrTGVuZ3RoOiBudW1iZXIsIGxvbmdCcmVha0xlbmd0aDogbnVtYmVyfX0gLSBsZW5ndGhzIG9mIGludGVydmFsc1xuICovXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUludGVydmFsTGVuZ3RocyA9ICgpID0+IHtcbiAgbGV0IHNob3J0QnJlYWtMZW5ndGg7XG4gIGxldCBsb25nQnJlYWtMZW5ndGg7XG4gIHRyeSB7XG4gICAgc2hvcnRCcmVha0xlbmd0aCA9IEpTT04ucGFyc2UoXG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oS0VZUy5zaG9ydEJyZWFrTGVuZ3RoKSxcbiAgICApO1xuICAgIGxvbmdCcmVha0xlbmd0aCA9IEpTT04ucGFyc2UoXG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oS0VZUy5sb25nQnJlYWtMZW5ndGgpLFxuICAgICk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgc2hvcnRCcmVha0xlbmd0aCA9IG51bGw7XG4gICAgbG9uZ0JyZWFrTGVuZ3RoID0gbnVsbDtcbiAgfVxuICBpZiAoXG4gICAgIXNob3J0QnJlYWtMZW5ndGggfHxcbiAgICB2YWxpZGF0ZVNob3J0QnJlYWtMZW5ndGgoc2hvcnRCcmVha0xlbmd0aCkgPT09IG51bGxcbiAgKSB7XG4gICAgc2hvcnRCcmVha0xlbmd0aCA9IERFRkFVTFRfU0hPUlRfQlJFQUtfTEVOR1RIO1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShLRVlTLnNob3J0QnJlYWtMZW5ndGgsIHNob3J0QnJlYWtMZW5ndGgpO1xuICB9XG4gIGlmICghbG9uZ0JyZWFrTGVuZ3RoIHx8IHZhbGlkYXRlTG9uZ0JyZWFrTGVuZ3RoKGxvbmdCcmVha0xlbmd0aCkgPT09IG51bGwpIHtcbiAgICBsb25nQnJlYWtMZW5ndGggPSBERUZBVUxUX0xPTkdfQlJFQUtfTEVOR1RIO1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShLRVlTLmxvbmdCcmVha0xlbmd0aCwgbG9uZ0JyZWFrTGVuZ3RoKTtcbiAgfVxuICByZXR1cm4geyBzaG9ydEJyZWFrTGVuZ3RoLCBsb25nQnJlYWtMZW5ndGggfTtcbn07XG4iLCIvKipcbiAqIEBmaWxlIHNldHRpbmdzIHdlYiBjb21wb25lbnRcbiAqL1xuXG5pbXBvcnQgeyBUSU1FUl9BVURJT1MgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHtcbiAgdmFsaWRhdGVTaG9ydEJyZWFrTGVuZ3RoLFxuICB2YWxpZGF0ZUxvbmdCcmVha0xlbmd0aCxcbiAgdmFsaWRhdGVUaW1lckF1ZGlvLFxufSBmcm9tICcuLi91dGlscy9zZXR0aW5ncyc7XG5cbmNvbnN0IHRpbWVyQXVkaW9EZXNjcmlwdGlvbnMgPSB7XG4gIGNhbG06ICdDYWxtIEFsYXJtJyxcbiAgYW5ub3lpbmc6ICdPcmlnaW5hbCBBbGFybScsXG4gIGthbnllOiAnS2FueWUgVGVsbGluZyBZb3UgdG8gU3RvcCcsXG59O1xuXG4vKipcbiAqIEN1c3RvbSB3ZWIgY29tcG9uZW50IHJlcHJlc2VudGluZyB0aGUgc2V0dGluZ3MgcG9wdXBcbiAqIEBleHRlbmRzIEhUTUxFbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gc2hvcnRCcmVha0xlbmd0aCAtIHNob3J0IGJyZWFrIHRpbWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb25nQnJlYWtMZW5ndGggLSBsb25nIGJyZWFrIHRpbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aW1lckF1ZGlvIC0gcGF0aHdheSB0byBzb3VuZCBmaWxlXG4gKi9cbmNsYXNzIFNldHRpbmdzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gWydzaG9ydC1icmVhay1sZW5ndGgnLCAnbG9uZy1icmVhay1sZW5ndGgnLCAndGltZXItYXVkaW8nXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9zaG9ydEJyZWFrTGVuZ3RoID0gMDtcbiAgICB0aGlzLl9sb25nQnJlYWtMZW5ndGggPSAwO1xuICAgIHRoaXMuX3RpbWVyQXVkaW8gPSAnJztcblxuICAgIHRoaXMuc3R5bGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnc3R5bGUnLCB7XG4gICAgICBpbm5lclRleHQ6IGBcbiAgICAgICAgICAucG9wdXAtY29udGFpbmVyIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgICAgIHotaW5kZXg6IDU7XG4gICAgICAgICAgICB0b3A6IDUwJTtcbiAgICAgICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpIHNjYWxlKDApO1xuICAgICAgICAgICAgd2lkdGg6IDY1JTtcbiAgICAgICAgICAgIG1pbi13aWR0aDogMzYwcHg7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAxLjVyZW0gM3JlbTtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IDIwMG1zIGVhc2UtaW4tb3V0O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICAgICAgICBmb250OiAxLjFyZW0gJ1NvdXJjZSBTYW5zIFBybycsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgICBjb2xvcjogIzJiMmIyYjtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLnBvcHVwLWNvbnRhaW5lci5hY3RpdmUge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSkgc2NhbGUoMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC5wb3B1cC10aXRsZSB7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICBmb250OiAycmVtICdMYXRvJywgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgIGNvbG9yOiAjNzU3NTc1O1xuICAgICAgICAgICAgb3BhY2l0eTogMC45O1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAucG9wdXAtdGl0bGUtaHIge1xuICAgICAgICAgICAgbWFyZ2luOiAwIDAgMXJlbSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5mb3JtLWlucHV0cy1jb250YWluZXIge1xuICAgICAgICAgICAgbWFyZ2luOiAwIDAgMnJlbSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAuZm9ybS1pbnB1dC1jb250YWluZXIge1xuICAgICAgICAgICAgbWFyZ2luOiAxcmVtIDAgMCAwO1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC5mb3JtLWlucHV0LWxhYmVsIHtcbiAgICAgICAgICAgIHdpZHRoOiAxMmNoO1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5mb3JtLWlucHV0IHtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIHdpZHRoOiA0LjVjaDtcbiAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMXJlbTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDAuM2VtIDAuNWVtO1xuICAgICAgICAgICAgZm9udDogMS4xcmVtICdTb3VyY2UgU2FucyBQcm8nLCBzYW5zLXNlcmlmO1xuICAgICAgICAgICAgY29sb3I6ICMyYjJiMmI7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZWVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAjdGltZXItYXVkaW8taW5wdXQge1xuICAgICAgICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAgICAgICAgICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xuICAgICAgICAgICAgYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgICAgICAgIHdpZHRoOiAzMGNoO1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKGFzc2V0cy9zb3VuZC5wbmcpIDk2JSAvIDEwJSBuby1yZXBlYXQgI2VlZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLmJyZWFrLWlucHV0LWJvdW5kcyB7XG4gICAgICAgICAgICBjb2xvcjogIzgwODA4MDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuZXJyb3ItbWVzc2FnZSB7XG4gICAgICAgICAgICBtYXJnaW46IDA7IFxuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC5zYXZlLWJ1dHRvbiB7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICB3aWR0aDogNzUlO1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xuICAgICAgICAgICAgbWFyZ2luOiAwIGF1dG8gMC41cmVtIGF1dG87XG4gICAgICAgICAgICBwYWRkaW5nOiAwLjVlbTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNiMGIwYjA7XG4gICAgICAgICAgICBmb250OiAxLjFyZW0gJ0R1cnUgU2FucycsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBjb2xvcjogIzJiMmIyYjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuc2F2ZS1idXR0b246aG92ZXIge1xuICAgICAgICAgICAgb3BhY2l0eTogMC45O1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAjb3ZlcmxheSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgICAgICB6LWluZGV4OiA0O1xuICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgd2lkdGg6IDEwMHZ3O1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IDIwMG1zIGVhc2UtaW4tb3V0O1xuICAgICAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAjb3ZlcmxheS5hY3RpdmUge1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgICAgICAgICB9XG4gICAgICAgIGAsXG4gICAgfSk7XG5cbiAgICAvLyBPcGVuaW5nIFNoYWRvdyBET01cbiAgICB0aGlzLnNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuXG4gICAgLy8gY29udGFpbmVyIGVsZW1lbnRzXG4gICAgdGhpcy5wb3B1cENvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3BvcHVwLWNvbnRhaW5lcicsXG4gICAgfSk7XG4gICAgdGhpcy5mb3JtSW5wdXRzQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnZm9ybS1pbnB1dHMtY29udGFpbmVyJyxcbiAgICB9KTtcblxuICAgIC8vIHRpdGxlIGVsZW1lbnRcbiAgICB0aGlzLnBvcHVwVGl0bGUgPSBjcmVhdGVFbGVtZW50KCdoMScsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3BvcHVwLXRpdGxlJyxcbiAgICAgIGlubmVyVGV4dDogJ1NFVFRJTkdTJyxcbiAgICB9KTtcbiAgICB0aGlzLnBvcHVwVGl0bGVIciA9IGNyZWF0ZUVsZW1lbnQoJ2hyJywge1xuICAgICAgY2xhc3NOYW1lOiAncG9wdXAtdGl0bGUtaHInLFxuICAgIH0pO1xuXG4gICAgLy8gc2hvcnQgYnJlYWsgZm9ybVxuICAgIHRoaXMuc2hvcnRCcmVha0NvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2Zvcm0taW5wdXQtY29udGFpbmVyJyxcbiAgICB9KTtcbiAgICB0aGlzLnNob3J0QnJlYWtMYWJlbCA9IGNyZWF0ZUVsZW1lbnQoJ2xhYmVsJywge1xuICAgICAgaW5uZXJUZXh0OiAnU2hvcnQgQnJlYWs6ICcsXG4gICAgICBmb3I6ICdzaG9ydC1icmVhay1pbnB1dCcsXG4gICAgICBjbGFzc05hbWU6ICdmb3JtLWlucHV0LWxhYmVsJyxcbiAgICB9KTtcbiAgICB0aGlzLnNob3J0QnJlYWtJbnB1dCA9IGNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xuICAgICAgaWQ6ICdzaG9ydC1icmVhay1pbnB1dCcsXG4gICAgICBjbGFzc05hbWU6ICdmb3JtLWlucHV0JyxcbiAgICAgIG5hbWU6ICdzaG9ydC1icmVhay1pbnB1dCcsXG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIG1pbjogJzMnLFxuICAgICAgbWF4OiAnNScsXG4gICAgICB2YWx1ZTogdGhpcy5fc2hvcnRCcmVha0xlbmd0aCxcbiAgICB9KTtcbiAgICB0aGlzLnNob3J0QnJlYWtCb3VuZHMgPSBjcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgY2xhc3NOYW1lOiAnYnJlYWstaW5wdXQtYm91bmRzJyxcbiAgICAgIGlubmVyVGV4dDogJzMgLSA1IG1pbnV0ZXMnLFxuICAgIH0pO1xuICAgIHRoaXMuc2hvcnRCcmVha0Vycm9yID0gY3JlYXRlRWxlbWVudCgncCcsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2Vycm9yLW1lc3NhZ2UnLFxuICAgICAgaW5uZXJUZXh0OiAnUGxlYXNlIGVudGVyIGEgdmFsaWQgc2hvcnQgYnJlYWsgbGVuZ3RoLicsXG4gICAgfSk7XG5cbiAgICAvLyBsb25nIGJyZWFrIGZvcm1cbiAgICB0aGlzLmxvbmdCcmVha0NvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2Zvcm0taW5wdXQtY29udGFpbmVyJyxcbiAgICB9KTtcbiAgICB0aGlzLmxvbmdCcmVha0xhYmVsID0gY3JlYXRlRWxlbWVudCgnbGFiZWwnLCB7XG4gICAgICBpbm5lclRleHQ6ICdMb25nIEJyZWFrOiAnLFxuICAgICAgZm9yOiAnbG9uZy1icmVhay1pbnB1dCcsXG4gICAgICBjbGFzc05hbWU6ICdmb3JtLWlucHV0LWxhYmVsJyxcbiAgICB9KTtcbiAgICB0aGlzLmxvbmdCcmVha0lucHV0ID0gY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICBpZDogJ2xvbmctYnJlYWstaW5wdXQnLFxuICAgICAgY2xhc3NOYW1lOiAnZm9ybS1pbnB1dCcsXG4gICAgICBuYW1lOiAnbG9uZy1icmVhay1pbnB1dCcsXG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIG1pbjogJzE1JyxcbiAgICAgIG1heDogJzMwJyxcbiAgICAgIHZhbHVlOiB0aGlzLl9sb25nQnJlYWtMZW5ndGgsXG4gICAgfSk7XG4gICAgdGhpcy5sb25nQnJlYWtCb3VuZHMgPSBjcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgY2xhc3NOYW1lOiAnYnJlYWstaW5wdXQtYm91bmRzJyxcbiAgICAgIGlubmVyVGV4dDogJzE1IC0gMzAgbWludXRlcycsXG4gICAgfSk7XG4gICAgdGhpcy5sb25nQnJlYWtFcnJvciA9IGNyZWF0ZUVsZW1lbnQoJ3AnLCB7XG4gICAgICBjbGFzc05hbWU6ICdlcnJvci1tZXNzYWdlJyxcbiAgICAgIGlubmVyVGV4dDogJ1BsZWFzZSBlbnRlciBhIHZhbGlkIGxvbmcgYnJlYWsgbGVuZ3RoLicsXG4gICAgfSk7XG5cbiAgICAvLyB0aW1lciBhdWRpbyBmb3JtXG4gICAgdGhpcy50aW1lckF1ZGlvQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnZm9ybS1pbnB1dC1jb250YWluZXInLFxuICAgIH0pO1xuICAgIHRoaXMudGltZXJBdWRpb0xhYmVsID0gY3JlYXRlRWxlbWVudCgnbGFiZWwnLCB7XG4gICAgICBmb3I6ICd0aW1lci1hdWRpby1pbnB1dCcsXG4gICAgICBpbm5lclRleHQ6ICdTb3VuZDogJyxcbiAgICAgIGNsYXNzTmFtZTogJ2Zvcm0taW5wdXQtbGFiZWwnLFxuICAgIH0pO1xuICAgIHRoaXMudGltZXJBdWRpb0lucHV0ID0gY3JlYXRlRWxlbWVudCgnc2VsZWN0Jywge1xuICAgICAgaWQ6ICd0aW1lci1hdWRpby1pbnB1dCcsXG4gICAgICBjbGFzc05hbWU6ICdmb3JtLWlucHV0JyxcbiAgICAgIG5hbWU6ICdzb3VuZCcsXG4gICAgfSk7XG4gICAgdGhpcy50aW1lckF1ZGlvT3B0aW9ucyA9IE9iamVjdC5lbnRyaWVzKFRJTUVSX0FVRElPUykubWFwKChbbmFtZSwgcGF0aF0pID0+XG4gICAgICBjcmVhdGVFbGVtZW50KCdvcHRpb24nLCB7XG4gICAgICAgIHZhbHVlOiBwYXRoLFxuICAgICAgICBpbm5lclRleHQ6IHRpbWVyQXVkaW9EZXNjcmlwdGlvbnNbbmFtZV0sXG4gICAgICB9KSxcbiAgICApO1xuXG4gICAgLy8gc2F2ZSBidXR0b25cbiAgICB0aGlzLnNhdmVCdXR0b24gPSBjcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XG4gICAgICBpbm5lclRleHQ6ICdTQVZFJyxcbiAgICAgIGNsYXNzTmFtZTogJ3NhdmUtYnV0dG9uJyxcbiAgICAgIG9ubW91c2Vkb3duOiAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpLFxuICAgIH0pO1xuXG4gICAgLy8gcG9wdXAgb3ZlcmxheVxuICAgIHRoaXMub3ZlcmxheUVsID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgaWQ6ICdvdmVybGF5JyxcbiAgICB9KTtcblxuICAgIHRoaXMuc2hhZG93LmFwcGVuZCh0aGlzLnN0eWxlRWxlbWVudCwgdGhpcy5wb3B1cENvbnRhaW5lciwgdGhpcy5vdmVybGF5RWwpO1xuICAgIHRoaXMucG9wdXBDb250YWluZXIuYXBwZW5kKFxuICAgICAgdGhpcy5wb3B1cFRpdGxlLFxuICAgICAgdGhpcy5wb3B1cFRpdGxlSHIsXG4gICAgICB0aGlzLmZvcm1JbnB1dHNDb250YWluZXIsXG4gICAgICB0aGlzLnNhdmVCdXR0b24sXG4gICAgKTtcbiAgICB0aGlzLmZvcm1JbnB1dHNDb250YWluZXIuYXBwZW5kKFxuICAgICAgdGhpcy5zaG9ydEJyZWFrQ29udGFpbmVyLFxuICAgICAgdGhpcy5zaG9ydEJyZWFrRXJyb3IsXG4gICAgICB0aGlzLmxvbmdCcmVha0NvbnRhaW5lcixcbiAgICAgIHRoaXMubG9uZ0JyZWFrRXJyb3IsXG4gICAgICB0aGlzLnRpbWVyQXVkaW9Db250YWluZXIsXG4gICAgKTtcbiAgICB0aGlzLnNob3J0QnJlYWtDb250YWluZXIuYXBwZW5kKFxuICAgICAgdGhpcy5zaG9ydEJyZWFrTGFiZWwsXG4gICAgICB0aGlzLnNob3J0QnJlYWtJbnB1dCxcbiAgICAgIHRoaXMuc2hvcnRCcmVha0JvdW5kcyxcbiAgICApO1xuICAgIHRoaXMubG9uZ0JyZWFrQ29udGFpbmVyLmFwcGVuZChcbiAgICAgIHRoaXMubG9uZ0JyZWFrTGFiZWwsXG4gICAgICB0aGlzLmxvbmdCcmVha0lucHV0LFxuICAgICAgdGhpcy5sb25nQnJlYWtCb3VuZHMsXG4gICAgKTtcbiAgICB0aGlzLnRpbWVyQXVkaW9Db250YWluZXIuYXBwZW5kKHRoaXMudGltZXJBdWRpb0xhYmVsLCB0aGlzLnRpbWVyQXVkaW9JbnB1dCk7XG4gICAgdGhpcy50aW1lckF1ZGlvSW5wdXQuYXBwZW5kKC4uLnRoaXMudGltZXJBdWRpb09wdGlvbnMpO1xuICB9XG5cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgY2FzZSAnc2hvcnQtYnJlYWstbGVuZ3RoJzoge1xuICAgICAgICBjb25zdCBzaG9ydEJyZWFrTGVuZ3RoID0gdmFsaWRhdGVTaG9ydEJyZWFrTGVuZ3RoKG5ld1ZhbHVlKTtcbiAgICAgICAgaWYgKHNob3J0QnJlYWtMZW5ndGggPT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2hvcnRCcmVha0xlbmd0aCA9IHNob3J0QnJlYWtMZW5ndGg7XG4gICAgICAgIHRoaXMuc2hvcnRCcmVha0lucHV0LnZhbHVlID0gdGhpcy5fc2hvcnRCcmVha0xlbmd0aDtcbiAgICAgICAgdGhpcy5zaG9ydEJyZWFrRXJyb3IudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2xvbmctYnJlYWstbGVuZ3RoJzoge1xuICAgICAgICBjb25zdCBsb25nQnJlYWtMZW5ndGggPSB2YWxpZGF0ZUxvbmdCcmVha0xlbmd0aChuZXdWYWx1ZSk7XG4gICAgICAgIGlmIChsb25nQnJlYWtMZW5ndGggPT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9uZ0JyZWFrTGVuZ3RoID0gbG9uZ0JyZWFrTGVuZ3RoO1xuICAgICAgICB0aGlzLmxvbmdCcmVha0lucHV0LnZhbHVlID0gdGhpcy5fbG9uZ0JyZWFrTGVuZ3RoO1xuICAgICAgICB0aGlzLmxvbmdCcmVha0Vycm9yLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICd0aW1lci1hdWRpbyc6IHtcbiAgICAgICAgY29uc3QgdGltZXJBdWRpbyA9IHZhbGlkYXRlVGltZXJBdWRpbyhuZXdWYWx1ZSk7XG4gICAgICAgIGlmICh0aW1lckF1ZGlvID09PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgb2xkVmFsdWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3RpbWVyQXVkaW8gPSB0aW1lckF1ZGlvO1xuICAgICAgICB0aGlzLnRpbWVyQXVkaW9JbnB1dC52YWx1ZSA9IHRoaXMuX3RpbWVyQXVkaW87XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cblxuICBnZXQgc2hvcnRCcmVha0xlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2hvcnRCcmVha0xlbmd0aDtcbiAgfVxuXG4gIHNldCBzaG9ydEJyZWFrTGVuZ3RoKHZhbHVlKSB7XG4gICAgY29uc3Qgc2hvcnRCcmVha0xlbmd0aCA9IHZhbGlkYXRlU2hvcnRCcmVha0xlbmd0aCh2YWx1ZSk7XG4gICAgaWYgKHNob3J0QnJlYWtMZW5ndGggPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9zaG9ydEJyZWFrTGVuZ3RoID0gc2hvcnRCcmVha0xlbmd0aDtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnc2hvcnQtYnJlYWstbGVuZ3RoJywgdGhpcy5fc2hvcnRCcmVha0xlbmd0aCk7XG4gIH1cblxuICBnZXQgbG9uZ0JyZWFrTGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLl9sb25nQnJlYWtMZW5ndGg7XG4gIH1cblxuICBzZXQgbG9uZ0JyZWFrTGVuZ3RoKHZhbHVlKSB7XG4gICAgY29uc3QgbG9uZ0JyZWFrTGVuZ3RoID0gdmFsaWRhdGVMb25nQnJlYWtMZW5ndGgodmFsdWUpO1xuICAgIGlmIChsb25nQnJlYWtMZW5ndGggPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9sb25nQnJlYWtMZW5ndGggPSBsb25nQnJlYWtMZW5ndGg7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2xvbmctYnJlYWstbGVuZ3RoJywgdGhpcy5fbG9uZ0JyZWFrTGVuZ3RoKTtcbiAgfVxuXG4gIGdldCB0aW1lckF1ZGlvKCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lckF1ZGlvO1xuICB9XG5cbiAgc2V0IHRpbWVyQXVkaW8odmFsdWUpIHtcbiAgICBjb25zdCB0aW1lckF1ZGlvID0gdmFsaWRhdGVUaW1lckF1ZGlvKHZhbHVlKTtcbiAgICBpZiAodGltZXJBdWRpbyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3RpbWVyQXVkaW8gPSB0aW1lckF1ZGlvO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCd0aW1lci1hdWRpbycsIHRoaXMuX3RpbWVyQXVkaW8pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNldHRpbmdzO1xuIiwiLyoqXG4gKiBAZmlsZSBNYW5hZ2UgdGFza2xpc3QgZm9yIHBhZ2VcbiAqL1xuXG4vKipcbiAqIEEgdGFzayBvYmplY3QgY29udGFpbmluZyBhIG5hbWUgYW5kIHBvbW9kb3JvcyBzdGF0c1xuICogQHR5cGVkZWYge09iamVjdH0gVGFza1xuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWUgICAgICAgICAgICAgICAgLSBuYW1lIG9mIHRoZSB0YXNrXG4gKiBAcHJvcGVydHkge251bWJlcn0gdXNlZFBvbW9kb3JvcyAgICAgICAtIHBvbW9kb3JvcyB1c2VkIHNvIGZhclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGVzdGltYXRlZFBvbW9kb3JvcyAgLSBlc3RpbWF0ZWQgbnVtYmVyIG9mIHBvbW9zIG5lZWRlZFxuICogQHByb3BlcnR5IHtib29sZWFufSBzZWxlY3RlZCAgICAgICAgICAgLSB3aGV0aGVyIHRhc2sgaXMgc2VsZWN0ZWRcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY29tcGxldGVkICAgICAgICAgIC0gd2hldGhlciB0YXNrIGlzIGNvbXBsZXRlZFxuICovXG5cbmltcG9ydCB7IGRpc3BhdGNoLCBzdWJzY3JpYmUgfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgQUNUSU9OUywgSU5URVJWQUxTLCBLRVlTIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCB7IHZhbGlkYXRlVGFzayB9IGZyb20gJy4uL3V0aWxzL3Rhc2tMaXN0JztcblxubGV0IHRhc2tzID0gW107XG5sZXQgdGFza0xpc3Q7XG5sZXQgdGFza0xpc3RDb250YWluZXI7XG5sZXQgdGFza0xpc3RJdGVtQ29udGFpbmVyO1xubGV0IHRhc2tJdGVtRm9ybTtcbmxldCB0YXNrSXRlbUZvcm1Db250YWluZXI7XG5sZXQgdGFza0l0ZW1Gb3JtSW5wdXRzO1xuXG4vKipcbiAqIFNhdmUgY3VycmVudCB0YXNrcyB0byBsb2NhbFN0b3JhZ2VcbiAqL1xuY29uc3Qgc2F2ZVRhc2tzID0gKCkgPT4ge1xuICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oS0VZUy50YXNrcywgSlNPTi5zdHJpbmdpZnkodGFza3MpKTtcbn07XG5cbi8qKlxuICogUmV0cmlldmUgdGFzayBmcm9tIHRhc2tzIGFuZCBET01cbiAqIEBwYXJhbSB7VGFza30gdGFzayAtIHRhc2tcbiAqIEByZXR1cm4ge3t0YXNrSW5kZXg6IG51bWJlciwgdGFza0VsZW1lbnQ6IEhUTUxFbGVtZW50fX1cbiAqL1xuY29uc3QgZ2V0VGFzayA9ICh7IG5hbWUgfSkgPT4gKHtcbiAgdGFza0luZGV4OiB0YXNrcy5maW5kSW5kZXgoKHRhc2spID0+IHRhc2submFtZSA9PT0gbmFtZSksXG4gIHRhc2tFbGVtZW50OiB0YXNrTGlzdEl0ZW1Db250YWluZXIucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke25hbWV9XCJdYCksXG59KTtcblxuLyoqXG4gKiBHZXQgYnV0dG9uIGVsZW1lbnRzIGZyb20gdGFzay1pdGVtIGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhc2tFbGVtZW50IC0gdGFzay1pdGVtIGVsZW1lbnRcbiAqIEByZXR1cm4ge3tkZWxldGU6IEhUTUxCdXR0b25FbGVtZW50fX0gLSBidXR0b24gZWxlbWVudHMgb2JqZWN0XG4gKi9cbmNvbnN0IGdldFRhc2tJdGVtQnV0dG9ucyA9ICh0YXNrRWxlbWVudCkgPT4ge1xuICBjb25zdCBidXR0b25zID0gQXJyYXkuZnJvbShcbiAgICB0YXNrRWxlbWVudC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3JBbGwoJy50YXNrLWJ1dHRvbicpLFxuICApO1xuXG4gIHJldHVybiB7XG4gICAgZGVsZXRlOiBidXR0b25zLmZpbmQoKGJ0bikgPT4gYnRuLmdldEF0dHJpYnV0ZSgnaWQnKSA9PT0gJ2RlbGV0ZS1idXR0b24nKSxcbiAgfTtcbn07XG5cbi8qKlxuICogQWRkIHRhc2sgb2JqZWN0IHRvIERPTSwgYWRkIGV2ZW50IGxpc3RlbmVycyB0byB0YXNrLWl0ZW1cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5ld1Rhc2tFbGVtZW50IC0gbmV3IHRhc2sgZWxlbWVudCB0byBiZSBhZGRlZFxuICogQHBhcmFtIHsoJ3N0YXJ0JyB8ICdlbmQnIHwgSFRNTEVsZW1lbnQpPX0gcG9zaXRpb24gLSBwb3NpdGlvbiBpbiBsaXN0IHRvIGFwcGVuZFxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9IC0gbmV3IHRhc2sgZWxlbWVudCBhZGRlZCB0byBET01cbiAqL1xuY29uc3QgYWRkVGFza1RvRG9tID0gKG5ld1Rhc2tFbGVtZW50LCBwb3NpdGlvbiA9ICdlbmQnKSA9PiB7XG4gIGlmIChwb3NpdGlvbiAhPT0gJ2VuZCcgJiYgcG9zaXRpb24gIT09ICdzdGFydCcpIHtcbiAgICBjb25zdCB7IHRhc2tFbGVtZW50IH0gPSBnZXRUYXNrKHBvc2l0aW9uKTtcbiAgICB0YXNrRWxlbWVudC5iZWZvcmUobmV3VGFza0VsZW1lbnQpO1xuICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnZW5kJykge1xuICAgIHRhc2tMaXN0SXRlbUNvbnRhaW5lci5hcHBlbmQobmV3VGFza0VsZW1lbnQpO1xuICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnc3RhcnQnKSB7XG4gICAgdGFza0xpc3RJdGVtQ29udGFpbmVyLnByZXBlbmQobmV3VGFza0VsZW1lbnQpO1xuICB9XG4gIHJldHVybiBuZXdUYXNrRWxlbWVudDtcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRhc2sgb2JqZWN0IGZyb20gRE9NXG4gKiBAcGFyYW0ge1Rhc2t9IHRhc2tUb1JlbW92ZSAtIHRhc2sgdG8gYmUgcmVtb3ZlZFxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9IC0gdGFzayBlbGVtZW50IHJlbW92ZWQgZnJvbSBET01cbiAqL1xuY29uc3QgcmVtb3ZlVGFza0Zyb21Eb20gPSAodGFza1RvUmVtb3ZlKSA9PiB7XG4gIGNvbnN0IHsgdGFza0VsZW1lbnQgfSA9IGdldFRhc2sodGFza1RvUmVtb3ZlKTtcbiAgdGFza0VsZW1lbnQucmVtb3ZlKCk7XG4gIHJldHVybiB0YXNrRWxlbWVudDtcbn07XG5cbi8qKlxuICogVXBkYXRlIGV4aXN0aW5nIHRhc2tcbiAqIEBwYXJhbSB7VGFza30gcHJldlRhc2sgLSB0YXNrIHRvIGJlIHVwZGF0ZWRcbiAqIEBwYXJhbSB7VGFza30gbmV4dFRhc2sgLSB1cGRhdGVkIHRhc2tcbiAqIEByZXR1cm4ge1Rhc2t9IC0gdXBkYXRlZCB0YXNrXG4gKi9cbmNvbnN0IHVwZGF0ZVRhc2sgPSAocHJldlRhc2ssIG5leHRUYXNrKSA9PiB7XG4gIGNvbnN0IHsgdGFza0luZGV4LCB0YXNrRWxlbWVudCB9ID0gZ2V0VGFzayhwcmV2VGFzayk7XG5cbiAgLy8gdXBkYXRlIGxvY2FsU3RvcmFnZVxuICB0YXNrc1t0YXNrSW5kZXhdID0gbmV4dFRhc2s7XG4gIHNhdmVUYXNrcygpO1xuXG4gIC8vIHVwZGF0ZSB0YXNrIGluIGRvbVxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuZXh0VGFzaykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgdGFza0VsZW1lbnRba2V5XSA9IG5leHRUYXNrW2tleV07XG4gIH0pO1xuICByZXR1cm4gbmV4dFRhc2s7XG59O1xuXG4vKipcbiAqIERlbGV0aW5nIGV4aXN0aW5nIHRhc2tcbiAqIEBwYXJhbSB7VGFza30gdGFza1RvRGVsZXRlIC0gdGFzayB0byBiZSBkZWxldGVkXG4gKi9cbmNvbnN0IGRlbGV0ZVRhc2sgPSAodGFza1RvRGVsZXRlKSA9PiB7XG4gIC8vIHVwZGF0ZSBsb2NhbFN0b3JhZ2VcbiAgY29uc3QgeyB0YXNrSW5kZXggfSA9IGdldFRhc2sodGFza1RvRGVsZXRlKTtcbiAgdGFza3Muc3BsaWNlKHRhc2tJbmRleCwgMSk7XG4gIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShLRVlTLnRhc2tzLCBKU09OLnN0cmluZ2lmeSh0YXNrcykpO1xuICByZW1vdmVUYXNrRnJvbURvbSh0YXNrVG9EZWxldGUpO1xufTtcblxuLyoqXG4gKiBHZXQgY3VycmVudGx5IHNlbGVjdGVkIHRhc2tcbiAqL1xuY29uc3QgZ2V0Q3VycmVudFNlbGVjdGVkVGFzayA9ICgpID0+IHRhc2tzLmZpbmQoKHQpID0+IHQuc2VsZWN0ZWQpO1xuXG4vKipcbiAqIFNlbGVjdCBhIHRhc2tcbiAqIEBwYXJhbSB7VGFza30gdGFzayAtIHRhc2sgdG8gYmUgc2VsZWN0ZWRcbiAqIEByZXR1cm4ge1Rhc2t9IC0gc2VsZWN0ZWQgdGFza1xuICovXG5jb25zdCBzZWxlY3RUYXNrID0gKHRhc2spID0+IHtcbiAgY29uc3QgcHJldlNlbGVjdGVkVGFzayA9IGdldEN1cnJlbnRTZWxlY3RlZFRhc2soKTtcbiAgaWYgKHByZXZTZWxlY3RlZFRhc2spIHtcbiAgICB1cGRhdGVUYXNrKHByZXZTZWxlY3RlZFRhc2ssIHsgLi4ucHJldlNlbGVjdGVkVGFzaywgc2VsZWN0ZWQ6IGZhbHNlIH0pO1xuICB9XG5cbiAgY29uc3QgeyB0YXNrRWxlbWVudCwgdGFza0luZGV4IH0gPSBnZXRUYXNrKHRhc2spO1xuICAvLyBtb3ZlIHRhc2sgdG8gZnJvbnQgb2YgRE9NIGxpc3RcbiAgcmVtb3ZlVGFza0Zyb21Eb20odGFzayk7XG4gIGFkZFRhc2tUb0RvbSh0YXNrRWxlbWVudCwgJ3N0YXJ0Jyk7XG5cbiAgLy8gbW92ZSB0YXNrIHRvIGZyb250IG9mIHRhc2tzIGFycmF5XG4gIHRhc2tzLnNwbGljZSh0YXNrSW5kZXgsIDEpO1xuICB0YXNrcy51bnNoaWZ0KHRhc2spO1xuXG4gIC8vIHVwZGF0ZSBzZWxlY3RlZCBwcm9wZXJ0eSBvZiB0YXNrXG4gIGNvbnN0IHVwZGF0ZWRUYXNrID0geyAuLi50YXNrLCBzZWxlY3RlZDogdHJ1ZSB9O1xuICBkaXNwYXRjaChBQ1RJT05TLmNoYW5nZVNlbGVjdGVkVGFzaywgdXBkYXRlZFRhc2spO1xuICByZXR1cm4gdXBkYXRlVGFzayh0YXNrLCB1cGRhdGVkVGFzayk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIHRhc2sgZWxlbWVudCBmcm9tIGEgdGFzayBvYmplY3RcbiAqIEBwYXJhbSB7VGFza30gbmV3VGFzayAtIHRhc2sgdG8gYmUgY3JlYXRlZFxuICovXG5jb25zdCBjcmVhdGVUYXNrRWxlbWVudCA9IChuZXdUYXNrKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBuYW1lLFxuICAgIHVzZWRQb21vZG9yb3MsXG4gICAgZXN0aW1hdGVkUG9tb2Rvcm9zLFxuICAgIHNlbGVjdGVkLFxuICAgIGNvbXBsZXRlZCxcbiAgfSA9IG5ld1Rhc2s7XG5cbiAgLy8gY3JlYXRlIGh0bWwgZWxlbWVudFxuICBjb25zdCBuZXdUYXNrRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ3Rhc2staXRlbScsIHtcbiAgICBuYW1lLFxuICAgIHVzZWRQb21vZG9yb3MsXG4gICAgZXN0aW1hdGVkUG9tb2Rvcm9zLFxuICAgIHNlbGVjdGVkLFxuICB9KTtcblxuICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gIGNvbnN0IHRleHRDb250YWluZXIgPSBuZXdUYXNrRWxlbWVudC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgJy50ZXh0LWNvbnRhaW5lcicsXG4gICk7XG4gIGNvbnN0IHsgZGVsZXRlOiBkZWxldGVCdXR0b24gfSA9IGdldFRhc2tJdGVtQnV0dG9ucyhuZXdUYXNrRWxlbWVudCk7XG4gIGlmICghY29tcGxldGVkKSB7XG4gICAgdGV4dENvbnRhaW5lci5vbmNsaWNrID0gKCkgPT4gc2VsZWN0VGFzayhuZXdUYXNrKTtcbiAgfVxuICBkZWxldGVCdXR0b24ub25jbGljayA9ICgpID0+IGRlbGV0ZVRhc2sobmV3VGFzayk7XG4gIHJldHVybiBuZXdUYXNrRWxlbWVudDtcbn07XG5cbi8qKlxuICogQWRkIG5ldyB0YXNrIHRvIGxvY2FsU3RvcmFnZSwgYXBwZW5kIHRvIERPTVxuICogQHBhcmFtIHtUYXNrfSBuZXdUYXNrIC0gbmV3IHRhc2sgdG8gYmUgYWRkZWRcbiAqL1xuY29uc3QgYWRkVGFzayA9IChuZXdUYXNrKSA9PiB7XG4gIC8vIHVwZGF0ZSBsb2NhbFN0b3JhZ2VcbiAgY29uc3QgbmV3VGFza0VsZW1lbnQgPSBjcmVhdGVUYXNrRWxlbWVudChuZXdUYXNrKTtcbiAgY29uc3QgaW5kZXhPZkZpcnN0Q29tcGxldGVkID0gdGFza3MuZmluZEluZGV4KCh0KSA9PiB0LmNvbXBsZXRlZCk7XG4gIGlmIChpbmRleE9mRmlyc3RDb21wbGV0ZWQgIT09IC0xKSB7XG4gICAgdGFza3Muc3BsaWNlKGluZGV4T2ZGaXJzdENvbXBsZXRlZCwgMCwgbmV3VGFzayk7XG4gICAgYWRkVGFza1RvRG9tKG5ld1Rhc2tFbGVtZW50LCB0YXNrc1tpbmRleE9mRmlyc3RDb21wbGV0ZWQgKyAxXSk7XG4gIH0gZWxzZSB7XG4gICAgdGFza3MucHVzaChuZXdUYXNrKTtcbiAgICBhZGRUYXNrVG9Eb20obmV3VGFza0VsZW1lbnQpO1xuICB9XG4gIHNhdmVUYXNrcygpO1xufTtcblxuLyoqXG4gKiBHZXQgdGFza2xpc3RcbiAqIEByZXR1cm4ge1Rhc2tbXX0gLSBjdXJyZW50IGxpc3Qgb2YgdGFza3NcbiAqL1xuY29uc3QgZ2V0VGFza3MgPSAoKSA9PiB7XG4gIHJldHVybiB0YXNrcztcbn07XG5cbi8qKlxuICogSGFuZGxlIGZvcm0gc3VibWlzc2lvbiwgdmFsaWRhdGUgaW5wdXRcbiAqIEBwYXJhbSB7RXZlbnR9IGUgLSBzdWJtaXQgZXZlbnRcbiAqL1xuY29uc3QgaGFuZGxlVGFza0Zvcm1TdWJtaXQgPSAoZSkgPT4ge1xuICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnQgcGFnZSByZWxvYWRcblxuICBjb25zdCB7IG5hbWU6IG5hbWVJbnB1dCwgcG9tb2Rvcm86IHBvbW9kb3JvSW5wdXQgfSA9IHRhc2tJdGVtRm9ybUlucHV0cztcbiAgY29uc3QgeyB2YWx1ZTogbmFtZSB9ID0gbmFtZUlucHV0O1xuICBjb25zdCB7IHZhbHVlOiBwb21vZG9ybyB9ID0gcG9tb2Rvcm9JbnB1dDtcblxuICBjb25zdCB0cmltbWVkTmFtZSA9IG5hbWUudHJpbSgpO1xuICBjb25zdCBwb21vZG9yb051bWJlciA9IE51bWJlcihwb21vZG9ybyk7XG5cbiAgbmFtZUlucHV0LmZvY3VzKCk7XG5cbiAgYWRkVGFzayh7XG4gICAgbmFtZTogdHJpbW1lZE5hbWUsXG4gICAgZXN0aW1hdGVkUG9tb2Rvcm9zOiBwb21vZG9yb051bWJlcixcbiAgICB1c2VkUG9tb2Rvcm9zOiAwLFxuICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICB9KTtcbiAgT2JqZWN0LnZhbHVlcyh0YXNrSXRlbUZvcm1JbnB1dHMpLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgaW5wdXQudmFsdWUgPSAnJztcbiAgfSk7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlIHRhc2tzIGZyb20gbG9jYWxTdG9yYWdlXG4gKi9cbmNvbnN0IHJlc3RvcmVUYXNrcyA9ICgpID0+IHtcbiAgbGV0IHJlc3RvcmVkVGFza3M7XG4gIHRyeSB7XG4gICAgcmVzdG9yZWRUYXNrcyA9IEpTT04ucGFyc2Uod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKEtFWVMudGFza3MpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlc3RvcmVkVGFza3MgPSBudWxsO1xuICB9XG4gIGlmICghcmVzdG9yZWRUYXNrcykge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShLRVlTLnRhc2tzLCBKU09OLnN0cmluZ2lmeShbXSkpO1xuICAgIHJlc3RvcmVkVGFza3MgPSBbXTtcbiAgfVxuXG4gIHJlc3RvcmVkVGFza3MgPSByZXN0b3JlZFRhc2tzLmZpbHRlcih2YWxpZGF0ZVRhc2spO1xuICB0YXNrcyA9IHJlc3RvcmVkVGFza3M7XG4gIHRhc2tzLmZvckVhY2goKHRhc2spID0+IGFkZFRhc2tUb0RvbShjcmVhdGVUYXNrRWxlbWVudCh0YXNrKSkpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGFzayBpbnB1dCBpcyBhbHJlYWR5IGluIGxpc3RcbiAqIFNldHMgZXJyb3IgbWVzc2FnZSBmb3IgZm9ybVxuICogQHBhcmFtIHtJbnB1dEV2ZW50fSBlIC0gaW5wdXQgY2hhbmdlIGZyb20gdGFzayBpdGVtIGZvcm1cbiAqL1xuY29uc3QgY2hlY2tEdXBsaWNhdGVUYXNrID0gKGUpID0+IHtcbiAgY29uc3QgeyB2YWx1ZSB9ID0gZS50YXJnZXQ7XG4gIGNvbnN0IHRyaW1tZWROYW1lID0gdmFsdWUudHJpbSgpO1xuICBpZiAodGFza3Muc29tZSgodGFzaykgPT4gdGFzay5uYW1lID09PSB0cmltbWVkTmFtZSkpIHtcbiAgICBlLnRhcmdldC5zZXRDdXN0b21WYWxpZGl0eSgnRHVwbGljYXRlIHRhc2suJyk7XG4gIH0gZWxzZSB7XG4gICAgZS50YXJnZXQuc2V0Q3VzdG9tVmFsaWRpdHkoJycpO1xuICB9XG59O1xuXG4vKipcbiAqIEluY3JlbWVudCB0aGUgdXNlZFBvbW9kb3JvcyBmb3Igb25lIHRhc2tcbiAqIEBwYXJhbSB7VGFza30gdGFzayAtIHRhc2sgdG8gYmUgaW5jcmVtZW50ZWRcbiAqIEByZXR1cm4ge1Rhc2t9IC0gaW5jcmVtZW50ZWQgdGFza1xuICovXG5jb25zdCBpbmNyZW1lbnRUYXNrID0gKHRhc2spID0+IHtcbiAgY29uc3QgeyB1c2VkUG9tb2Rvcm9zIH0gPSB0YXNrO1xuICByZXR1cm4gdXBkYXRlVGFzayh0YXNrLCB7IC4uLnRhc2ssIHVzZWRQb21vZG9yb3M6IHVzZWRQb21vZG9yb3MgKyAxIH0pO1xufTtcblxuLyoqXG4gKiBBdXRvbWF0aWNhbGx5IHNlbGVjdCBmaXJzdCB0YXNrIGluIHRoZSB0YXNrIGxpc3RcbiAqIEByZXR1cm4ge1Rhc2sgfCBudWxsfSByZXR1cm5zIGZpcnN0IGF2YWlsYWJsZSB0YXNrLCBpZiB0aGVyZSBhcmUgbm9uZSwgcmV0dXJuIG51bGxcbiAqL1xuY29uc3Qgc2VsZWN0Rmlyc3RUYXNrID0gKCkgPT4ge1xuICBpZiAodGFza3MubGVuZ3RoID4gMCAmJiAhdGFza3NbMF0uY29tcGxldGVkKSB7XG4gICAgcmV0dXJuIHNlbGVjdFRhc2sodGFza3NbMF0pO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBEZXNlbGVjdCBhbGwgdGFza3NcbiAqL1xuY29uc3QgZGVzZWxlY3RBbGxUYXNrcyA9ICgpID0+IHtcbiAgdGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xuICAgIHVwZGF0ZVRhc2sodGFzaywgeyAuLi50YXNrLCBzZWxlY3RlZDogZmFsc2UgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBEaXNhYmxlIHRhc2sgbGlzdFxuICogQHBhcmFtIHtib29sZWFufSBzaG91bGRUYXNrbGlzdEJlVXNhYmxlIC0gd2hldGhlciB0YXNrIGxpc3Qgc2hvdWxkIGJlIHVzYWJsZVxuICovXG5jb25zdCBzZXRUYXNrbGlzdFVzYWJpbGl0eSA9IChzaG91bGRUYXNrbGlzdEJlVXNhYmxlKSA9PiB7XG4gIHRhc2tzLmZvckVhY2goKHRhc2spID0+IHtcbiAgICBjb25zdCB7IHRhc2tFbGVtZW50IH0gPSBnZXRUYXNrKHRhc2spO1xuICAgIGNvbnN0IHsgc2hhZG93Um9vdCB9ID0gdGFza0VsZW1lbnQ7XG4gICAgY29uc3QgaXRlbUNvbnRhaW5lciA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLml0ZW0tY29udGFpbmVyJyk7XG4gICAgY29uc3QgdGV4dENvbnRhaW5lciA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnRleHQtY29udGFpbmVyJyk7XG5cbiAgICAvLyBkaXNhYmxlIGl0ZW0gY29udGFpbmVyXG4gICAgaWYgKHNob3VsZFRhc2tsaXN0QmVVc2FibGUpIHtcbiAgICAgIGl0ZW1Db250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlbUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xuICAgIH1cblxuICAgIC8vIGRpc2FibGUgc2VsZWN0IHRhc2sgbGlzdGVuZXJcbiAgICBpZiAoc2hvdWxkVGFza2xpc3RCZVVzYWJsZSAmJiAhdGFzay5jb21wbGV0ZWQpIHtcbiAgICAgIHRleHRDb250YWluZXIub25jbGljayA9ICgpID0+IHNlbGVjdFRhc2sodGFzayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRleHRDb250YWluZXIub25jbGljayA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gZGlzYWJsZSBidXR0b25zXG4gICAgY29uc3QgYnV0dG9ucyA9IGdldFRhc2tJdGVtQnV0dG9ucyh0YXNrRWxlbWVudCk7XG4gICAgT2JqZWN0LnZhbHVlcyhidXR0b25zKS5mb3JFYWNoKChidG4pID0+IHtcbiAgICAgIGJ0bi5kaXNhYmxlZCA9ICFzaG91bGRUYXNrbGlzdEJlVXNhYmxlO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbi8qKlxuICogTWFyayB0YXNrIGFzIGNvbXBsZXRlXG4gKiBAcGFyYW0ge1Rhc2t9IGNvbXBsZXRlZFRhc2sgLSB0YXNrIHRoYXQgaGFzIGJlZW4gY29tcGxldGVkXG4gKi9cbmNvbnN0IGNvbXBsZXRlVGFzayA9IChjb21wbGV0ZWRUYXNrKSA9PiB7XG4gIGNvbnN0IHsgdGFza0luZGV4IH0gPSBnZXRUYXNrKGNvbXBsZXRlZFRhc2spO1xuXG4gIC8vIG1vdmUgdGFzayB0byBib3R0b20gb2YgbGlzdCBpbiBET01cbiAgY29uc3QgcmVtb3ZlZFRhc2sgPSByZW1vdmVUYXNrRnJvbURvbShjb21wbGV0ZWRUYXNrKTtcbiAgYWRkVGFza1RvRG9tKHJlbW92ZWRUYXNrLCAnZW5kJyk7XG4gIHJlbW92ZWRUYXNrLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnRleHQtY29udGFpbmVyJykub25jbGljayA9IG51bGw7XG5cbiAgLy8gbW92ZSB0YXNrIHRvIGVuZCBvZiB0YXNrcyBhcnJheVxuICB0YXNrcy5zcGxpY2UodGFza0luZGV4LCAxKTtcbiAgdGFza3MucHVzaChjb21wbGV0ZWRUYXNrKTtcbiAgLypcbiAgY29uc3QgW3JlbW92ZWRUYXNrXSA9IHRhc2tzLnNwbGljZSh0YXNrSW5kZXgsIDEpO1xuICB0YXNrcy5wdXNoKHsgLi4ucmVtb3ZlZFRhc2ssIHNlbGVjdGVkOiBmYWxzZSwgY29tcGxldGVkOiB0cnVlIH0pO1xuICAqL1xuXG4gIC8vIHVwZGF0ZSB0YXNrXG4gIHJldHVybiB1cGRhdGVUYXNrKGNvbXBsZXRlZFRhc2ssIHtcbiAgICAuLi5jb21wbGV0ZWRUYXNrLFxuICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICBjb21wbGV0ZWQ6IHRydWUsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGVsZW1lbnQgdmFyaWFibGVzIGZvciBkaWZmZXJlbnQgZWxlbWVudHMgb2YgdGFzayBsaXN0XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByb290IC0gdGFza2xpc3QgZWxlbWVudFxuICovXG5jb25zdCBpbml0aWFsaXplRWxlbWVudHMgPSAocm9vdCkgPT4ge1xuICB0YXNrTGlzdCA9IHJvb3Q7XG4gIHRhc2tMaXN0Q29udGFpbmVyID0gdGFza0xpc3Quc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcuY29udGFpbmVyJyk7XG4gIHRhc2tMaXN0SXRlbUNvbnRhaW5lciA9IHRhc2tMaXN0Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXG4gICAgJy50YXNrLWl0ZW0tY29udGFpbmVyJyxcbiAgKTtcbiAgdGFza0l0ZW1Gb3JtID0gdGFza0xpc3RDb250YWluZXIucXVlcnlTZWxlY3RvcignLnRhc2staXRlbS1mb3JtJyk7XG4gIHRhc2tJdGVtRm9ybUNvbnRhaW5lciA9IHRhc2tJdGVtRm9ybS5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy50YXNrLWZvcm0nKTtcbiAgdGFza0l0ZW1Gb3JtSW5wdXRzID0ge1xuICAgIG5hbWU6IHRhc2tJdGVtRm9ybUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjbmFtZS1pbnB1dCcpLFxuICAgIHBvbW9kb3JvOiB0YXNrSXRlbUZvcm1Db250YWluZXIucXVlcnlTZWxlY3RvcignI3BvbW9kb3JvLWlucHV0JyksXG4gIH07XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGFzayBsaXN0LCBhZGQgZXZlbnQgbGlzdGVuZXJzLCByZXN0b3JlIHNhdmVkIHRhc2tzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByb290IC0gdGFzayBsaXN0IGVsZW1lbnRcbiAqL1xuY29uc3QgaW5pdGlhbGl6ZVRhc2tMaXN0ID0gKHJvb3QpID0+IHtcbiAgaW5pdGlhbGl6ZUVsZW1lbnRzKHJvb3QpO1xuICB0YXNrSXRlbUZvcm1Db250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgaGFuZGxlVGFza0Zvcm1TdWJtaXQpO1xuICByZXN0b3JlVGFza3MoKTtcbiAgdGFza0l0ZW1Gb3JtSW5wdXRzLm5hbWUub25pbnB1dCA9IGNoZWNrRHVwbGljYXRlVGFzaztcbiAgZGVzZWxlY3RBbGxUYXNrcygpO1xuXG4gIHN1YnNjcmliZSh7XG4gICAgW0FDVElPTlMuY2hhbmdlU2Vzc2lvbl06IChzZXNzaW9uU3RhdGUpID0+IHtcbiAgICAgIGlmIChzZXNzaW9uU3RhdGUuc2Vzc2lvbiA9PT0gJ2luYWN0aXZlJykge1xuICAgICAgICBkZXNlbGVjdEFsbFRhc2tzKCk7XG4gICAgICAgIHNldFRhc2tsaXN0VXNhYmlsaXR5KHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzZXNzaW9uU3RhdGUuc2Vzc2lvbiA9PT0gJ2FjdGl2ZScpIHtcbiAgICAgICAgaWYgKHNlc3Npb25TdGF0ZS5jdXJyZW50U2VsZWN0ZWRUYXNrID09PSBudWxsKSB7XG4gICAgICAgICAgc2VsZWN0Rmlyc3RUYXNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0VGFza2xpc3RVc2FiaWxpdHkoZmFsc2UpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW0FDVElPTlMuY2hhbmdlQ3VycmVudEludGVydmFsXTogKHNlc3Npb25TdGF0ZSkgPT4ge1xuICAgICAgaWYgKHNlc3Npb25TdGF0ZS5zZXNzaW9uID09PSAnYWN0aXZlJykge1xuICAgICAgICBpZiAoc2Vzc2lvblN0YXRlLmN1cnJlbnRJbnRlcnZhbCA9PT0gSU5URVJWQUxTLnBvbW9kb3JvKSB7XG4gICAgICAgICAgaWYgKHNlc3Npb25TdGF0ZS5jdXJyZW50U2VsZWN0ZWRUYXNrID09PSBudWxsKSB7XG4gICAgICAgICAgICBzZWxlY3RGaXJzdFRhc2soKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2V0VGFza2xpc3RVc2FiaWxpdHkoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBbQUNUSU9OUy5pbmNyZW1lbnRTZWxlY3RlZFRhc2tdOiAoc2Vzc2lvblN0YXRlKSA9PiB7XG4gICAgICBpZiAoc2Vzc2lvblN0YXRlLnNlc3Npb24gPT09ICdhY3RpdmUnKSB7XG4gICAgICAgIGNvbnN0IGluY3JlbWVudGVkVGFzayA9IGluY3JlbWVudFRhc2soc2Vzc2lvblN0YXRlLmN1cnJlbnRTZWxlY3RlZFRhc2spO1xuICAgICAgICBkaXNwYXRjaChBQ1RJT05TLmNoYW5nZVNlbGVjdGVkVGFzaywgaW5jcmVtZW50ZWRUYXNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtBQ1RJT05TLmNvbXBsZXRlU2VsZWN0ZWRUYXNrXTogKHNlc3Npb25TdGF0ZSkgPT4ge1xuICAgICAgaWYgKHNlc3Npb25TdGF0ZS5zZXNzaW9uID09PSAnYWN0aXZlJykge1xuICAgICAgICBjb25zdCBjb21wbGV0ZWRUYXNrID0gY29tcGxldGVUYXNrKHNlc3Npb25TdGF0ZS5jdXJyZW50U2VsZWN0ZWRUYXNrKTtcbiAgICAgICAgZGlzcGF0Y2goQUNUSU9OUy5jaGFuZ2VTZWxlY3RlZFRhc2ssIG51bGwpO1xuICAgICAgICBkaXNwYXRjaChBQ1RJT05TLmFkZFRvQ29tcGxldGVkVGFza3MsIGNvbXBsZXRlZFRhc2spO1xuICAgICAgICBzZXRUYXNrbGlzdFVzYWJpbGl0eSh0cnVlKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn07XG5cbmV4cG9ydCB7XG4gIGluaXRpYWxpemVUYXNrTGlzdCxcbiAgYWRkVGFzayxcbiAgZ2V0VGFza3MsXG4gIHVwZGF0ZVRhc2ssXG4gIGRlbGV0ZVRhc2ssXG4gIGluY3JlbWVudFRhc2ssXG4gIHNlbGVjdFRhc2ssXG4gIHNlbGVjdEZpcnN0VGFzayxcbiAgZGVzZWxlY3RBbGxUYXNrcyxcbiAgZ2V0Q3VycmVudFNlbGVjdGVkVGFzayxcbiAgc2V0VGFza2xpc3RVc2FiaWxpdHksXG4gIGNvbXBsZXRlVGFzayxcbiAgaGFuZGxlVGFza0Zvcm1TdWJtaXQsXG59O1xuIiwiLyoqXG4gKiBAZmlsZSBNYW5hZ2UgcHJvZ3Jlc3MgcmluZyBmb3IgcGFnZVxuICovXG5cbmltcG9ydCB7IHN1YnNjcmliZSB9IGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgeyBBQ1RJT05TLCBJTlRFUlZBTFMgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xuaW1wb3J0IHsgdmFsaWRhdGVMZW5ndGgsIHZhbGlkYXRlUHJvZ3Jlc3MgfSBmcm9tICcuLi91dGlscy9wcm9ncmVzc1JpbmcnO1xuXG5sZXQgcHJvZ3Jlc3NSaW5nRWxlbWVudDtcblxuLyoqXG4gKiBHZXQgcmFkaXVzIG9mIHJpbmdcbiAqIEByZXR1cm4ge251bWJlcn0gLSByYWRpdXMgb2YgcHJvZ3Jlc3MgcmluZ1xuICovXG5jb25zdCBnZXRSYWRpdXMgPSAoKSA9PiBwcm9ncmVzc1JpbmdFbGVtZW50LnJhZGl1cztcblxuLyoqXG4gKiBTZXQgcmFkaXVzIG9mIHJpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgLSBuZXcgcmFkaXVzIHRvIHNldFxuICovXG5jb25zdCBzZXRSYWRpdXMgPSAodmFsdWUpID0+IHtcbiAgY29uc3QgcmFkaXVzID0gdmFsaWRhdGVMZW5ndGgodmFsdWUpO1xuICBpZiAocmFkaXVzID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHJvZ3Jlc3NSaW5nRWxlbWVudC5yYWRpdXMgPSByYWRpdXM7XG59O1xuXG4vKipcbiAqIEdldCBzdHJva2Ugb2YgcmluZ1xuICogQHJldHVybiB7bnVtYmVyfSAtIHN0cm9rZSBvZiBwcm9ncmVzcyByaW5nXG4gKi9cbmNvbnN0IGdldFN0cm9rZSA9ICgpID0+IHByb2dyZXNzUmluZ0VsZW1lbnQuc3Ryb2tlO1xuXG4vKipcbiAqIFNldCBzdHJva2Ugb2YgcmluZ1xuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gbmV3IHN0cm9rZSB0byBzZXRcbiAqL1xuY29uc3Qgc2V0U3Ryb2tlID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IHN0cm9rZSA9IHZhbGlkYXRlTGVuZ3RoKHZhbHVlKTtcbiAgaWYgKHN0cm9rZSA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHByb2dyZXNzUmluZ0VsZW1lbnQuc3Ryb2tlID0gc3Ryb2tlO1xufTtcblxuLyoqXG4gKiBHZXQgcHJvZ3Jlc3NcbiAqIEByZXR1cm4ge251bWJlcn0gLSBjdXJyZW50IHByb2dyZXNzXG4gKi9cbmNvbnN0IGdldFByb2dyZXNzID0gKCkgPT4gcHJvZ3Jlc3NSaW5nRWxlbWVudC5wcm9ncmVzcztcblxuLyoqXG4gKiBTZXQgcHJvZ3Jlc3NcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHByb2dyZXNzIHRvIHNldFxuICovXG5jb25zdCBzZXRQcm9ncmVzcyA9ICh2YWx1ZSkgPT4ge1xuICBjb25zdCBwcm9ncmVzcyA9IHZhbGlkYXRlUHJvZ3Jlc3ModmFsdWUpO1xuICBpZiAocHJvZ3Jlc3MgPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9ncmVzc1JpbmdFbGVtZW50LnByb2dyZXNzID0gcHJvZ3Jlc3M7XG59O1xuXG4vKipcbiAqIFNldCBwcm9ncmVzcyByaW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gcHJvZ3Jlc3MgcmluZyBlbGVtZW50XG4gKi9cbmNvbnN0IGluaXRpYWxpemVQcm9ncmVzc1JpbmcgPSAoZWxlbWVudCkgPT4ge1xuICBwcm9ncmVzc1JpbmdFbGVtZW50ID0gZWxlbWVudDtcbiAgY29uc3Qgb3ZlcmxheUNpcmNsZUVsZW1lbnQgPSBwcm9ncmVzc1JpbmdFbGVtZW50LnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcbiAgICAnLm92ZXJsYXktY2lyY2xlJyxcbiAgKTtcbiAgc3Vic2NyaWJlKHtcbiAgICBbQUNUSU9OUy5jaGFuZ2VTZXNzaW9uXTogKHNlc3Npb25TdGF0ZSkgPT4ge1xuICAgICAgaWYgKHNlc3Npb25TdGF0ZS5zZXNzaW9uID09PSAnaW5hY3RpdmUnKSB7XG4gICAgICAgIHNldFByb2dyZXNzKDEwMCk7XG4gICAgICAgIG92ZXJsYXlDaXJjbGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnb3ZlcmxheS1jaXJjbGUgcG9tb2Rvcm8nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtBQ1RJT05TLmNoYW5nZUN1cnJlbnRJbnRlcnZhbF06IChzZXNzaW9uU3RhdGUpID0+IHtcbiAgICAgIHNldFByb2dyZXNzKDEwMCk7XG4gICAgICBzd2l0Y2ggKHNlc3Npb25TdGF0ZS5jdXJyZW50SW50ZXJ2YWwpIHtcbiAgICAgICAgY2FzZSBJTlRFUlZBTFMucG9tb2Rvcm86XG4gICAgICAgICAgb3ZlcmxheUNpcmNsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdvdmVybGF5LWNpcmNsZSBwb21vZG9ybycpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIElOVEVSVkFMUy5zaG9ydEJyZWFrOlxuICAgICAgICAgIG92ZXJsYXlDaXJjbGVFbGVtZW50LnNldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICdjbGFzcycsXG4gICAgICAgICAgICAnb3ZlcmxheS1jaXJjbGUgc2hvcnQtYnJlYWsnLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgSU5URVJWQUxTLmxvbmdCcmVhazpcbiAgICAgICAgICBvdmVybGF5Q2lyY2xlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAnY2xhc3MnLFxuICAgICAgICAgICAgJ292ZXJsYXktY2lyY2xlIGxvbmctYnJlYWsnLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgfSxcbiAgICBbQUNUSU9OUy5jaGFuZ2VDdXJyZW50VGltZV06IChzZXNzaW9uU3RhdGUpID0+IHtcbiAgICAgIGlmIChzZXNzaW9uU3RhdGUuc2Vzc2lvbiA9PT0gJ2FjdGl2ZScpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRJbnRlcnZhbExlbmd0aDtcbiAgICAgICAgc3dpdGNoIChzZXNzaW9uU3RhdGUuY3VycmVudEludGVydmFsKSB7XG4gICAgICAgICAgY2FzZSBJTlRFUlZBTFMucG9tb2Rvcm86XG4gICAgICAgICAgICBjdXJyZW50SW50ZXJ2YWxMZW5ndGggPSBzZXNzaW9uU3RhdGUucG9tb2Rvcm9MZW5ndGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIElOVEVSVkFMUy5zaG9ydEJyZWFrOlxuICAgICAgICAgICAgY3VycmVudEludGVydmFsTGVuZ3RoID0gc2Vzc2lvblN0YXRlLnNob3J0QnJlYWtMZW5ndGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIElOVEVSVkFMUy5sb25nQnJlYWs6XG4gICAgICAgICAgICBjdXJyZW50SW50ZXJ2YWxMZW5ndGggPSBzZXNzaW9uU3RhdGUubG9uZ0JyZWFrTGVuZ3RoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJyUHJvZ3Jlc3MgPVxuICAgICAgICAgICgxMDAgKiBzZXNzaW9uU3RhdGUuY3VycmVudFRpbWUpIC8gKDYwICogY3VycmVudEludGVydmFsTGVuZ3RoKTtcbiAgICAgICAgc2V0UHJvZ3Jlc3MoY3VyclByb2dyZXNzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn07XG5cbmV4cG9ydCB7XG4gIGluaXRpYWxpemVQcm9ncmVzc1JpbmcsXG4gIGdldFJhZGl1cyxcbiAgZ2V0U3Ryb2tlLFxuICBnZXRQcm9ncmVzcyxcbiAgc2V0UmFkaXVzLFxuICBzZXRTdHJva2UsXG4gIHNldFByb2dyZXNzLFxufTtcbiIsIi8qKlxuICogQGF1dGhvciBGZXJuYW5kbyBCcmFjYW1vbnRlXG4gKiBAZmlsZSBUaW1lciBzY3JpcHQgdXNlZCB0byBlbXVsYXRlIHRoZSBwb21vZG9ybyBwcm9jZXNzXG4gKi9cblxuaW1wb3J0IHsgc3Vic2NyaWJlIH0gZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB7IEFDVElPTlMgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xuXG5sZXQgdGltZXJFbGVtZW50O1xuXG4vKipcbiAqIFNldCB0aW1lIG9mIHRpbWVyIGNvbXBvbmVudFxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgLSBuZXcgdGltZSBvZiB0aW1lciAoaW4gc2Vjb25kcylcbiAqL1xuY29uc3Qgc2V0VGltZXIgPSAodGltZSkgPT4ge1xuICB0aW1lckVsZW1lbnQudGltZSA9IHRpbWU7XG59O1xuXG4vKipcbiAqIEdldCB0aW1lIG9mIHRpbWVyIGNvbXBvbmVudFxuICogQHJldHVybiB7bnVtYmVyfSAtIGN1cnJlbnQgdGltZSBvZiB0aW1lciAoaW4gc2Vjb25kcylcbiAqL1xuY29uc3QgZ2V0VGltZSA9ICgpID0+IHRpbWVyRWxlbWVudC50aW1lO1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGltZXIgY29tcG9uZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gdGltZXIgZWxlbWVudFxuICovXG5jb25zdCBpbml0aWFsaXplVGltZXIgPSAoZWxlbWVudCkgPT4ge1xuICB0aW1lckVsZW1lbnQgPSBlbGVtZW50O1xuICBjb25zdCB7IHBvbW9kb3JvTGVuZ3RoIH0gPSBzdWJzY3JpYmUoe1xuICAgIFtBQ1RJT05TLmNoYW5nZVNlc3Npb25dOiAoc2Vzc2lvblN0YXRlKSA9PiB7XG4gICAgICBpZiAoc2Vzc2lvblN0YXRlLnNlc3Npb24gPT09ICdpbmFjdGl2ZScpIHtcbiAgICAgICAgc2V0VGltZXIoNjAgKiBzZXNzaW9uU3RhdGUucG9tb2Rvcm9MZW5ndGgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW0FDVElPTlMuY2hhbmdlQ3VycmVudFRpbWVdOiAoc2Vzc2lvblN0YXRlKSA9PiB7XG4gICAgICBpZiAoc2Vzc2lvblN0YXRlLnNlc3Npb24gPT09ICdhY3RpdmUnKSB7XG4gICAgICAgIHNldFRpbWVyKHNlc3Npb25TdGF0ZS5jdXJyZW50VGltZSk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG4gIHNldFRpbWVyKHBvbW9kb3JvTGVuZ3RoICogNjApO1xufTtcblxuZXhwb3J0IHsgaW5pdGlhbGl6ZVRpbWVyLCBzZXRUaW1lciwgZ2V0VGltZSB9O1xuIiwiLyoqXG4gKiBAZmlsZSBNYW5hZ2UgcG9tb2Rvcm8gY2lyY2xlcyBmb3IgcGFnZVxuICovXG5cbmltcG9ydCB7IHN1YnNjcmliZSB9IGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgeyBBQ1RJT05TLCBJTlRFUlZBTFMgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xuaW1wb3J0IHsgdmFsaWRhdGVDaXJjbGVDb3VudCB9IGZyb20gJy4uL3V0aWxzL3BvbW9kb3JvQ2lyY2xlcyc7XG5cbmxldCBjaXJjbGVzRWxlbWVudDtcblxuLyoqXG4gKiBHZXQgbnVtYmVyIG9mIGZpbGxlZCBwb21vZG9ybyBjaXJjbGVzXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0gbnVtYmVyIG9mIGZpbGxlZCBwb21vZG9ybyBjaXJjbGVzXG4gKi9cbmNvbnN0IGdldENpcmNsZUNvdW50ID0gKCkgPT4gY2lyY2xlc0VsZW1lbnQuY2lyY2xlQ291bnQ7XG5cbi8qKlxuICogU2V0IG51bWJlciBvZiBmaWxsZWQgcG9tb2Rvcm8gY2lyY2xlc1xuICogQHBhcmFtIHtudW1iZXJ9IGNpcmNsZUNvdW50IC0gbnVtYmVyIG9mIGZpbGxlZCBwb21vZG9ybyBjaXJjbGVzIHRvIHNldFxuICovXG5jb25zdCBzZXRDaXJjbGVDb3VudCA9ICh2YWx1ZSkgPT4ge1xuICBjb25zdCBjaXJjbGVDb3VudCA9IHZhbGlkYXRlQ2lyY2xlQ291bnQodmFsdWUpO1xuICBpZiAoY2lyY2xlQ291bnQgPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjaXJjbGVzRWxlbWVudC5jaXJjbGVDb3VudCA9IGNpcmNsZUNvdW50O1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIHBvbW9kb3JvIGNpcmNsZXNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBwb21vZG9ybyBjaXJjbGVzIGVsZW1lbnRcbiAqL1xuY29uc3QgaW5pdGlhbGl6ZVBvbW9kb3JvQ2lyY2xlcyA9IChlbGVtZW50KSA9PiB7XG4gIGNpcmNsZXNFbGVtZW50ID0gZWxlbWVudDtcbiAgc3Vic2NyaWJlKHtcbiAgICBbQUNUSU9OUy5jaGFuZ2VTZXNzaW9uXTogKHNlc3Npb25TdGF0ZSkgPT4ge1xuICAgICAgaWYgKHNlc3Npb25TdGF0ZS5zZXNzaW9uID09PSAnaW5hY3RpdmUnKSB7XG4gICAgICAgIHNldENpcmNsZUNvdW50KDApO1xuICAgICAgfVxuICAgIH0sXG4gICAgW0FDVElPTlMuY2hhbmdlQ3VycmVudEludGVydmFsXTogKHNlc3Npb25TdGF0ZSkgPT4ge1xuICAgICAgaWYgKHNlc3Npb25TdGF0ZS5zZXNzaW9uID09PSAnYWN0aXZlJykge1xuICAgICAgICAvLyByZXNldCBjaXJjbGVzIGlmIHN0YXJ0aW5nIG5ldyBzZXQgb2YgNCBwb21vc1xuICAgICAgICBpZiAoc2Vzc2lvblN0YXRlLmN1cnJlbnRJbnRlcnZhbCA9PT0gSU5URVJWQUxTLnBvbW9kb3JvKSB7XG4gICAgICAgICAgaWYgKHNlc3Npb25TdGF0ZS5udW1iZXJPZlBvbW9kb3Jvc0NvbXBsZXRlZCAlIDQgPT09IDApIHtcbiAgICAgICAgICAgIHNldENpcmNsZUNvdW50KDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRDaXJjbGVDb3VudChcbiAgICAgICAgICAgICgoc2Vzc2lvblN0YXRlLm51bWJlck9mUG9tb2Rvcm9zQ29tcGxldGVkIC0gMSkgJSA0KSArIDEsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgaW5pdGlhbGl6ZVBvbW9kb3JvQ2lyY2xlcywgZ2V0Q2lyY2xlQ291bnQsIHNldENpcmNsZUNvdW50IH07XG4iLCIvKipcbiAqIEBmaWxlIE1hbmFnZSB0YXNrbGlzdCBmb3IgcGFnZVxuICovXG5cbmltcG9ydCB7IGRpc3BhdGNoIH0gZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB7IEFDVElPTlMsIEtFWVMsIFRJTUVSX0FVRElPUyB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQge1xuICB2YWxpZGF0ZVNob3J0QnJlYWtMZW5ndGgsXG4gIHZhbGlkYXRlTG9uZ0JyZWFrTGVuZ3RoLFxuICB2YWxpZGF0ZVRpbWVyQXVkaW8sXG4gIGluaXRpYWxpemVJbnRlcnZhbExlbmd0aHMsXG59IGZyb20gJy4uL3V0aWxzL3NldHRpbmdzJztcblxubGV0IHNldHRpbmdzRWxlbWVudDtcbmxldCBwb3B1cEVsZW1lbnQ7XG5sZXQgc2F2ZUJ1dHRvbjtcbmxldCBvdmVybGF5O1xubGV0IHNob3J0QnJlYWtJbnB1dDtcbmxldCBsb25nQnJlYWtJbnB1dDtcbmxldCB0aW1lckF1ZGlvSW5wdXQ7XG5sZXQgZXJyb3JNZXNzYWdlcztcbmNvbnN0IHRpbWVyQXVkaW9FbGVtZW50ID0gbmV3IEF1ZGlvKCk7XG50aW1lckF1ZGlvRWxlbWVudC52b2x1bWUgPSAwLjI7XG5cbi8qKlxuICogR2V0IHNob3J0IGJyZWFrIGxlbmd0aFxuICogQHJldHVybiB7bnVtYmVyfSAtIHNob3J0IGJyZWFrIGxlbmd0aFxuICovXG5jb25zdCBnZXRTaG9ydEJyZWFrTGVuZ3RoID0gKCkgPT4gc2V0dGluZ3NFbGVtZW50LnNob3J0QnJlYWtMZW5ndGg7XG5cbi8qKlxuICogR2V0IGxvbmcgYnJlYWsgbGVuZ3RoXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0gbG9uZyBicmVhayBsZW5ndGhcbiAqL1xuY29uc3QgZ2V0TG9uZ0JyZWFrTGVuZ3RoID0gKCkgPT4gc2V0dGluZ3NFbGVtZW50LmxvbmdCcmVha0xlbmd0aDtcblxuLyoqXG4gKiBHZXQgcGF0aHdheSB0byBzb3VuZCBmaWxlXG4gKiBAcmV0dXJuIHtzdHJpbmd9IC0gYXVkaW8gdXJsXG4gKi9cbmNvbnN0IGdldFRpbWVyQXVkaW8gPSAoKSA9PiBzZXR0aW5nc0VsZW1lbnQudGltZXJBdWRpbztcblxuLyoqXG4gKiBTZXQgc2hvcnQgYnJlYWsgbGVuZ3RoXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBuZXcgc2hvcnQgYnJlYWsgbGVuZ3RoXG4gKi9cbmNvbnN0IHNldFNob3J0QnJlYWtMZW5ndGggPSAodmFsdWUpID0+IHtcbiAgY29uc3Qgc2hvcnRCcmVha0xlbmd0aCA9IHZhbGlkYXRlU2hvcnRCcmVha0xlbmd0aCh2YWx1ZSk7XG4gIGlmIChzaG9ydEJyZWFrTGVuZ3RoID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc2V0dGluZ3NFbGVtZW50LnNob3J0QnJlYWtMZW5ndGggPSBzaG9ydEJyZWFrTGVuZ3RoO1xufTtcblxuLyoqXG4gKiBTZXQgbG9uZyBicmVhayBsZW5ndGhcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb25nQnJlYWtMZW5ndGggLSBuZXcgbG9uZyBicmVhayBsZW5ndGhcbiAqL1xuY29uc3Qgc2V0TG9uZ0JyZWFrTGVuZ3RoID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IGxvbmdCcmVha0xlbmd0aCA9IHZhbGlkYXRlTG9uZ0JyZWFrTGVuZ3RoKHZhbHVlKTtcbiAgaWYgKGxvbmdCcmVha0xlbmd0aCA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHNldHRpbmdzRWxlbWVudC5sb25nQnJlYWtMZW5ndGggPSBsb25nQnJlYWtMZW5ndGg7XG59O1xuXG4vKipcbiAqIFNldCB1cmwgb2YgYXVkaW9cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbnB1dCAtIHBhdGh3YXkgdG8gc291bmRcbiAqL1xuY29uc3Qgc2V0VGltZXJBdWRpbyA9ICh2YWx1ZSkgPT4ge1xuICBjb25zdCB0aW1lckF1ZGlvID0gdmFsaWRhdGVUaW1lckF1ZGlvKHZhbHVlKTtcbiAgaWYgKHRpbWVyQXVkaW8gPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzZXR0aW5nc0VsZW1lbnQudGltZXJBdWRpbyA9IHRpbWVyQXVkaW87XG59O1xuXG4vKipcbiAqIE9wZW4gc2V0dGluZ3MgcG9wdXBcbiAqL1xuY29uc3Qgb3BlblBvcHVwID0gKCkgPT4ge1xuICAvLyBlbmFibGUgYXVkaW8gZWxlbWVudCwgaWdub3JlIGlmIGludGVycnVwdGVkXG4gIHRpbWVyQXVkaW9FbGVtZW50LnNyYyA9ICcnO1xuICB0aW1lckF1ZGlvRWxlbWVudC5wbGF5KCkuY2F0Y2goKCkgPT4gdHJ1ZSk7XG5cbiAgcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICBvdmVybGF5LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuXG4gIHNob3J0QnJlYWtJbnB1dC52YWx1ZSA9IGdldFNob3J0QnJlYWtMZW5ndGgoKTtcbiAgbG9uZ0JyZWFrSW5wdXQudmFsdWUgPSBnZXRMb25nQnJlYWtMZW5ndGgoKTtcbiAgdGltZXJBdWRpb0lucHV0LnZhbHVlID0gZ2V0VGltZXJBdWRpbygpO1xufTtcblxuLyoqXG4gKiBDbG9zZSBzZXR0aW5ncyBwb3B1cFxuICovXG5jb25zdCBjbG9zZVBvcHVwID0gKCkgPT4ge1xuICB0aW1lckF1ZGlvRWxlbWVudC5wYXVzZSgpO1xuICBwb3B1cEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gIG92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gIGVycm9yTWVzc2FnZXMuZm9yRWFjaCgobXNnKSA9PiB7XG4gICAgbXNnLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBTYXZlIGludGVydmFsIGxlbmd0aCAvIGF1ZGlvIHNldHRpbmdzLCBkaXNwbGF5IGVycm9yIGlmIGludmFsaWRcbiAqIEByZXR1cm4geyhudW1iZXJbXSB8IG51bGwpfSAtIG5ldyBpbnRlcnZhbCBsZW5ndGhzLCBudWxsIGlmIGVycm9yIG9jY3Vyc1xuICovXG5jb25zdCBzYXZlU2V0dGluZ3MgPSAoKSA9PiB7XG4gIGNvbnN0IG5ld1Nob3J0QnJlYWtMZW5ndGggPSB2YWxpZGF0ZVNob3J0QnJlYWtMZW5ndGgoc2hvcnRCcmVha0lucHV0LnZhbHVlKTtcbiAgY29uc3QgbmV3TG9uZ0JyZWFrTGVuZ3RoID0gdmFsaWRhdGVMb25nQnJlYWtMZW5ndGgobG9uZ0JyZWFrSW5wdXQudmFsdWUpO1xuICBjb25zdCB0aW1lckF1ZGlvID0gdmFsaWRhdGVUaW1lckF1ZGlvKHRpbWVyQXVkaW9JbnB1dC52YWx1ZSk7XG4gIGNvbnN0IGlzTmV3U2hvcnRCcmVha0xlbmd0aFZhbGlkID0gbmV3U2hvcnRCcmVha0xlbmd0aCAhPT0gbnVsbDtcbiAgY29uc3QgaXNOZXdMb25nQnJlYWtMZW5ndGhWYWxpZCA9IG5ld0xvbmdCcmVha0xlbmd0aCAhPT0gbnVsbDtcblxuICBlcnJvck1lc3NhZ2VzWzBdLnN0eWxlLmRpc3BsYXkgPSBpc05ld1Nob3J0QnJlYWtMZW5ndGhWYWxpZFxuICAgID8gJ25vbmUnXG4gICAgOiAnaW5pdGlhbCc7XG4gIGVycm9yTWVzc2FnZXNbMV0uc3R5bGUuZGlzcGxheSA9IGlzTmV3TG9uZ0JyZWFrTGVuZ3RoVmFsaWRcbiAgICA/ICdub25lJ1xuICAgIDogJ2luaXRpYWwnO1xuICBpZiAoIWlzTmV3U2hvcnRCcmVha0xlbmd0aFZhbGlkIHx8ICFpc05ld0xvbmdCcmVha0xlbmd0aFZhbGlkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzZXRTaG9ydEJyZWFrTGVuZ3RoKG5ld1Nob3J0QnJlYWtMZW5ndGgpO1xuICBzZXRMb25nQnJlYWtMZW5ndGgobmV3TG9uZ0JyZWFrTGVuZ3RoKTtcbiAgc2V0VGltZXJBdWRpbyh0aW1lckF1ZGlvKTtcbiAgZGlzcGF0Y2goQUNUSU9OUy5jaGFuZ2VTaG9ydEJyZWFrTGVuZ3RoLCBuZXdTaG9ydEJyZWFrTGVuZ3RoKTtcbiAgZGlzcGF0Y2goQUNUSU9OUy5jaGFuZ2VMb25nQnJlYWtMZW5ndGgsIG5ld0xvbmdCcmVha0xlbmd0aCk7XG4gIGRpc3BhdGNoKEFDVElPTlMuY2hhbmdlVGltZXJBdWRpbywgdGltZXJBdWRpbyk7XG4gIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShLRVlTLnNob3J0QnJlYWtMZW5ndGgsIG5ld1Nob3J0QnJlYWtMZW5ndGgpO1xuICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oS0VZUy5sb25nQnJlYWtMZW5ndGgsIG5ld0xvbmdCcmVha0xlbmd0aCk7XG4gIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShLRVlTLnRpbWVyQXVkaW8sIHRpbWVyQXVkaW8pO1xuICByZXR1cm4gW25ld1Nob3J0QnJlYWtMZW5ndGgsIG5ld0xvbmdCcmVha0xlbmd0aF07XG59O1xuXG4vLyBvYmplY3QgdG8gaG9sZCBmdW5jdGlvbiByZWZlcmVuY2VzXG4vLyBtYWlubHkgZm9yIG1vY2tpbmcgaW4gamVzdFxuY29uc3QgcG9wdXBGdW5jdGlvbnMgPSB7XG4gIG9wZW5Qb3B1cCxcbiAgY2xvc2VQb3B1cCxcbiAgc2F2ZVNldHRpbmdzLFxufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGVsZW1lbnQgdmFyaWFibGVzIGZvciBkaWZmZXJlbnQgZWxlbWVudHMgb2Ygc2V0dGluZ3MgY29tcG9uZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByb290IC0gcm9vdCBlbGVtZW50IG9mIHNldHRpbmdzIGNvbXBvbmVudFxuICovXG5jb25zdCBpbml0aWFsaXplRWxlbWVudHMgPSAocm9vdCkgPT4ge1xuICBzZXR0aW5nc0VsZW1lbnQgPSByb290O1xuICBjb25zdCB7IHNoYWRvd1Jvb3QgfSA9IHNldHRpbmdzRWxlbWVudDtcbiAgcG9wdXBFbGVtZW50ID0gc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcucG9wdXAtY29udGFpbmVyJyk7XG4gIHNob3J0QnJlYWtJbnB1dCA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignI3Nob3J0LWJyZWFrLWlucHV0Jyk7XG4gIGxvbmdCcmVha0lucHV0ID0gc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcjbG9uZy1icmVhay1pbnB1dCcpO1xuICB0aW1lckF1ZGlvSW5wdXQgPSBzaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJyN0aW1lci1hdWRpby1pbnB1dCcpO1xuICBlcnJvck1lc3NhZ2VzID0gc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yQWxsKCcuZXJyb3ItbWVzc2FnZScpO1xuICBzYXZlQnV0dG9uID0gc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcuc2F2ZS1idXR0b24nKTtcbiAgb3ZlcmxheSA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignI292ZXJsYXknKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBpbml0aWFsIHNldHRpbmdzIGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvb3QgLSBzZXR0aW5ncyBlbGVtZW50XG4gKi9cbmNvbnN0IGluaXRpYWxpemVQb3B1cCA9IChyb290KSA9PiB7XG4gIGNvbnN0IHsgc2hvcnRCcmVha0xlbmd0aCwgbG9uZ0JyZWFrTGVuZ3RoIH0gPSBpbml0aWFsaXplSW50ZXJ2YWxMZW5ndGhzKCk7XG4gIGluaXRpYWxpemVFbGVtZW50cyhyb290KTtcbiAgc2V0U2hvcnRCcmVha0xlbmd0aChzaG9ydEJyZWFrTGVuZ3RoKTtcbiAgc2V0TG9uZ0JyZWFrTGVuZ3RoKGxvbmdCcmVha0xlbmd0aCk7XG4gIGRpc3BhdGNoKEFDVElPTlMuY2hhbmdlU2hvcnRCcmVha0xlbmd0aCwgc2hvcnRCcmVha0xlbmd0aCk7XG4gIGRpc3BhdGNoKEFDVElPTlMuY2hhbmdlTG9uZ0JyZWFrTGVuZ3RoLCBsb25nQnJlYWtMZW5ndGgpO1xuXG4gIGNvbnN0IHNhdmVkVGltZXJBdWRpbyA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShLRVlTLnRpbWVyQXVkaW8pO1xuICBpZiAodmFsaWRhdGVUaW1lckF1ZGlvKHNhdmVkVGltZXJBdWRpbykgPT09IG51bGwpIHtcbiAgICBzZXRUaW1lckF1ZGlvKFRJTUVSX0FVRElPUy5jYWxtKTtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oS0VZUy50aW1lckF1ZGlvLCBUSU1FUl9BVURJT1MuY2FsbSk7XG4gICAgZGlzcGF0Y2goQUNUSU9OUy5jaGFuZ2VUaW1lckF1ZGlvLCBUSU1FUl9BVURJT1MuY2FsbSk7XG4gIH0gZWxzZSB7XG4gICAgc2V0VGltZXJBdWRpbyhzYXZlZFRpbWVyQXVkaW8pO1xuICAgIGRpc3BhdGNoKEFDVElPTlMuY2hhbmdlVGltZXJBdWRpbywgc2F2ZWRUaW1lckF1ZGlvKTtcbiAgfVxuXG4gIG92ZXJsYXkub25jbGljayA9IGNsb3NlUG9wdXA7XG5cbiAgc2F2ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBjb25zdCBuZXdCcmVha0xlbmd0aHMgPSBwb3B1cEZ1bmN0aW9ucy5zYXZlU2V0dGluZ3MoKTtcbiAgICBpZiAoIW5ld0JyZWFrTGVuZ3Rocykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwb3B1cEZ1bmN0aW9ucy5jbG9zZVBvcHVwKCk7XG4gICAgZGlzcGF0Y2goQUNUSU9OUy5jaGFuZ2VTaG9ydEJyZWFrTGVuZ3RoLCBuZXdCcmVha0xlbmd0aHNbMF0pO1xuICAgIGRpc3BhdGNoKEFDVElPTlMuY2hhbmdlTG9uZ0JyZWFrTGVuZ3RoLCBuZXdCcmVha0xlbmd0aHNbMV0pO1xuICB9KTtcblxuICB0aW1lckF1ZGlvSW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XG4gICAgdGltZXJBdWRpb0VsZW1lbnQucGF1c2UoKTtcbiAgICB0aW1lckF1ZGlvRWxlbWVudC5zcmMgPSB0aW1lckF1ZGlvSW5wdXQudmFsdWU7XG4gICAgdGltZXJBdWRpb0VsZW1lbnQucGxheSgpLmNhdGNoKCgpID0+IHRydWUpOyAvLyBpZ25vcmUgaWYgaW50ZXJydXB0ZWRcbiAgfTtcbn07XG5cbmV4cG9ydCB7XG4gIGluaXRpYWxpemVQb3B1cCxcbiAgb3BlblBvcHVwLFxuICBjbG9zZVBvcHVwLFxuICBzYXZlU2V0dGluZ3MsXG4gIHBvcHVwRnVuY3Rpb25zLFxuICBnZXRTaG9ydEJyZWFrTGVuZ3RoLFxuICBnZXRMb25nQnJlYWtMZW5ndGgsXG4gIGdldFRpbWVyQXVkaW8sXG4gIHNldFNob3J0QnJlYWtMZW5ndGgsXG4gIHNldExvbmdCcmVha0xlbmd0aCxcbiAgc2V0VGltZXJBdWRpbyxcbn07XG4iLCIvKipcbiAqIEBmaWxlIE1hbmFnZSBkaXNwbGF5aW5nIGFubm91bmNlbWVudHNcbiAqL1xuXG5pbXBvcnQgeyBkaXNwYXRjaCwgc3Vic2NyaWJlIH0gZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB7IEFDVElPTlMsIEFOTk9VTkNFTUVOVFMsIElOVEVSVkFMUyB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XG5cbmxldCBhbm5vdW5jZW1lbnRDb250YWluZXI7XG5sZXQgYW5ub3VuY2VtZW50RWxlbWVudDtcbmxldCB5ZXNCdXR0b247XG5sZXQgbm9CdXR0b247XG5cbi8qKlxuICogU2V0IGFuIGFubm91bmNlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGFubm91bmNlbWVudCAtIGFubm91bmNlbWVudCB0byBkaXNwbGF5XG4gKi9cbmNvbnN0IHNldEFubm91bmNlbWVudCA9IChhbm5vdW5jZW1lbnQpID0+IHtcbiAgYW5ub3VuY2VtZW50RWxlbWVudC5pbm5lclRleHQgPSBhbm5vdW5jZW1lbnQ7XG59O1xuXG4vKipcbiAqIFRvZ2dsZSB2aXNpYmlsaXR5IG9mIGJ1dHRvbnNcbiAqIEBwYXJhbSB7J3Zpc2libGUnIHwgJ2hpZGRlbid9IHZpc2liaWxpdHkgLSBidXR0b24gdmlzaWJpbGl0eVxuICovXG5jb25zdCBzZXRCdXR0b25WaXNpYmlsaXR5ID0gKHZpc2liaWxpdHkpID0+IHtcbiAgaWYgKHZpc2liaWxpdHkgPT09ICd2aXNpYmxlJykge1xuICAgIHllc0J1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICBub0J1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgfSBlbHNlIHtcbiAgICB5ZXNCdXR0b24uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgbm9CdXR0b24uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gIH1cbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhbm5vdW5jZW1lbnQgZWxlbWVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYW5ub3VuY2VtZW50RWxlbWVudCAtIGFubm91bmNlbWVudCBlbGVtZW50XG4gKi9cbmNvbnN0IGluaXRpYWxpemVBbm5vdW5jZW1lbnQgPSAoY29udGFpbmVyRWxlbWVudCkgPT4ge1xuICBhbm5vdW5jZW1lbnRDb250YWluZXIgPSBjb250YWluZXJFbGVtZW50O1xuICBhbm5vdW5jZW1lbnRFbGVtZW50ID0gYW5ub3VuY2VtZW50Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5hbm5vdW5jZW1lbnQnKTtcbiAgeWVzQnV0dG9uID0gYW5ub3VuY2VtZW50Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5hbm5vdW5jZW1lbnQteWVzLWJ1dHRvbicpO1xuICBub0J1dHRvbiA9IGFubm91bmNlbWVudENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuYW5ub3VuY2VtZW50LW5vLWJ1dHRvbicpO1xuICB5ZXNCdXR0b24ub25tb3VzZWRvd24gPSAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBub0J1dHRvbi5vbm1vdXNlZG93biA9IChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgeWVzQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiBkaXNwYXRjaChBQ1RJT05TLmNvbXBsZXRlU2VsZWN0ZWRUYXNrKTtcbiAgbm9CdXR0b24ub25jbGljayA9ICgpID0+IGRpc3BhdGNoKEFDVElPTlMuZG9Ob3RDb21wbGV0ZVNlbGVjdGVkVGFzayk7XG5cbiAgc2V0QW5ub3VuY2VtZW50KEFOTk9VTkNFTUVOVFMuaW50cm9kdWN0aW9uKTtcbiAgc3Vic2NyaWJlKHtcbiAgICBbQUNUSU9OUy5jaGFuZ2VTZXNzaW9uXTogKHNlc3Npb25TdGF0ZSkgPT4ge1xuICAgICAgaWYgKHNlc3Npb25TdGF0ZS5zZXNzaW9uID09PSAnaW5hY3RpdmUnKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBzZXNzaW9uU3RhdGUuY3VycmVudFNlbGVjdGVkVGFzayAhPT0gbnVsbCB8fFxuICAgICAgICAgIHNlc3Npb25TdGF0ZS5jb21wbGV0ZWRUYXNrcy5sZW5ndGggPiAwXG4gICAgICAgICkge1xuICAgICAgICAgIHNldEFubm91bmNlbWVudChBTk5PVU5DRU1FTlRTLmVuZE9mU2Vzc2lvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0QW5ub3VuY2VtZW50KEFOTk9VTkNFTUVOVFMubm9UYXNrc0F2YWlsYWJsZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0QnV0dG9uVmlzaWJpbGl0eSgnaGlkZGVuJyk7XG4gICAgICB9IGVsc2UgaWYgKHNlc3Npb25TdGF0ZS5zZXNzaW9uID09PSAnYWN0aXZlJykge1xuICAgICAgICBzZXRBbm5vdW5jZW1lbnQoQU5OT1VOQ0VNRU5UUy5wb21vZG9yb0ludGVydmFsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtBQ1RJT05TLmNoYW5nZUN1cnJlbnRJbnRlcnZhbF06IChzZXNzaW9uU3RhdGUpID0+IHtcbiAgICAgIGlmIChzZXNzaW9uU3RhdGUuc2Vzc2lvbiA9PT0gJ2FjdGl2ZScpIHtcbiAgICAgICAgc3dpdGNoIChzZXNzaW9uU3RhdGUuY3VycmVudEludGVydmFsKSB7XG4gICAgICAgICAgY2FzZSBJTlRFUlZBTFMucG9tb2Rvcm86XG4gICAgICAgICAgICBzZXRBbm5vdW5jZW1lbnQoQU5OT1VOQ0VNRU5UUy5wb21vZG9yb0ludGVydmFsKTtcbiAgICAgICAgICAgIFt5ZXNCdXR0b24sIG5vQnV0dG9uXS5mb3JFYWNoKChidG4pID0+IHtcbiAgICAgICAgICAgICAgYnRuLmNsYXNzTGlzdC5hZGQoJ3BvbW9kb3JvJyk7XG4gICAgICAgICAgICAgIGJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdzaG9ydC1icmVhaycpO1xuICAgICAgICAgICAgICBidG4uY2xhc3NMaXN0LnJlbW92ZSgnbG9uZy1icmVhaycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIElOVEVSVkFMUy5zaG9ydEJyZWFrOlxuICAgICAgICAgICAgc2V0QW5ub3VuY2VtZW50KEFOTk9VTkNFTUVOVFMudGFza0NvbXBsZXRpb25RdWVzdGlvbik7XG4gICAgICAgICAgICBzZXRCdXR0b25WaXNpYmlsaXR5KCd2aXNpYmxlJyk7XG4gICAgICAgICAgICBbeWVzQnV0dG9uLCBub0J1dHRvbl0uZm9yRWFjaCgoYnRuKSA9PiB7XG4gICAgICAgICAgICAgIGJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdwb21vZG9ybycpO1xuICAgICAgICAgICAgICBidG4uY2xhc3NMaXN0LmFkZCgnc2hvcnQtYnJlYWsnKTtcbiAgICAgICAgICAgICAgYnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2xvbmctYnJlYWsnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBJTlRFUlZBTFMubG9uZ0JyZWFrOlxuICAgICAgICAgICAgc2V0QW5ub3VuY2VtZW50KEFOTk9VTkNFTUVOVFMudGFza0NvbXBsZXRpb25RdWVzdGlvbik7XG4gICAgICAgICAgICBzZXRCdXR0b25WaXNpYmlsaXR5KCd2aXNpYmxlJyk7XG4gICAgICAgICAgICBbeWVzQnV0dG9uLCBub0J1dHRvbl0uZm9yRWFjaCgoYnRuKSA9PiB7XG4gICAgICAgICAgICAgIGJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdwb21vZG9ybycpO1xuICAgICAgICAgICAgICBidG4uY2xhc3NMaXN0LnJlbW92ZSgnc2hvcnQtYnJlYWsnKTtcbiAgICAgICAgICAgICAgYnRuLmNsYXNzTGlzdC5hZGQoJ2xvbmctYnJlYWsnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgW0FDVElPTlMuY2hhbmdlU2VsZWN0ZWRUYXNrXTogKHNlc3Npb25TdGF0ZSkgPT4ge1xuICAgICAgaWYgKHNlc3Npb25TdGF0ZS5jdXJyZW50U2VsZWN0ZWRUYXNrICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChzZXNzaW9uU3RhdGUuc2Vzc2lvbiA9PT0gJ2luYWN0aXZlJykge1xuICAgICAgICAgIHNldEFubm91bmNlbWVudChBTk5PVU5DRU1FTlRTLmNsaWNrVG9TdGFydCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2Vzc2lvblN0YXRlLnNlc3Npb24gPT09ICdhY3RpdmUnKSB7XG4gICAgICAgICAgaWYgKHNlc3Npb25TdGF0ZS5jdXJyZW50SW50ZXJ2YWwgPT09IElOVEVSVkFMUy5zaG9ydEJyZWFrKSB7XG4gICAgICAgICAgICBzZXRBbm5vdW5jZW1lbnQoQU5OT1VOQ0VNRU5UUy5zaG9ydEJyZWFrSW50ZXJ2YWwpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc2Vzc2lvblN0YXRlLmN1cnJlbnRJbnRlcnZhbCA9PT0gSU5URVJWQUxTLmxvbmdCcmVhaykge1xuICAgICAgICAgICAgc2V0QW5ub3VuY2VtZW50KEFOTk9VTkNFTUVOVFMubG9uZ0JyZWFrSW50ZXJ2YWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgW0FDVElPTlMuY29tcGxldGVTZWxlY3RlZFRhc2tdOiAoKSA9PiB7XG4gICAgICBzZXRCdXR0b25WaXNpYmlsaXR5KCdoaWRkZW4nKTtcbiAgICAgIHNldEFubm91bmNlbWVudChBTk5PVU5DRU1FTlRTLnNlbGVjdE5ld1Rhc2spO1xuICAgIH0sXG4gICAgW0FDVElPTlMuZG9Ob3RDb21wbGV0ZVNlbGVjdGVkVGFza106IChzZXNzaW9uU3RhdGUpID0+IHtcbiAgICAgIHNldEJ1dHRvblZpc2liaWxpdHkoJ2hpZGRlbicpO1xuICAgICAgaWYgKHNlc3Npb25TdGF0ZS5jdXJyZW50SW50ZXJ2YWwgPT09IElOVEVSVkFMUy5zaG9ydEJyZWFrKSB7XG4gICAgICAgIHNldEFubm91bmNlbWVudChBTk5PVU5DRU1FTlRTLnNob3J0QnJlYWtJbnRlcnZhbCk7XG4gICAgICB9IGVsc2UgaWYgKHNlc3Npb25TdGF0ZS5jdXJyZW50SW50ZXJ2YWwgPT09IElOVEVSVkFMUy5sb25nQnJlYWspIHtcbiAgICAgICAgc2V0QW5ub3VuY2VtZW50KEFOTk9VTkNFTUVOVFMubG9uZ0JyZWFrSW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgaW5pdGlhbGl6ZUFubm91bmNlbWVudCwgc2V0QW5ub3VuY2VtZW50LCBzZXRCdXR0b25WaXNpYmlsaXR5IH07XG4iLCIvKipcbiAqIEBmaWxlIE1hbmFnZSBDb25maXJtYXRpb24gUG9wLXVwIGZvciBwYWdlXG4gKi9cblxuaW1wb3J0IHsgZGlzcGF0Y2ggfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgQUNUSU9OUyB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XG5cbmxldCBjb25maXJtYXRpb25PdmVybGF5O1xubGV0IGNvbmZpcm1hdGlvblBvcHVwO1xubGV0IG5vQnV0dG9uO1xubGV0IHllc0J1dHRvbjtcblxuLyoqXG4gKiBPcGVuIHRoZSBjb25maXJtYXRpb24gcG9wdXBcbiAqL1xuY29uc3Qgb3BlblBvcHVwID0gKCkgPT4ge1xuICBjb25maXJtYXRpb25PdmVybGF5LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xufTtcblxuLyoqXG4gKiBDbG9zZSB0aGUgY29uZmlybWF0aW9uIHBvcHVwXG4gKi9cbmNvbnN0IGNsb3NlUG9wdXAgPSAoKSA9PiB7XG4gIGNvbmZpcm1hdGlvbk92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgZWxlbWVudCB2YXJpYWJsZXMgZm9yIGRpZmZlcmVudCBlbGVtZW50cyBvZiBjb25maXJtYXRpb24gcG9wdXBcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvb3QgLSBjb25maXJtYXRpb24gcG9wdXBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uQWNjZXB0Q2FsbGJhY2sgLSBjYWxsYmFjayB3aGVuIGNvbmZpcm1hdGlvbiBpcyBhY2NlcHRlZFxuICovXG5jb25zdCBpbml0aWFsaXplRWxlbWVudHMgPSAocm9vdCkgPT4ge1xuICBjb25maXJtYXRpb25PdmVybGF5ID0gcm9vdDtcbiAgY29uZmlybWF0aW9uUG9wdXAgPSBjb25maXJtYXRpb25PdmVybGF5LnF1ZXJ5U2VsZWN0b3IoJyNjb25maXJtYXRpb24tcG9wdXAnKTtcbiAgbm9CdXR0b24gPSBjb25maXJtYXRpb25Qb3B1cC5xdWVyeVNlbGVjdG9yKCcuY29uZmlybWF0aW9uLW5vLWJ1dHRvbicpO1xuICB5ZXNCdXR0b24gPSBjb25maXJtYXRpb25Qb3B1cC5xdWVyeVNlbGVjdG9yKCcuY29uZmlybWF0aW9uLXllcy1idXR0b24nKTtcbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBwb3B1cFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm9vdCAtIGNvbmZpcm1hdGlvbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkFjY2VwdENhbGxiYWNrIC0gY2FsbGJhY2sgd2hlbiBjb25maXJtYXRpb24gaXMgYWNjZXB0ZWRcbiAqL1xuY29uc3QgaW5pdGlhbGl6ZVBvcHVwID0gKHJvb3QpID0+IHtcbiAgaW5pdGlhbGl6ZUVsZW1lbnRzKHJvb3QpO1xuICBub0J1dHRvbi5vbm1vdXNlZG93biA9IChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCk7XG4gIHllc0J1dHRvbi5vbm1vdXNlZG93biA9IChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCk7XG4gIHllc0J1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuICAgIGNsb3NlUG9wdXAoKTtcbiAgICBkaXNwYXRjaChBQ1RJT05TLmNoYW5nZVNlc3Npb24sICdpbmFjdGl2ZScpO1xuICB9O1xuICBub0J1dHRvbi5vbmNsaWNrID0gY2xvc2VQb3B1cDtcbiAgY29uZmlybWF0aW9uT3ZlcmxheS5vbmNsaWNrID0gY2xvc2VQb3B1cDtcbiAgY29uZmlybWF0aW9uUG9wdXAub25jbGljayA9IChlKSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpO1xufTtcblxuZXhwb3J0IHsgaW5pdGlhbGl6ZVBvcHVwLCBvcGVuUG9wdXAsIGNsb3NlUG9wdXAgfTtcbiIsIi8qKlxuICogQGZpbGUgTWFuYWdlIFN1bW1hcnkgUG9wLXVwIGZvciBwYWdlXG4gKi9cblxuLyoqXG4gKiBBIHRhc2sgb2JqZWN0IGNvbnRhaW5pbmcgYSBuYW1lIGFuZCBwb21vZG9yb3Mgc3RhdHNcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFRhc2tcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lICAgICAgICAgICAgICAgIC0gbmFtZSBvZiB0aGUgdGFza1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHVzZWRQb21vZG9yb3MgICAgICAgLSBwb21vZG9yb3MgdXNlZCBzbyBmYXJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBlc3RpbWF0ZWRQb21vZG9yb3MgIC0gZXN0aW1hdGVkIG51bWJlciBvZiBwb21vcyBuZWVkZWRcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2VsZWN0ZWQgICAgICAgICAgIC0gd2hldGhlciB0YXNrIGlzIHNlbGVjdGVkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGNvbXBsZXRlZCAgICAgICAgICAtIHdoZXRoZXIgdGFzayBpcyBjb21wbGV0ZWRcbiAqL1xuXG5pbXBvcnQgeyBzdWJzY3JpYmUgfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHtcbiAgY3JlYXRlRWxlbWVudCxcbiAgZ2V0SG91cnNNaW51dGVzQW5kU2Vjb25kcyxcbiAgZ2V0VG90YWxTZXNzaW9uVGltZSxcbn0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5cbmxldCBzdW1tYXJ5T3ZlcmxheTtcbmxldCBzdW1tYXJ5UG9wdXA7XG5sZXQgdGFza1N1bW1hcnlMaXN0O1xubGV0IHBvbW9kb3Jvc1N0YXRzRWxlbWVudDtcbmxldCB0YXNrc1N0YXRzRWxlbWVudDtcbmxldCBzZXNzaW9uVGltZUVsZW1lbnQ7XG5sZXQgY2xvc2VTdW1tYXJ5QnV0dG9uO1xuXG4vKipcbiAqIE9wZW4gc3VtbWFyeSBwb3B1cFxuICovXG5jb25zdCBvcGVuUG9wdXAgPSAoKSA9PiB7XG4gIHN1bW1hcnlPdmVybGF5LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xufTtcblxuLyoqXG4gKiBDbG9zZSBzdW1tYXJ5IHBvcHVwXG4gKi9cbmNvbnN0IGNsb3NlUG9wdXAgPSAoKSA9PiB7XG4gIHN1bW1hcnlPdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICB0YXNrU3VtbWFyeUxpc3QuaW5uZXJIVE1MID0gJyc7XG59O1xuXG4vKipcbiAqIENyZWF0ZSB0YXNrIHN1bW1hcnkgZWxlbWVudFxuICogQHBhcmFtIHtUYXNrfSB0YXNrIC0gdGFzayB0byBzdW1tYXJpemVcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAtIHRhc2sgc3VtbWFyeSBlbGVtZW50XG4gKi9cbmNvbnN0IGNyZWF0ZVRhc2tTdW1tYXJ5ID0gKHRhc2spID0+IHtcbiAgY29uc3QgeyBuYW1lLCB1c2VkUG9tb2Rvcm9zLCBlc3RpbWF0ZWRQb21vZG9yb3MsIHN0YXR1cyB9ID0gdGFzaztcblxuICBjb25zdCB0YXNrU3VtbWFyeSA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICBjbGFzc05hbWU6IGB0YXNrLXN1bW1hcnktaXRlbSAke3N0YXR1c31gLFxuICB9KTtcbiAgY29uc3QgbmFtZUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgIGNsYXNzTmFtZTogJ3Rhc2stc3VtbWFyeS1uYW1lJyxcbiAgICBpbm5lclRleHQ6IG5hbWUsXG4gIH0pO1xuICBjb25zdCBwb21vZG9yb3NFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICBjbGFzc05hbWU6ICd0YXNrLXN1bW1hcnktcG9tb2Rvcm9zJyxcbiAgICBpbm5lclRleHQ6IGAke3VzZWRQb21vZG9yb3N9LyR7ZXN0aW1hdGVkUG9tb2Rvcm9zfWAsXG4gIH0pO1xuICB0YXNrU3VtbWFyeS5hcHBlbmQobmFtZUVsZW1lbnQsIHBvbW9kb3Jvc0VsZW1lbnQpO1xuXG4gIHJldHVybiB0YXNrU3VtbWFyeTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIHN1bW1hcnkgb2YgdGFza3NcbiAqIEBwYXJhbSB7VGFza1tdfSBhbGxUYXNrcyAtIGFsbCB0YXNrc1xuICogQHBhcmFtIHtUYXNrW119IGNvbXBsZXRlZFRhc2tzIC0gY29tcGxldGVkIHRhc2tzXG4gKi9cbmNvbnN0IGNyZWF0ZVRhc2tTdW1tYXJ5TGlzdCA9IChhbGxUYXNrcywgY29tcGxldGVkVGFza3MpID0+IHtcbiAgY29uc3QgY29tcGxldGVkVW5kZXJCdWRnZXRUYXNrcyA9IGFsbFRhc2tzXG4gICAgLmZpbHRlcihcbiAgICAgICh0YXNrKSA9PlxuICAgICAgICB0YXNrLmNvbXBsZXRlZCAmJlxuICAgICAgICB0YXNrLnVzZWRQb21vZG9yb3MgPD0gdGFzay5lc3RpbWF0ZWRQb21vZG9yb3MgJiZcbiAgICAgICAgY29tcGxldGVkVGFza3Muc29tZSgob3RoZXJUYXNrKSA9PiBvdGhlclRhc2submFtZSA9PT0gdGFzay5uYW1lKSxcbiAgICApXG4gICAgLm1hcCgodCkgPT4gKHtcbiAgICAgIC4uLnQsXG4gICAgICBzdGF0dXM6ICdjb21wbGV0ZSB1bmRlci1idWRnZXQnLFxuICAgIH0pKTtcbiAgY29uc3QgY29tcGxldGVkT3ZlckJ1ZGdldFRhc2tzID0gYWxsVGFza3NcbiAgICAuZmlsdGVyKFxuICAgICAgKHRhc2spID0+XG4gICAgICAgIHRhc2suY29tcGxldGVkICYmXG4gICAgICAgIHRhc2sudXNlZFBvbW9kb3JvcyA+IHRhc2suZXN0aW1hdGVkUG9tb2Rvcm9zICYmXG4gICAgICAgIGNvbXBsZXRlZFRhc2tzLnNvbWUoKG90aGVyVGFzaykgPT4gb3RoZXJUYXNrLm5hbWUgPT09IHRhc2submFtZSksXG4gICAgKVxuICAgIC5tYXAoKHQpID0+ICh7XG4gICAgICAuLi50LFxuICAgICAgc3RhdHVzOiAnY29tcGxldGUgb3Zlci1idWRnZXQnLFxuICAgIH0pKTtcbiAgY29uc3QgaW5Qcm9ncmVzc1Rhc2tzID0gYWxsVGFza3NcbiAgICAuZmlsdGVyKCh0KSA9PiAhdC5jb21wbGV0ZWQgJiYgdC51c2VkUG9tb2Rvcm9zID4gMClcbiAgICAubWFwKCh0KSA9PiAoeyAuLi50LCBzdGF0dXM6ICdpbi1wcm9ncmVzcycgfSkpO1xuICBjb25zdCBub3RTdGFydGVkVGFza3MgPSBhbGxUYXNrc1xuICAgIC5maWx0ZXIoKHQpID0+ICF0LmNvbXBsZXRlZCAmJiB0LnVzZWRQb21vZG9yb3MgPT09IDApXG4gICAgLm1hcCgodCkgPT4gKHsgLi4udCwgc3RhdHVzOiAnbm90LXN0YXJ0ZWQnIH0pKTtcbiAgY29uc3QgY29tcGxldGVkRHVyaW5nUGFzdFRhc2tzID0gYWxsVGFza3NcbiAgICAuZmlsdGVyKFxuICAgICAgKHRhc2spID0+XG4gICAgICAgIHRhc2suY29tcGxldGVkICYmXG4gICAgICAgICFjb21wbGV0ZWRUYXNrcy5zb21lKChvdGhlclRhc2spID0+IG90aGVyVGFzay5uYW1lID09PSB0YXNrLm5hbWUpLFxuICAgIClcbiAgICAubWFwKCh0KSA9PiAoeyAuLi50LCBzdGF0dXM6ICdjb21wbGV0ZSBvbGQnIH0pKTtcbiAgW1xuICAgIC4uLmNvbXBsZXRlZFVuZGVyQnVkZ2V0VGFza3MsXG4gICAgLi4uY29tcGxldGVkT3ZlckJ1ZGdldFRhc2tzLFxuICAgIC4uLmluUHJvZ3Jlc3NUYXNrcyxcbiAgICAuLi5ub3RTdGFydGVkVGFza3MsXG4gICAgLi4uY29tcGxldGVkRHVyaW5nUGFzdFRhc2tzLFxuICBdLmZvckVhY2goKHRhc2spID0+IHtcbiAgICBjb25zdCB0YXNrU3VtbWFyeSA9IGNyZWF0ZVRhc2tTdW1tYXJ5KHRhc2spO1xuICAgIHRhc2tTdW1tYXJ5TGlzdC5hcHBlbmQodGFza1N1bW1hcnkpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIEFjY2VzcyBhbGwgdGhlIHNoYWRvdyByb290IGVsZW1lbnRzIGFuZCBzZXQgdGhlIHN1bW1hcnkgZWxlbWVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm9vdCAtIHRoZSBzdW1tYXJ5IGVsZW1lbnRcbiAqL1xuY29uc3QgaW5pdGlhbGl6ZUVsZW1lbnRzID0gKHJvb3QpID0+IHtcbiAgc3VtbWFyeU92ZXJsYXkgPSByb290O1xuICBzdW1tYXJ5UG9wdXAgPSBzdW1tYXJ5T3ZlcmxheS5xdWVyeVNlbGVjdG9yKCcjc3VtbWFyeS1wb3B1cCcpO1xuICB0YXNrU3VtbWFyeUxpc3QgPSBzdW1tYXJ5T3ZlcmxheS5xdWVyeVNlbGVjdG9yKCcudGFzay1zdW1tYXJ5LWxpc3QnKTtcbiAgcG9tb2Rvcm9zU3RhdHNFbGVtZW50ID0gc3VtbWFyeU92ZXJsYXkucXVlcnlTZWxlY3RvcignI3N1bW1hcnktcG9tb2Rvcm9zJyk7XG4gIHRhc2tzU3RhdHNFbGVtZW50ID0gc3VtbWFyeU92ZXJsYXkucXVlcnlTZWxlY3RvcignI3N1bW1hcnktdGFza3MnKTtcbiAgc2Vzc2lvblRpbWVFbGVtZW50ID0gc3VtbWFyeU92ZXJsYXkucXVlcnlTZWxlY3RvcignI3N1bW1hcnktdGltZScpO1xuICBjbG9zZVN1bW1hcnlCdXR0b24gPSBzdW1tYXJ5T3ZlcmxheS5xdWVyeVNlbGVjdG9yKCcuc3VtbWFyeS1jbG9zZS1idXR0b24nKTtcbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBwb3B1cFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm9vdCAtIHN1bW1hcnkgcG9wdXAgZWxlbWVudFxuICogQHBhcmFtIHtUYXNrW119IHRhc2tzIC0gdGFza3MgdG8gc3VtbWFyaXplXG4gKi9cbmNvbnN0IGluaXRpYWxpemVQb3B1cCA9IChyb290LCB0YXNrcykgPT4ge1xuICBpbml0aWFsaXplRWxlbWVudHMocm9vdCk7XG4gIGNvbnN0IHtcbiAgICBjdXJyZW50SW50ZXJ2YWwsXG4gICAgY3VycmVudFRpbWUsXG4gICAgY29tcGxldGVkVGFza3MsXG4gICAgbnVtYmVyT2ZQb21vZG9yb3NDb21wbGV0ZWQsXG4gIH0gPSBzdWJzY3JpYmUoKTtcblxuICBjcmVhdGVUYXNrU3VtbWFyeUxpc3QodGFza3MsIGNvbXBsZXRlZFRhc2tzKTtcbiAgY29uc3QgdG90YWxTZXNzaW9uVGltZSA9IGdldFRvdGFsU2Vzc2lvblRpbWUobnVtYmVyT2ZQb21vZG9yb3NDb21wbGV0ZWQsIHtcbiAgICBpbnRlcnZhbE5hbWU6IGN1cnJlbnRJbnRlcnZhbCxcbiAgICB0aW1lUmVtYWluaW5nOiBjdXJyZW50VGltZSxcbiAgfSk7XG4gIHBvbW9kb3Jvc1N0YXRzRWxlbWVudC5pbm5lclRleHQgPSBgTnVtYmVyIG9mIHBvbW9kb3JvcyBjb21wbGV0ZWQ6ICR7bnVtYmVyT2ZQb21vZG9yb3NDb21wbGV0ZWR9YDtcbiAgdGFza3NTdGF0c0VsZW1lbnQuaW5uZXJUZXh0ID0gYE51bWJlciBvZiB0YXNrcyBjb21wbGV0ZWQ6ICR7Y29tcGxldGVkVGFza3MubGVuZ3RofWA7XG4gIHNlc3Npb25UaW1lRWxlbWVudC5pbm5lclRleHQgPSBgVG90YWwgc2Vzc2lvbiB0aW1lOiAke2dldEhvdXJzTWludXRlc0FuZFNlY29uZHMoXG4gICAgdG90YWxTZXNzaW9uVGltZSxcbiAgKX1gO1xuXG4gIGNsb3NlU3VtbWFyeUJ1dHRvbi5vbmNsaWNrID0gY2xvc2VQb3B1cDtcbiAgY2xvc2VTdW1tYXJ5QnV0dG9uLm9ubW91c2Vkb3duID0gKGUpID0+IGUucHJldmVudERlZmF1bHQoKTtcbiAgc3VtbWFyeU92ZXJsYXkub25jbGljayA9IGNsb3NlUG9wdXA7XG4gIHN1bW1hcnlQb3B1cC5vbmNsaWNrID0gKGUpID0+IGUuc3RvcFByb3BhZ2F0aW9uKCk7XG59O1xuXG5leHBvcnQgeyBpbml0aWFsaXplUG9wdXAsIG9wZW5Qb3B1cCwgY2xvc2VQb3B1cCB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tYXdhaXQtaW4tbG9vcCAqL1xuaW1wb3J0IHsgZGlzcGF0Y2gsIHN1YnNjcmliZSB9IGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgeyBBQ1RJT05TLCBJTlRFUlZBTFMgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xuaW1wb3J0IHsgdGljayB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgb3BlblBvcHVwIGFzIG9wZW5Db25maXJtYXRpb25Qb3B1cCB9IGZyb20gJy4vY29uZmlybWF0aW9uUG9wdXAnO1xuaW1wb3J0IHsgb3BlblBvcHVwIGFzIG9wZW5TZXR0aW5nc1BvcHVwIH0gZnJvbSAnLi9zZXR0aW5ncyc7XG5pbXBvcnQge1xuICBpbml0aWFsaXplUG9wdXAgYXMgaW5pdGlhbGl6ZVN1bW1hcnlQb3B1cCxcbiAgb3BlblBvcHVwIGFzIG9wZW5TdW1tYXJ5UG9wdXAsXG59IGZyb20gJy4vc3VtbWFyeVBvcHVwJztcbmltcG9ydCB7IGdldFRhc2tzIH0gZnJvbSAnLi90YXNrTGlzdCc7XG5cbmxldCBzZXNzaW9uO1xubGV0IG51bWJlck9mUG9tb2Rvcm9zQ29tcGxldGVkO1xubGV0IGN1cnJlbnRUaW1lO1xubGV0IGN1cnJlbnRJbnRlcnZhbDtcbmxldCBjdXJyZW50U2VsZWN0ZWRUYXNrO1xubGV0IHBvbW9kb3JvTGVuZ3RoO1xubGV0IHNob3J0QnJlYWtMZW5ndGg7XG5sZXQgbG9uZ0JyZWFrTGVuZ3RoO1xubGV0IHRpbWVyQXVkaW87XG5sZXQgd2FzQW5ub3VuY2VtZW50QnV0dG9uQ2xpY2tlZDtcblxuLyoqXG4gKiBTdGFydHMgYW5kIHJ1bnMgaW50ZXJ2YWwgdW50aWwgaW50ZXJ2YWwgaXMgY29tcGxldGVkXG4gKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWxMZW5ndGggLSBsZW5ndGggb2YgaW50ZXJ2YWwgKGluIHNlY29uZHMpXG4gKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fSAtIGltcGxpY2l0bHkgcmV0dXJucyBQcm9taXNlIGFmdGVyIGN1cnJlbnRUaW1lIHJlYWNoZXMgMFxuICovXG5jb25zdCBzdGFydEludGVydmFsID0gYXN5bmMgKGludGVydmFsTGVuZ3RoKSA9PiB7XG4gIGRpc3BhdGNoKEFDVElPTlMuY2hhbmdlQ3VycmVudFRpbWUsIGludGVydmFsTGVuZ3RoKTtcbiAgd2hpbGUgKGN1cnJlbnRUaW1lID49IDApIHtcbiAgICAvLyBxdWl0IGlmIHNlc3Npb24gc3RvcHNcbiAgICBpZiAoc2Vzc2lvbiA9PT0gJ2luYWN0aXZlJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhd2FpdCB0aWNrKDEpO1xuICAgIGlmIChzZXNzaW9uID09PSAnYWN0aXZlJykge1xuICAgICAgZGlzcGF0Y2goQUNUSU9OUy5jaGFuZ2VDdXJyZW50VGltZSwgY3VycmVudFRpbWUgLSAxKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgcG9tb2Rvcm8gYXBwLCBkaXNwYXRjaGVzIGFjdGlvbnMgdG8gY29tcG9uZW50cyBkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnQgaW50ZXJ2YWxcbiAqL1xuY29uc3Qgc3RhcnRTZXNzaW9uID0gYXN5bmMgKCkgPT4ge1xuICAvLyBjb250aW51ZSBsb29waW5nIGlmIHNlc3Npb24gaGFzIG5vdCBiZWVuIGVuZGVkXG4gIHdoaWxlIChzZXNzaW9uID09PSAnYWN0aXZlJykge1xuICAgIGlmIChjdXJyZW50SW50ZXJ2YWwgPT09IElOVEVSVkFMUy5wb21vZG9ybykge1xuICAgICAgLy8gc3RvcCBpZiBubyB0YXNrcyBhdmFpbGFibGVcbiAgICAgIGlmICghY3VycmVudFNlbGVjdGVkVGFzaykge1xuICAgICAgICBkaXNwYXRjaChBQ1RJT05TLmNoYW5nZVNlc3Npb24sICdpbmFjdGl2ZScpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIHN0YXJ0IHBvbW9kb3JvLCBzdG9wIGlmIGludGVydmFsIGlzIGludGVycnVwdGVkXG4gICAgICBjb25zdCBzaG91bGRDb250aW51ZSA9IGF3YWl0IHN0YXJ0SW50ZXJ2YWwoNjAgKiBwb21vZG9yb0xlbmd0aCk7XG4gICAgICBpZiAoIXNob3VsZENvbnRpbnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGlzcGF0Y2goQUNUSU9OUy5pbmNyZW1lbnRTZWxlY3RlZFRhc2spO1xuICAgICAgZGlzcGF0Y2goQUNUSU9OUy5jaGFuZ2VOdW1iZXJPZlBvbW9kb3JvcywgbnVtYmVyT2ZQb21vZG9yb3NDb21wbGV0ZWQgKyAxKTtcblxuICAgICAgLy8gY2hlY2sgaWYgYnJlYWsgc2hvdWxkIGJlIHNob3J0IG9yIGxvbmdcbiAgICAgIGNvbnN0IHNob3VsZEJlTG9uZ0JyZWFrID1cbiAgICAgICAgbnVtYmVyT2ZQb21vZG9yb3NDb21wbGV0ZWQgPiAwICYmIG51bWJlck9mUG9tb2Rvcm9zQ29tcGxldGVkICUgNCA9PT0gMDtcbiAgICAgIGNvbnN0IG5leHRJbnRlcnZhbCA9IHNob3VsZEJlTG9uZ0JyZWFrXG4gICAgICAgID8gSU5URVJWQUxTLmxvbmdCcmVha1xuICAgICAgICA6IElOVEVSVkFMUy5zaG9ydEJyZWFrO1xuICAgICAgZGlzcGF0Y2goQUNUSU9OUy5jaGFuZ2VDdXJyZW50SW50ZXJ2YWwsIG5leHRJbnRlcnZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhc0Fubm91bmNlbWVudEJ1dHRvbkNsaWNrZWQgPSBmYWxzZTtcbiAgICAgIC8vIHN0YXJ0IGJyZWFrLCBzdG9wIGlmIGludGVydmFsIGlzIGludGVycnVwdGVkXG4gICAgICBjb25zdCBuZXh0SW50ZXJ2YWxMZW5ndGggPVxuICAgICAgICBjdXJyZW50SW50ZXJ2YWwgPT09IElOVEVSVkFMUy5sb25nQnJlYWtcbiAgICAgICAgICA/IGxvbmdCcmVha0xlbmd0aFxuICAgICAgICAgIDogc2hvcnRCcmVha0xlbmd0aDtcbiAgICAgIGNvbnN0IHNob3VsZENvbnRpbnVlID0gYXdhaXQgc3RhcnRJbnRlcnZhbCg2MCAqIG5leHRJbnRlcnZhbExlbmd0aCk7XG5cbiAgICAgIC8vIGNob29zZSBubyBpZiB1c2VyIGRpZG4ndCBwaWNrXG4gICAgICBpZiAoIXdhc0Fubm91bmNlbWVudEJ1dHRvbkNsaWNrZWQpIHtcbiAgICAgICAgZGlzcGF0Y2goQUNUSU9OUy5kb05vdENvbXBsZXRlU2VsZWN0ZWRUYXNrKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzaG91bGRDb250aW51ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkaXNwYXRjaChBQ1RJT05TLmNoYW5nZUN1cnJlbnRJbnRlcnZhbCwgSU5URVJWQUxTLnBvbW9kb3JvKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogSGFuZGxlIGVuZCBvZiBzZXNzaW9uXG4gKi9cbmNvbnN0IGVuZFNlc3Npb24gPSAoKSA9PiB7XG4gIGlmIChudW1iZXJPZlBvbW9kb3Jvc0NvbXBsZXRlZCA+IDApIHtcbiAgICBpbml0aWFsaXplU3VtbWFyeVBvcHVwKFxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N1bW1hcnktb3ZlcmxheScpLFxuICAgICAgZ2V0VGFza3MoKSxcbiAgICApO1xuICAgIG9wZW5TdW1tYXJ5UG9wdXAoKTtcbiAgfVxuICBkaXNwYXRjaChBQ1RJT05TLmNoYW5nZUN1cnJlbnRUaW1lLCAwKTtcbiAgZGlzcGF0Y2goQUNUSU9OUy5jaGFuZ2VDdXJyZW50SW50ZXJ2YWwsIElOVEVSVkFMUy5wb21vZG9ybyk7XG4gIGRpc3BhdGNoKEFDVElPTlMuY2hhbmdlU2VsZWN0ZWRUYXNrLCBudWxsKTtcbiAgZGlzcGF0Y2goQUNUSU9OUy5jaGFuZ2VOdW1iZXJPZlBvbW9kb3JvcywgMCk7XG4gIGRpc3BhdGNoKEFDVElPTlMuY2xlYXJDb21wbGV0ZWRUYXNrcyk7XG59O1xuXG5jb25zdCBpbml0aWFsaXplQ29udHJvbGxlciA9ICgpID0+IHtcbiAgY29uc3QgbWFpbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWFpbicpO1xuICBjb25zdCBuYXZCYXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmJhcicpO1xuICBjb25zdCBmb290ZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvb3RlcicpO1xuICBjb25zdCBzZXNzaW9uQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlc3Npb24tYnV0dG9uJyk7XG4gIGNvbnN0IHNldHRpbmdzSWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYXRlcmlhbC1pY29ucycpO1xuICBjb25zdCBwcm9ncmVzc1JpbmdFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2dyZXNzLXJpbmcnKTtcbiAgY29uc3QgdGltZXJFbGVtZW50ID0gcHJvZ3Jlc3NSaW5nRWxlbWVudC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy50aW1lcicpO1xuXG4gIGNvbnN0IGVsZW1lbnRzVGhhdENoYW5nZVRoZW1lID0gW1xuICAgIG1haW5FbGVtZW50LFxuICAgIG5hdkJhckVsZW1lbnQsXG4gICAgc2Vzc2lvbkJ1dHRvbixcbiAgICBmb290ZXJFbGVtZW50LFxuICBdO1xuXG4gIGNvbnN0IG9uQ2hhbmdlU2Vzc2lvbiA9IChzZXNzaW9uU3RhdGUpID0+IHtcbiAgICBzZXNzaW9uID0gc2Vzc2lvblN0YXRlLnNlc3Npb247XG4gICAgaWYgKHNlc3Npb24gPT09ICdhY3RpdmUnKSB7XG4gICAgICBzZXNzaW9uQnV0dG9uLmlubmVyVGV4dCA9ICdFbmQnO1xuICAgICAgc2Vzc2lvbkJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdzZXNzaW9uLWJ1dHRvbicsICdpbi1zZXNzaW9uJyk7XG4gICAgfSBlbHNlIGlmIChzZXNzaW9uID09PSAnaW5hY3RpdmUnKSB7XG4gICAgICBlbGVtZW50c1RoYXRDaGFuZ2VUaGVtZS5mb3JFYWNoKChlbGVtKSA9PiB7XG4gICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZCgncG9tb2Rvcm8nKTtcbiAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdzaG9ydC1icmVhaycpO1xuICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2xvbmctYnJlYWsnKTtcbiAgICAgIH0pO1xuICAgICAgc2Vzc2lvbkJ1dHRvbi5pbm5lclRleHQgPSAnU3RhcnQnO1xuICAgICAgc2Vzc2lvbkJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdpbi1zZXNzaW9uJyk7XG4gICAgICBlbmRTZXNzaW9uKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBvbkNoYW5nZVRpbWUgPSAoc2Vzc2lvblN0YXRlKSA9PiB7XG4gICAgY3VycmVudFRpbWUgPSBzZXNzaW9uU3RhdGUuY3VycmVudFRpbWU7XG4gIH07XG4gIGNvbnN0IG9uQ2hhbmdlSW50ZXJ2YWwgPSAoc2Vzc2lvblN0YXRlKSA9PiB7XG4gICAgY3VycmVudEludGVydmFsID0gc2Vzc2lvblN0YXRlLmN1cnJlbnRJbnRlcnZhbDtcblxuICAgIHN3aXRjaCAoY3VycmVudEludGVydmFsKSB7XG4gICAgICBjYXNlIElOVEVSVkFMUy5wb21vZG9ybzpcbiAgICAgICAgZWxlbWVudHNUaGF0Q2hhbmdlVGhlbWUuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZCgncG9tb2Rvcm8nKTtcbiAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3J0LWJyZWFrJyk7XG4gICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdsb25nLWJyZWFrJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgSU5URVJWQUxTLnNob3J0QnJlYWs6XG4gICAgICAgIGVsZW1lbnRzVGhhdENoYW5nZVRoZW1lLmZvckVhY2goKGVsZW0pID0+IHtcbiAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ3BvbW9kb3JvJyk7XG4gICAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKCdzaG9ydC1icmVhaycpO1xuICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnbG9uZy1icmVhaycpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIElOVEVSVkFMUy5sb25nQnJlYWs6XG4gICAgICAgIGVsZW1lbnRzVGhhdENoYW5nZVRoZW1lLmZvckVhY2goKGVsZW0pID0+IHtcbiAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ3BvbW9kb3JvJyk7XG4gICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdzaG9ydC1icmVhaycpO1xuICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZCgnbG9uZy1icmVhaycpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgIH1cblxuICAgIC8vIHBsYXkgdGltZXIgYXVkaW8gYXQgdGhlIGVuZCBvZiBldmVyeSBpbnRlcnZhbFxuICAgIGlmIChzZXNzaW9uU3RhdGUubnVtYmVyT2ZQb21vZG9yb3NDb21wbGV0ZWQgPiAwKSB7XG4gICAgICB0aW1lckF1ZGlvLnBhdXNlKCk7XG4gICAgICB0aW1lckF1ZGlvLnBsYXkoKS5jYXRjaCgoKSA9PiB0cnVlKTsgLy8gaWdub3JlIGlmIGludGVycnVwdGVkXG4gICAgfVxuICB9O1xuICBjb25zdCBvblNlbGVjdFRhc2sgPSAoc2Vzc2lvblN0YXRlKSA9PiB7XG4gICAgY3VycmVudFNlbGVjdGVkVGFzayA9IHNlc3Npb25TdGF0ZS5jdXJyZW50U2VsZWN0ZWRUYXNrO1xuICB9O1xuICBjb25zdCBvbkNoYW5nZU51bVBvbW9kb3JvcyA9IChzZXNzaW9uU3RhdGUpID0+IHtcbiAgICBudW1iZXJPZlBvbW9kb3Jvc0NvbXBsZXRlZCA9IHNlc3Npb25TdGF0ZS5udW1iZXJPZlBvbW9kb3Jvc0NvbXBsZXRlZDtcbiAgfTtcbiAgY29uc3Qgb25DaGFuZ2VQb21vZG9yb0xlbmd0aCA9IChzZXNzaW9uU3RhdGUpID0+IHtcbiAgICBwb21vZG9yb0xlbmd0aCA9IHNlc3Npb25TdGF0ZS5wb21vZG9yb0xlbmd0aDtcbiAgfTtcbiAgY29uc3Qgb25DaGFuZ2VTaG9ydEJyZWFrTGVuZ3RoID0gKHNlc3Npb25TdGF0ZSkgPT4ge1xuICAgIHNob3J0QnJlYWtMZW5ndGggPSBzZXNzaW9uU3RhdGUuc2hvcnRCcmVha0xlbmd0aDtcbiAgfTtcbiAgY29uc3Qgb25DaGFuZ2VMb25nQnJlYWtMZW5ndGggPSAoc2Vzc2lvblN0YXRlKSA9PiB7XG4gICAgbG9uZ0JyZWFrTGVuZ3RoID0gc2Vzc2lvblN0YXRlLmxvbmdCcmVha0xlbmd0aDtcbiAgfTtcbiAgY29uc3Qgb25DaGFuZ2VUaW1lckF1ZGlvID0gKHNlc3Npb25TdGF0ZSkgPT4ge1xuICAgIHRpbWVyQXVkaW8gPSBzZXNzaW9uU3RhdGUudGltZXJBdWRpbztcbiAgfTtcbiAgY29uc3Qgb25Db21wbGV0ZVRhc2sgPSAoKSA9PiB7XG4gICAgd2FzQW5ub3VuY2VtZW50QnV0dG9uQ2xpY2tlZCA9IHRydWU7XG4gIH07XG4gIGNvbnN0IG9uRGlkTm90Q29tcGxldGVUYXNrID0gKCkgPT4ge1xuICAgIHdhc0Fubm91bmNlbWVudEJ1dHRvbkNsaWNrZWQgPSB0cnVlO1xuICB9O1xuXG4gICh7XG4gICAgc2Vzc2lvbixcbiAgICBudW1iZXJPZlBvbW9kb3Jvc0NvbXBsZXRlZCxcbiAgICBjdXJyZW50VGltZSxcbiAgICBjdXJyZW50SW50ZXJ2YWwsXG4gICAgY3VycmVudFNlbGVjdGVkVGFzayxcbiAgICBwb21vZG9yb0xlbmd0aCxcbiAgICBzaG9ydEJyZWFrTGVuZ3RoLFxuICAgIGxvbmdCcmVha0xlbmd0aCxcbiAgICB0aW1lckF1ZGlvLFxuICB9ID0gc3Vic2NyaWJlKHtcbiAgICBbQUNUSU9OUy5jaGFuZ2VTZXNzaW9uXTogb25DaGFuZ2VTZXNzaW9uLFxuICAgIFtBQ1RJT05TLmNoYW5nZU51bWJlck9mUG9tb2Rvcm9zXTogb25DaGFuZ2VOdW1Qb21vZG9yb3MsXG4gICAgW0FDVElPTlMuY2hhbmdlQ3VycmVudFRpbWVdOiBvbkNoYW5nZVRpbWUsXG4gICAgW0FDVElPTlMuY2hhbmdlQ3VycmVudEludGVydmFsXTogb25DaGFuZ2VJbnRlcnZhbCxcbiAgICBbQUNUSU9OUy5jaGFuZ2VTZWxlY3RlZFRhc2tdOiBvblNlbGVjdFRhc2ssXG4gICAgW0FDVElPTlMuY2hhbmdlUG9tb2Rvcm9MZW5ndGhdOiBvbkNoYW5nZVBvbW9kb3JvTGVuZ3RoLFxuICAgIFtBQ1RJT05TLmNoYW5nZVNob3J0QnJlYWtMZW5ndGhdOiBvbkNoYW5nZVNob3J0QnJlYWtMZW5ndGgsXG4gICAgW0FDVElPTlMuY2hhbmdlTG9uZ0JyZWFrTGVuZ3RoXTogb25DaGFuZ2VMb25nQnJlYWtMZW5ndGgsXG4gICAgW0FDVElPTlMuY2hhbmdlVGltZXJBdWRpb106IG9uQ2hhbmdlVGltZXJBdWRpbyxcbiAgICBbQUNUSU9OUy5jb21wbGV0ZVNlbGVjdGVkVGFza106IG9uQ29tcGxldGVUYXNrLFxuICAgIFtBQ1RJT05TLmRvTm90Q29tcGxldGVTZWxlY3RlZFRhc2tdOiBvbkRpZE5vdENvbXBsZXRlVGFzayxcbiAgfSkpO1xuXG4gIGRpc3BhdGNoKEFDVElPTlMuY2hhbmdlU2hvcnRCcmVha0xlbmd0aCwgMC4wNSk7IC8vIFRPRE86IEZPUiBURVNUSU5HLCByZW1vdmUgbGF0ZXJcbiAgZGlzcGF0Y2goQUNUSU9OUy5jaGFuZ2VMb25nQnJlYWtMZW5ndGgsIDAuMDUpOyAvLyBUT0RPOiBGT1IgVEVTVElORywgcmVtb3ZlIGxhdGVyXG5cbiAgLy8gaW5pdGlhbGl6ZSB2YXJpYWJsZXMsIGV2ZW50IGxpc3RlbmVycywgYW5kIGNvbXBvbmVudCB2YWx1ZXNcbiAgc2V0dGluZ3NJY29uLm9uY2xpY2sgPSBvcGVuU2V0dGluZ3NQb3B1cDtcbiAgdGltZXJFbGVtZW50Lm9uY2xpY2sgPSAoKSA9PiB0aW1lckF1ZGlvLnBhdXNlKCk7XG4gIHNlc3Npb25CdXR0b24ub25tb3VzZWRvd24gPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfTtcbiAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5uYXZiYXItbGluaycpXS5mb3JFYWNoKChsKSA9PiB7XG4gICAgbC5vbm1vdXNlZG93biA9IChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH0pO1xuXG4gIC8vIHN0YXJ0IHNlc3Npb24gd2hlbiBzdGFydCBidXR0b24gaXMgY2xpY2tlZFxuICBzZXNzaW9uQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgIGlmIChzZXNzaW9uQnV0dG9uLmlubmVyVGV4dCA9PT0gJ1N0YXJ0Jykge1xuICAgICAgLy8gZW5hYmxlIGF1ZGlvIGVsZW1lbnRcbiAgICAgIGNvbnN0IG9sZFRpbWVyQXVkaW9TcmMgPSB0aW1lckF1ZGlvLnNyYztcbiAgICAgIHRpbWVyQXVkaW8uc3JjID0gJyc7XG4gICAgICB0aW1lckF1ZGlvLnBsYXkoKS5jYXRjaCgoKSA9PiB0cnVlKTsgLy8gaWdub3JlIGlmIGludGVycnVwdGVkXG4gICAgICB0aW1lckF1ZGlvLnNyYyA9IG9sZFRpbWVyQXVkaW9TcmM7XG5cbiAgICAgIGRpc3BhdGNoKEFDVElPTlMuY2hhbmdlU2Vzc2lvbiwgJ2FjdGl2ZScpO1xuICAgICAgYXdhaXQgc3RhcnRTZXNzaW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wZW5Db25maXJtYXRpb25Qb3B1cCgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbml0aWFsaXplQ29udHJvbGxlcjtcbiIsIi8qKlxuICogQGZpbGUgRW50cnkgcG9pbnQgZm9yIGFwcGxpY2F0aW9uXG4gKi9cblxuaW1wb3J0ICcuLi9zdHlsZXMvc3R5bGUuY3NzJztcbmltcG9ydCB7XG4gIFRpbWVyLFxuICBQcm9ncmVzc1JpbmcsXG4gIFRhc2tMaXN0LFxuICBQb21vZG9yb0NpcmNsZXMsXG4gIFNldHRpbmdzLFxufSBmcm9tICcuLi9jb21wb25lbnRzJztcbmltcG9ydCB7IGluaXRpYWxpemVUYXNrTGlzdCB9IGZyb20gJy4vdGFza0xpc3QnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZVByb2dyZXNzUmluZyB9IGZyb20gJy4vcHJvZ3Jlc3NSaW5nJztcbmltcG9ydCB7IGluaXRpYWxpemVUaW1lciB9IGZyb20gJy4vdGltZXInO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZVBvbW9kb3JvQ2lyY2xlcyB9IGZyb20gJy4vcG9tb2Rvcm9DaXJjbGVzJztcbmltcG9ydCB7IGluaXRpYWxpemVQb3B1cCBhcyBpbml0aWFsaXplU2V0dGluZ3NQb3B1cCB9IGZyb20gJy4vc2V0dGluZ3MnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUFubm91bmNlbWVudCB9IGZyb20gJy4vYW5ub3VuY2VtZW50JztcbmltcG9ydCB7IGluaXRpYWxpemVQb3B1cCBhcyBpbml0aWFsaXplQ29uZmlybWF0aW9uUG9wdXAgfSBmcm9tICcuL2NvbmZpcm1hdGlvblBvcHVwJztcbmltcG9ydCBpbml0aWFsaXplQ29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXInO1xuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3RpbWVyLWNvbXBvbmVudCcsIFRpbWVyKTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgncHJvZ3Jlc3MtcmluZycsIFByb2dyZXNzUmluZyk7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3Rhc2stbGlzdCcsIFRhc2tMaXN0KTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnc2V0dGluZ3MtY29tcG9uZW50JywgU2V0dGluZ3MpO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdwb21vZG9yby1jaXJjbGVzJywgUG9tb2Rvcm9DaXJjbGVzKTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gIGNvbnN0IHByb2dyZXNzUmluZ0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZ3Jlc3MtcmluZycpO1xuICBjb25zdCB0aW1lckVsZW1lbnQgPSBwcm9ncmVzc1JpbmdFbGVtZW50LnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnRpbWVyJyk7XG4gIGNvbnN0IGNpcmNsZXNFbGVtZW50ID0gcHJvZ3Jlc3NSaW5nRWxlbWVudC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgJy5jaXJjbGVzJyxcbiAgKTtcbiAgY29uc3QgYW5ub3VuY2VtZW50RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hbm5vdW5jZW1lbnQtY29udGFpbmVyJyk7XG4gIGNvbnN0IHRhc2tMaXN0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrLWxpc3QnKTtcbiAgY29uc3QgY29uZmlybWF0aW9uT3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb25maXJtYXRpb24tb3ZlcmxheScpO1xuICBjb25zdCBzZXR0aW5nc0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ3MnKTtcblxuICBpbml0aWFsaXplUHJvZ3Jlc3NSaW5nKHByb2dyZXNzUmluZ0VsZW1lbnQpO1xuICBpbml0aWFsaXplVGltZXIodGltZXJFbGVtZW50KTtcbiAgaW5pdGlhbGl6ZVBvbW9kb3JvQ2lyY2xlcyhjaXJjbGVzRWxlbWVudCk7XG4gIGluaXRpYWxpemVBbm5vdW5jZW1lbnQoYW5ub3VuY2VtZW50RWxlbWVudCk7XG4gIGluaXRpYWxpemVUYXNrTGlzdCh0YXNrTGlzdEVsZW1lbnQpO1xuICBpbml0aWFsaXplQ29uZmlybWF0aW9uUG9wdXAoY29uZmlybWF0aW9uT3ZlcmxheSk7XG4gIGluaXRpYWxpemVTZXR0aW5nc1BvcHVwKHNldHRpbmdzRWxlbWVudCk7XG4gIGluaXRpYWxpemVDb250cm9sbGVyKCk7XG5cbiAgLy8gYWRqdXN0IG5hdiBiYXIgY29sb3Igb24gc2Nyb2xsXG4gIGNvbnN0IG5hdkJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZiYXInKTtcbiAgd2luZG93Lm9uc2Nyb2xsID0gKCkgPT4ge1xuICAgIGlmICh3aW5kb3cuc2Nyb2xsWSA9PT0gMCkge1xuICAgICAgbmF2QmFyLmNsYXNzTGlzdC5yZW1vdmUoJ3Njcm9sbGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hdkJhci5jbGFzc0xpc3QuYWRkKCdzY3JvbGxlZCcpO1xuICAgIH1cbiAgfTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==