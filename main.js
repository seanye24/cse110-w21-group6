(()=>{var e={757:(e,n,t)=>{e.exports=t(666)},357:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,".circle-container {\n  display: flex;\n}\n\n.circle {\n  height: 15px;\n  width: 15px;\n  border: 1px solid white;\n  border-radius: 50%;\n  margin: 15px 7px 0;\n  display: inline-block;\n}\n\n.circle.active {\n  background-color: #fff;\n}\n","",{version:3,sources:["webpack://./src/styles/pomodoro-circles.component.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,uBAAuB;EACvB,kBAAkB;EAClB,kBAAkB;EAClB,qBAAqB;AACvB;;AAEA;EACE,sBAAsB;AACxB",sourcesContent:[".circle-container {\n  display: flex;\n}\n\n.circle {\n  height: 15px;\n  width: 15px;\n  border: 1px solid white;\n  border-radius: 50%;\n  margin: 15px 7px 0;\n  display: inline-block;\n}\n\n.circle.active {\n  background-color: #fff;\n}\n"],sourceRoot:""}]);const s=i},207:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,".overlay-circle.pomodoro {\n  stroke: #0095b3;\n}\n\n.overlay-circle.short-break {\n  stroke: #4ab717;\n}\n\n.overlay-circle.long-break {\n  stroke: #f87335;\n}\n\n.foreign-object-container {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n","",{version:3,sources:["webpack://./src/styles/progress-ring.component.css"],names:[],mappings:"AAAA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;AACrB",sourcesContent:[".overlay-circle.pomodoro {\n  stroke: #0095b3;\n}\n\n.overlay-circle.short-break {\n  stroke: #4ab717;\n}\n\n.overlay-circle.long-break {\n  stroke: #f87335;\n}\n\n.foreign-object-container {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n"],sourceRoot:""}]);const s=i},802:(e,n,t)=>{"use strict";t.d(n,{Z:()=>d});var r=t(15),o=t.n(r),a=t(645),i=t.n(a),s=t(667),c=t.n(s),u=t(749),l=i()(o()),m=c()(u);l.push([e.id,".popup-container {\n  position: fixed;\n  z-index: 5;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0);\n  width: 65%;\n  min-width: 360px;\n  max-width: 500px;\n  border-radius: 5px;\n  padding: 1.5rem 3rem;\n  transition: 200ms ease-in-out;\n  background: white;\n  font: 1.1rem 'Source Sans Pro', sans-serif;\n  color: #2b2b2b;\n}\n\n.popup-container.active {\n  transform: translate(-50%, -50%) scale(1);\n}\n\n.popup-title {\n  margin: 0;\n  font: 2rem 'Lato', sans-serif;\n  color: #757575;\n  opacity: 0.9;\n}\n\n.popup-title-hr {\n  margin: 0 0 1rem 0;\n}\n\n.form-inputs-container {\n  margin: 0 0 2rem 0;\n}\n\n.form-input-container {\n  margin: 1rem 0 0 0;\n  display: flex;\n  align-items: center;\n}\n\n.form-input-label {\n  width: 12ch;\n  margin-right: 1rem;\n}\n\n.form-input {\n  cursor: pointer;\n  width: 4.5ch;\n  border: none;\n  border-radius: 5px;\n  margin-right: 1rem;\n  padding: 0.3em 0.5em;\n  font: 1.1rem 'Source Sans Pro', sans-serif;\n  color: #2b2b2b;\n  background: #eee;\n}\n\n#timer-audio-input {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  width: 30ch;\n  background: url("+m+") 96% / 10% no-repeat #eee;\n}\n\n.break-input-bounds {\n  color: #808080;\n}\n\n.error-message {\n  margin: 0;\n  display: none;\n  color: red;\n}\n\n.save-button {\n  cursor: pointer;\n  width: 75%;\n  display: block;\n  border: none;\n  border-radius: 0.25rem;\n  margin: 0 auto 0.5rem auto;\n  padding: 0.5em;\n  background: #b0b0b0;\n  font: 1.1rem 'Duru Sans', sans-serif;\n  text-align: center;\n  color: #2b2b2b;\n}\n\n.save-button:hover {\n  opacity: 0.9;\n}\n\n#overlay {\n  position: fixed;\n  z-index: 4;\n  top: 0;\n  width: 100vw;\n  height: 100vh;\n  transition: 200ms ease-in-out;\n  visibility: hidden;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n#overlay.active {\n  cursor: pointer;\n  visibility: visible;\n}\n","",{version:3,sources:["webpack://./src/styles/settings.component.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,UAAU;EACV,QAAQ;EACR,SAAS;EACT,yCAAyC;EACzC,UAAU;EACV,gBAAgB;EAChB,gBAAgB;EAChB,kBAAkB;EAClB,oBAAoB;EACpB,6BAA6B;EAC7B,iBAAiB;EACjB,0CAA0C;EAC1C,cAAc;AAChB;;AAEA;EACE,yCAAyC;AAC3C;;AAEA;EACE,SAAS;EACT,6BAA6B;EAC7B,cAAc;EACd,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,oBAAoB;EACpB,0CAA0C;EAC1C,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,wBAAwB;EACxB,qBAAqB;EACrB,gBAAgB;EAChB,WAAW;EACX,4EAA+D;AACjE;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,SAAS;EACT,aAAa;EACb,UAAU;AACZ;;AAEA;EACE,eAAe;EACf,UAAU;EACV,cAAc;EACd,YAAY;EACZ,sBAAsB;EACtB,0BAA0B;EAC1B,cAAc;EACd,mBAAmB;EACnB,oCAAoC;EACpC,kBAAkB;EAClB,cAAc;AAChB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,eAAe;EACf,UAAU;EACV,MAAM;EACN,YAAY;EACZ,aAAa;EACb,6BAA6B;EAC7B,kBAAkB;EAClB,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,mBAAmB;AACrB",sourcesContent:[".popup-container {\n  position: fixed;\n  z-index: 5;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0);\n  width: 65%;\n  min-width: 360px;\n  max-width: 500px;\n  border-radius: 5px;\n  padding: 1.5rem 3rem;\n  transition: 200ms ease-in-out;\n  background: white;\n  font: 1.1rem 'Source Sans Pro', sans-serif;\n  color: #2b2b2b;\n}\n\n.popup-container.active {\n  transform: translate(-50%, -50%) scale(1);\n}\n\n.popup-title {\n  margin: 0;\n  font: 2rem 'Lato', sans-serif;\n  color: #757575;\n  opacity: 0.9;\n}\n\n.popup-title-hr {\n  margin: 0 0 1rem 0;\n}\n\n.form-inputs-container {\n  margin: 0 0 2rem 0;\n}\n\n.form-input-container {\n  margin: 1rem 0 0 0;\n  display: flex;\n  align-items: center;\n}\n\n.form-input-label {\n  width: 12ch;\n  margin-right: 1rem;\n}\n\n.form-input {\n  cursor: pointer;\n  width: 4.5ch;\n  border: none;\n  border-radius: 5px;\n  margin-right: 1rem;\n  padding: 0.3em 0.5em;\n  font: 1.1rem 'Source Sans Pro', sans-serif;\n  color: #2b2b2b;\n  background: #eee;\n}\n\n#timer-audio-input {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  width: 30ch;\n  background: url('../assets/sound.png') 96% / 10% no-repeat #eee;\n}\n\n.break-input-bounds {\n  color: #808080;\n}\n\n.error-message {\n  margin: 0;\n  display: none;\n  color: red;\n}\n\n.save-button {\n  cursor: pointer;\n  width: 75%;\n  display: block;\n  border: none;\n  border-radius: 0.25rem;\n  margin: 0 auto 0.5rem auto;\n  padding: 0.5em;\n  background: #b0b0b0;\n  font: 1.1rem 'Duru Sans', sans-serif;\n  text-align: center;\n  color: #2b2b2b;\n}\n\n.save-button:hover {\n  opacity: 0.9;\n}\n\n#overlay {\n  position: fixed;\n  z-index: 4;\n  top: 0;\n  width: 100vw;\n  height: 100vh;\n  transition: 200ms ease-in-out;\n  visibility: hidden;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n#overlay.active {\n  cursor: pointer;\n  visibility: visible;\n}\n"],sourceRoot:""}]);const d=l},946:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,".task-form {\n  margin: 1em;\n  padding: 1em;\n  display: flex;\n  flex-direction: column;\n}\n\n.field-input-container {\n  margin-bottom: 1em;\n  border-radius: 5px;\n  position: relative;\n  width: 100%;\n  display: flex;\n}\n\n.name-input-container {\n  flex: 4;\n  position: relative;\n}\n\n.pomodoro-input-container {\n  flex: 1;\n  min-width: 95px;\n  position: relative;\n}\n\n.task-input-label {\n  position: absolute;\n  z-index: 2;\n  font: 0.8rem 'Source Sans Pro', sans-serif;\n  color: #777;\n}\n\n#name-input-label {\n  top: 0.2em;\n  left: 0.75em;\n}\n\n#pomodoro-input-label {\n  top: 0.2em;\n  left: 0.75em;\n}\n\n.task-input[type='text'],\n.task-input[type='number'] {\n  padding: 1.5em 0.75em 0.75em 0.75em;\n  border: none;\n  font: 1rem 'Source Sans Pro', sans-serif;\n  color: #444;\n  box-sizing: border-box;\n  width: 100%;\n}\n\n.task-input:focus {\n  box-shadow: 0 0 0 2pt #c8c8c8;\n  outline: none;\n  z-index: 1;\n  position: relative;\n}\n\n#name-input {\n  border-top-left-radius: 5px;\n  border-bottom-left-radius: 5px;\n}\n\n#pomodoro-input {\n  border-top-right-radius: 5px;\n  border-bottom-right-radius: 5px;\n}\n\n.task-input[type='text']::-moz-placeholder, .task-input[type='number']::-moz-placeholder {\n  color: #c8c8c8;\n}\n\n.task-input[type='text']:-ms-input-placeholder, .task-input[type='number']:-ms-input-placeholder {\n  color: #c8c8c8;\n}\n\n.task-input[type='text']::placeholder,\n.task-input[type='number']::placeholder {\n  color: #c8c8c8;\n}\n\n#submit-input {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  width: 50%;\n  margin: auto;\n  border-radius: 5px;\n  outline: none;\n  border: none;\n  color: white;\n  padding: 0.5em;\n  font: 1.1rem 'Duru Sans', sans-serif;\n}\n\n#submit-input.pomodoro {\n  background: rgb(77, 207, 233);\n}\n\n#submit-input.short-break {\n  background: #69da00;\n}\n\n#submit-input.long-break {\n  background: #f98f38;\n}\n\n#submit-input.pomodoro:hover {\n  background: rgb(112, 216, 237);\n  cursor: pointer;\n}\n\n#submit-input.short-break:hover {\n  background: #7ce407;\n  cursor: pointer;\n}\n\n#submit-input.long-break:hover {\n  background: #f99e3d;\n  cursor: pointer;\n}\n","",{version:3,sources:["webpack://./src/styles/task-item-form.component.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,kBAAkB;EAClB,WAAW;EACX,aAAa;AACf;;AAEA;EACE,OAAO;EACP,kBAAkB;AACpB;;AAEA;EACE,OAAO;EACP,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,0CAA0C;EAC1C,WAAW;AACb;;AAEA;EACE,UAAU;EACV,YAAY;AACd;;AAEA;EACE,UAAU;EACV,YAAY;AACd;;AAEA;;EAEE,mCAAmC;EACnC,YAAY;EACZ,wCAAwC;EACxC,WAAW;EACX,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,6BAA6B;EAC7B,aAAa;EACb,UAAU;EACV,kBAAkB;AACpB;;AAEA;EACE,2BAA2B;EAC3B,8BAA8B;AAChC;;AAEA;EACE,4BAA4B;EAC5B,+BAA+B;AACjC;;AAEA;EAEE,cAAc;AAChB;;AAHA;EAEE,cAAc;AAChB;;AAHA;;EAEE,cAAc;AAChB;;AAEA;EACE,wBAAwB;EACxB,qBAAqB;EACrB,UAAU;EACV,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,YAAY;EACZ,cAAc;EACd,oCAAoC;AACtC;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,8BAA8B;EAC9B,eAAe;AACjB;;AAEA;EACE,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,mBAAmB;EACnB,eAAe;AACjB",sourcesContent:[".task-form {\n  margin: 1em;\n  padding: 1em;\n  display: flex;\n  flex-direction: column;\n}\n\n.field-input-container {\n  margin-bottom: 1em;\n  border-radius: 5px;\n  position: relative;\n  width: 100%;\n  display: flex;\n}\n\n.name-input-container {\n  flex: 4;\n  position: relative;\n}\n\n.pomodoro-input-container {\n  flex: 1;\n  min-width: 95px;\n  position: relative;\n}\n\n.task-input-label {\n  position: absolute;\n  z-index: 2;\n  font: 0.8rem 'Source Sans Pro', sans-serif;\n  color: #777;\n}\n\n#name-input-label {\n  top: 0.2em;\n  left: 0.75em;\n}\n\n#pomodoro-input-label {\n  top: 0.2em;\n  left: 0.75em;\n}\n\n.task-input[type='text'],\n.task-input[type='number'] {\n  padding: 1.5em 0.75em 0.75em 0.75em;\n  border: none;\n  font: 1rem 'Source Sans Pro', sans-serif;\n  color: #444;\n  box-sizing: border-box;\n  width: 100%;\n}\n\n.task-input:focus {\n  box-shadow: 0 0 0 2pt #c8c8c8;\n  outline: none;\n  z-index: 1;\n  position: relative;\n}\n\n#name-input {\n  border-top-left-radius: 5px;\n  border-bottom-left-radius: 5px;\n}\n\n#pomodoro-input {\n  border-top-right-radius: 5px;\n  border-bottom-right-radius: 5px;\n}\n\n.task-input[type='text']::placeholder,\n.task-input[type='number']::placeholder {\n  color: #c8c8c8;\n}\n\n#submit-input {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  width: 50%;\n  margin: auto;\n  border-radius: 5px;\n  outline: none;\n  border: none;\n  color: white;\n  padding: 0.5em;\n  font: 1.1rem 'Duru Sans', sans-serif;\n}\n\n#submit-input.pomodoro {\n  background: rgb(77, 207, 233);\n}\n\n#submit-input.short-break {\n  background: #69da00;\n}\n\n#submit-input.long-break {\n  background: #f98f38;\n}\n\n#submit-input.pomodoro:hover {\n  background: rgb(112, 216, 237);\n  cursor: pointer;\n}\n\n#submit-input.short-break:hover {\n  background: #7ce407;\n  cursor: pointer;\n}\n\n#submit-input.long-break:hover {\n  background: #f99e3d;\n  cursor: pointer;\n}\n"],sourceRoot:""}]);const s=i},142:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,".item-container {\n  margin-bottom: 1em;\n  padding: 0.5em 2em;\n  border-radius: 5px;\n  position: relative;\n  cursor: pointer;\n}\n\n.item-container:focus {\n  outline: none;\n}\n\n.item-container.selected.pomodoro {\n  background: #90e0ef;\n}\n\n.item-container.selected.short-break {\n  background: #7ce407;\n}\n\n.item-container.selected.long-break {\n  background: #f99e3d;\n}\n\n.text-container {\n  background: rgba(255, 255, 255, 1);\n  color: #555;\n  position: relative;\n  padding: 0.5em;\n  border-radius: 5px;\n  width: 100%;\n  text-align: left;\n  font: 1rem Source Sans Pro, sans-serif;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n}\n\n.text-container:focus {\n  outline: none;\n  box-shadow: 0 0 0 2pt #90e0ef;\n}\n\n.item-container.completed .text-container {\n  background: #ddd;\n}\n\n.item-container.selected > .text-container:focus {\n  box-shadow: 0 0 0 2pt #00b4d8;\n}\n\n.item-container:not(.disabled):not(.selected):not(.completed) > .text-container:hover {\n  background: rgba(255, 255, 255, 0.8);\n}\n\n.task-name {\n  width: 80%;\n  display: inline-block;\n  margin: 0.5em 0;\n}\n\n.item-container.completed .task-name {\n  text-decoration: line-through;\n}\n\n.task-pomodoro-container {\n  width: 20%;\n  height: 100%;\n  display: inline-block;\n  position: relative;\n  text-align: right;\n}\n\n.task-pomodoro-label {\n  position: absolute;\n  top: -0.5em;\n  right: 0;\n  font: 0.8rem 'Source Sans Pro', sans-serif;\n  color: #777;\n}\n\n.task-pomodoro {\n  display: inline-block;\n  margin: 1em 0 0 0;\n}\n\n.task-button {\n  opacity: 0;\n  position: absolute;\n  border: none;\n  padding: 0.25em;\n  color: rgba(255, 255, 255, 1);\n  background: transparent;\n  border-radius: 50%;\n}\n\n.task-button:focus {\n  outline: none;\n  z-index: 1;\n  position: absolute;\n  box-shadow: inset 0 0 0 2pt #90e0ef;\n  opacity: 1;\n}\n\n.task-button:hover {\n  border-radius: 50%;\n  color: rgba(255, 255, 255, 0.8);\n  cursor: pointer;\n  background: rgba(255, 255, 255, 0.3);\n}\n\n.task-button:disabled {\n  opacity: 0;\n}\n\n.item-container.selected > .task-button,\n.item-container.selected > .task-button:hover {\n  color: rgba(0, 0, 0, 0.54);\n}\n\n.item-container:hover:not(.disabled) > .task-button {\n  opacity: 1;\n}\n\n.item-container.selected > .task-button:focus {\n  box-shadow: inset 0 0 0 2pt #00b4d8;\n}\n\n.task-button-icon {\n  font-size: 1.2rem;\n}\n\n#delete-button {\n  top: 50%;\n  right: 0;\n  transform: translate(0, -50%);\n}\n","",{version:3,sources:["webpack://./src/styles/task-item.component.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,kBAAkB;EAClB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,kCAAkC;EAClC,WAAW;EACX,kBAAkB;EAClB,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,gBAAgB;EAChB,sCAAsC;EACtC,YAAY;EACZ,eAAe;EACf,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,UAAU;EACV,qBAAqB;EACrB,eAAe;AACjB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,UAAU;EACV,YAAY;EACZ,qBAAqB;EACrB,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,QAAQ;EACR,0CAA0C;EAC1C,WAAW;AACb;;AAEA;EACE,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,UAAU;EACV,kBAAkB;EAClB,YAAY;EACZ,eAAe;EACf,6BAA6B;EAC7B,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,UAAU;EACV,kBAAkB;EAClB,mCAAmC;EACnC,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,+BAA+B;EAC/B,eAAe;EACf,oCAAoC;AACtC;;AAEA;EACE,UAAU;AACZ;;AAEA;;EAEE,0BAA0B;AAC5B;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,QAAQ;EACR,QAAQ;EACR,6BAA6B;AAC/B",sourcesContent:[".item-container {\n  margin-bottom: 1em;\n  padding: 0.5em 2em;\n  border-radius: 5px;\n  position: relative;\n  cursor: pointer;\n}\n\n.item-container:focus {\n  outline: none;\n}\n\n.item-container.selected.pomodoro {\n  background: #90e0ef;\n}\n\n.item-container.selected.short-break {\n  background: #7ce407;\n}\n\n.item-container.selected.long-break {\n  background: #f99e3d;\n}\n\n.text-container {\n  background: rgba(255, 255, 255, 1);\n  color: #555;\n  position: relative;\n  padding: 0.5em;\n  border-radius: 5px;\n  width: 100%;\n  text-align: left;\n  font: 1rem Source Sans Pro, sans-serif;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n}\n\n.text-container:focus {\n  outline: none;\n  box-shadow: 0 0 0 2pt #90e0ef;\n}\n\n.item-container.completed .text-container {\n  background: #ddd;\n}\n\n.item-container.selected > .text-container:focus {\n  box-shadow: 0 0 0 2pt #00b4d8;\n}\n\n.item-container:not(.disabled):not(.selected):not(.completed) > .text-container:hover {\n  background: rgba(255, 255, 255, 0.8);\n}\n\n.task-name {\n  width: 80%;\n  display: inline-block;\n  margin: 0.5em 0;\n}\n\n.item-container.completed .task-name {\n  text-decoration: line-through;\n}\n\n.task-pomodoro-container {\n  width: 20%;\n  height: 100%;\n  display: inline-block;\n  position: relative;\n  text-align: right;\n}\n\n.task-pomodoro-label {\n  position: absolute;\n  top: -0.5em;\n  right: 0;\n  font: 0.8rem 'Source Sans Pro', sans-serif;\n  color: #777;\n}\n\n.task-pomodoro {\n  display: inline-block;\n  margin: 1em 0 0 0;\n}\n\n.task-button {\n  opacity: 0;\n  position: absolute;\n  border: none;\n  padding: 0.25em;\n  color: rgba(255, 255, 255, 1);\n  background: transparent;\n  border-radius: 50%;\n}\n\n.task-button:focus {\n  outline: none;\n  z-index: 1;\n  position: absolute;\n  box-shadow: inset 0 0 0 2pt #90e0ef;\n  opacity: 1;\n}\n\n.task-button:hover {\n  border-radius: 50%;\n  color: rgba(255, 255, 255, 0.8);\n  cursor: pointer;\n  background: rgba(255, 255, 255, 0.3);\n}\n\n.task-button:disabled {\n  opacity: 0;\n}\n\n.item-container.selected > .task-button,\n.item-container.selected > .task-button:hover {\n  color: rgba(0, 0, 0, 0.54);\n}\n\n.item-container:hover:not(.disabled) > .task-button {\n  opacity: 1;\n}\n\n.item-container.selected > .task-button:focus {\n  box-shadow: inset 0 0 0 2pt #00b4d8;\n}\n\n.task-button-icon {\n  font-size: 1.2rem;\n}\n\n#delete-button {\n  top: 50%;\n  right: 0;\n  transform: translate(0, -50%);\n}\n"],sourceRoot:""}]);const s=i},717:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,".container {\n  padding: 1em;\n  font: normal 1rem 'Source Sans Pro', sans-serif;\n  border-radius: 5px;\n  height: 100%;\n  flex: 1 1 0;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n}\n\n.container.pomodoro {\n  background: #00b4d8;\n}\n\n.container.short-break {\n  background: #54c800;\n}\n\n.container.long-break {\n  background: #f87335;\n}\n\n.task-item-container {\n  flex: 1;\n  overflow: auto;\n}\n\n.title {\n  text-align: center;\n  color: #fff;\n  margin-top: 0;\n}\n","",{version:3,sources:["webpack://./src/styles/task-list.component.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,+CAA+C;EAC/C,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,OAAO;EACP,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;AACf",sourcesContent:[".container {\n  padding: 1em;\n  font: normal 1rem 'Source Sans Pro', sans-serif;\n  border-radius: 5px;\n  height: 100%;\n  flex: 1 1 0;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n}\n\n.container.pomodoro {\n  background: #00b4d8;\n}\n\n.container.short-break {\n  background: #54c800;\n}\n\n.container.long-break {\n  background: #f87335;\n}\n\n.task-item-container {\n  flex: 1;\n  overflow: auto;\n}\n\n.title {\n  text-align: center;\n  color: #fff;\n  margin-top: 0;\n}\n"],sourceRoot:""}]);const s=i},670:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,".container {\n  font-family: serif 'Duru-Sans', sans-serif;\n  font-size: medium 'Duru-Sans', sans-serif;\n  font-style: normal 'Duru-Sans', sans-serif;\n  font-feature-settings: normal, , ;\n  font-variant: normal 'Duru-Sans', sans-serif;\n  font-weight: normal 'Duru-Sans', sans-serif;\n  font-stretch: normal 'Duru-Sans', sans-serif;\n  line-height: normal 'Duru-Sans', sans-serif;\n  font: initial 'Duru-Sans', sans-serif;\n  color: #fff;\n}\n","",{version:3,sources:["webpack://./src/styles/timer.component.css"],names:[],mappings:"AAAA;EACE,0CAAqC;EAArC,yCAAqC;EAArC,0CAAqC;EAArC,iCAAqC;EAArC,4CAAqC;EAArC,2CAAqC;EAArC,4CAAqC;EAArC,2CAAqC;EAArC,qCAAqC;EACrC,WAAW;AACb",sourcesContent:[".container {\n  font: initial 'Duru-Sans', sans-serif;\n  color: #fff;\n}\n"],sourceRoot:""}]);const s=i},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},15:e=>{"use strict";function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,o=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(t.push(i.value),!n||t.length!==n);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return t}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),u="/*# ".concat(c," */"),l=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(l).concat([u]).join("\n")}return[a].join("\n")}},667:e=>{"use strict";e.exports=function(e,n){return n||(n={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},666:e=>{var n=function(e){"use strict";var n,t=Object.prototype,r=t.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{c({},"")}catch(e){c=function(e,n,t){return e[n]=t}}function u(e,n,t,r){var o=n&&n.prototype instanceof h?n:h,a=Object.create(o.prototype),i=new L(r||[]);return a._invoke=function(e,n,t){var r=m;return function(o,a){if(r===A)throw new Error("Generator is already running");if(r===p){if("throw"===o)throw a;return O()}for(t.method=o,t.arg=a;;){var i=t.delegate;if(i){var s=w(i,t);if(s){if(s===f)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if(r===m)throw r=p,t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r=A;var c=l(e,n,t);if("normal"===c.type){if(r=t.done?p:d,c.arg===f)continue;return{value:c.arg,done:t.done}}"throw"===c.type&&(r=p,t.method="throw",t.arg=c.arg)}}}(e,t,i),a}function l(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var m="suspendedStart",d="suspendedYield",A="executing",p="completed",f={};function h(){}function b(){}function g(){}var v={};v[a]=function(){return this};var k=Object.getPrototypeOf,E=k&&k(k(T([])));E&&E!==t&&r.call(E,a)&&(v=E);var y=g.prototype=h.prototype=Object.create(v);function C(e){["next","throw","return"].forEach((function(n){c(e,n,(function(e){return this._invoke(n,e)}))}))}function B(e,n){function t(o,a,i,s){var c=l(e[o],e,a);if("throw"!==c.type){var u=c.arg,m=u.value;return m&&"object"==typeof m&&r.call(m,"__await")?n.resolve(m.__await).then((function(e){t("next",e,i,s)}),(function(e){t("throw",e,i,s)})):n.resolve(m).then((function(e){u.value=e,i(u)}),(function(e){return t("throw",e,i,s)}))}s(c.arg)}var o;this._invoke=function(e,r){function a(){return new n((function(n,o){t(e,r,n,o)}))}return o=o?o.then(a,a):a()}}function w(e,t){var r=e.iterator[t.method];if(r===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=n,w(e,t),"throw"===t.method))return f;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var o=l(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=n),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function x(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function S(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(x,this),this.reset(!0)}function T(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function t(){for(;++o<e.length;)if(r.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=n,t.done=!0,t};return i.next=i}}return{next:O}}function O(){return{value:n,done:!0}}return b.prototype=y.constructor=g,g.constructor=b,b.displayName=c(g,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===b||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,c(e,s,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},C(B.prototype),B.prototype[i]=function(){return this},e.AsyncIterator=B,e.async=function(n,t,r,o,a){void 0===a&&(a=Promise);var i=new B(u(n,t,r,o),a);return e.isGeneratorFunction(t)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(y),c(y,s,"Generator"),y[a]=function(){return this},y.toString=function(){return"[object Generator]"},e.keys=function(e){var n=[];for(var t in e)n.push(t);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=T,L.prototype={constructor:L,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(S),!e)for(var t in this)"t"===t.charAt(0)&&r.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=n)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function o(r,o){return s.type="throw",s.arg=e,t.next=r,o&&(t.method="next",t.arg=n),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,n){for(var t=this.tryEntries.length-1;t>=0;--t){var o=this.tryEntries[t];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=n&&n<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=n,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),f},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),S(t),f}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;S(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:T(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=n),f}},e}(e.exports);try{regeneratorRuntime=n}catch(e){Function("r","regeneratorRuntime = r")(n)}},516:(e,n,t)=>{"use strict";e.exports=t.p+"assets/6662f739ab6cad4c1992.mp3"},144:(e,n,t)=>{"use strict";e.exports=t.p+"assets/06104298e61360cb4985.mp3"},234:(e,n,t)=>{"use strict";e.exports=t.p+"assets/a7dc6f14a9a44dd6e691.mp3"},749:(e,n,t)=>{"use strict";e.exports=t.p+"assets/84e6b6dd61310ed02359.png"}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{"use strict";function e(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function n(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function r(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,n,t){return n&&r(e.prototype,n),t&&r(e,t),e}function a(e,n){return(a=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function i(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&a(e,n)}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,n){return!n||"object"!==s(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function m(e,n,t){return(m=l()?Reflect.construct:function(e,n,t){var r=[null];r.push.apply(r,n);var o=new(Function.bind.apply(e,r));return t&&a(o,t.prototype),o}).apply(null,arguments)}function d(e){var n="function"==typeof Map?new Map:void 0;return(d=function(e){if(null===e||(t=e,-1===Function.toString.call(t).indexOf("[native code]")))return e;var t;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,r)}function r(){return m(e,arguments,u(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),a(r,e)})(e)}var A=t(142);function p(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function f(e,n){if(e){if("string"==typeof e)return p(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?p(e,n):void 0}}function h(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(t.push(i.value),!n||t.length!==n);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return t}}(e,n)||f(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var b=t(516),g=t(234),v=t(144),k="Focus.",E="Enjoy your short break!",y="Good work. Enjoy a longer break!",C="pomodoroInterval",B="shortBreakInterval",w="longBreakInterval",x="shortBreakLength",S="longBreakLength",L="timerAudio",T="tasks",O={calm:b,annoying:g,kanye:v},P={changeSession:"change current session",changeTotalSessionTime:"change total session time",changeCurrentTime:"change current time",changeCurrentInterval:"change current interval",changeNumberOfPomodoros:"change number of pomodoros completed",changePomodoroLength:"change pomodoro length",changeShortBreakLength:"change short break length",changeLongBreakLength:"change long break length",changeTimerAudio:"change timer audio",changeSelectedTask:"change currently selected task",incrementSelectedTask:"increment current task",completeSelectedTask:"complete current task",doNotCompleteSelectedTask:"do not complete current task",addToCompletedTasks:"add to completed tasks",clearCompletedTasks:"clear completed tasks"};function I(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function j(n){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?I(Object(r),!0).forEach((function(t){e(n,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):I(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}var _=new Audio;_.volume=.2;var N={session:"inactive",totalSessionTime:0,numberOfPomodorosCompleted:0,currentTime:0,currentInterval:C,currentSelectedTask:null,completedTasks:[],pomodoroLength:.05,shortBreakLength:0,longBreakLength:0,timerAudio:_},R=Object.values(P).reduce((function(n,t){return j(j({},n),{},e({},t,[]))}),{}),q=function(e){return"object"===s(e)&&null!==e&&Object.entries(e).forEach((function(e){var n=h(e,2),t=n[0],r=n[1];Object.prototype.hasOwnProperty.call(R,t)&&R[t].push(r)})),N},D=function(e,n){switch(e){case P.changeSession:N.session=n;break;case P.changeTotalSessionTime:N.totalSessionTime=n;break;case P.changeCurrentTime:N.currentTime=n;break;case P.changeCurrentInterval:N.currentInterval=n;break;case P.changeSelectedTask:N.currentSelectedTask=n;break;case P.incrementSelectedTask:case P.completeSelectedTask:case P.doNotCompleteSelectedTask:break;case P.addToCompletedTasks:N.completedTasks.push(n);break;case P.clearCompletedTasks:N.completedTasks=[];break;case P.changeNumberOfPomodoros:N.numberOfPomodorosCompleted=n;break;case P.changePomodoroLength:N.pomodoroLength=n;break;case P.changeShortBreakLength:N.shortBreakLength=n;break;case P.changeLongBreakLength:N.longBreakLength=n;break;case P.changeTimerAudio:N.timerAudio.src=n;break;default:return}R[e].forEach((function(e){return e(N)}))};function Y(e,n,t,r,o,a,i){try{var s=e[a](i),c=s.value}catch(e){return void t(e)}s.done?n(c):Promise.resolve(c).then(r,o)}function U(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var a=e.apply(n,t);function i(e){Y(a,r,o,i,s,"next",e)}function s(e){Y(a,r,o,i,s,"throw",e)}i(void 0)}))}}var Z=t(757),W=t.n(Z),M=function(e){var n,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=r.namespace;return n=o?document.createElementNS(o,e):document.createElement(e),Object.entries(t).forEach((function(e){var t=h(e,2),r=t[0],a=t[1];o||!(r in n)?n.setAttribute(r,a):n[r]=a})),n},z=function(e){return"string"==typeof e||e instanceof String?e:null},V=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t="number"==typeof e||e instanceof Number||null!==z(e),r=Number(e);return!t||Number.isNaN(r)?null:n?Math.floor(r):r},H=function(e){if("boolean"==typeof e||e instanceof Boolean)return e;var n=null!==z(e);return!(!n||"true"!==e)||(!n||"false"!==e)&&null},F=function(){var e=U(W().mark((function e(n){return W().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e){return setTimeout(e,1e3*n)})));case 1:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),G=function(e,n){n.forEach((function(n){switch(e){case C:n.classList.add("pomodoro"),n.classList.remove("short-break"),n.classList.remove("long-break");break;case B:n.classList.remove("pomodoro"),n.classList.add("short-break"),n.classList.remove("long-break");break;case w:n.classList.remove("pomodoro"),n.classList.remove("short-break"),n.classList.add("long-break");break;default:n.classList.add("pomodoro"),n.classList.remove("short-break"),n.classList.remove("long-break")}}))},X=function(e){var n=V(e,!0);return null===n||n<0?null:n},Q=function(e){try{var n=e.name,t=e.usedPomodoros,r=e.estimatedPomodoros,o=e.selected,a=e.completed,i=null!==z(n),s=null!==X(t),c=null!==X(r),u=null!==H(o),l=null!==H(a);return i&&s&&c&&l&&u?{name:n,usedPomodoros:t,estimatedPomodoros:r,selected:o,completed:a}:null}catch(e){return null}};const J=function(t){i(l,t);var r,a,s=(r=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=u(r);if(a){var t=u(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return c(this,e)});function l(){var t,r;n(this,l),(r=s.call(this))._name="",r._usedPomodoros=0,r._estimatedPomodoros=0,r._selected=!1,r._completed=!1,r.shadow=r.attachShadow({mode:"open"}),r.styleElement=M("style",{innerText:A.Z.toString()}),r.materialIconLinkElement=M("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/icon?family=Material+Icons"}),r.itemContainerElement=M("div",{className:"item-container pomodoro"}),r.textContainerElement=M("button",{className:"text-container",onmouseout:function(e){e.target.blur()},onmousedown:function(e){e.preventDefault()}}),r.nameElement=M("p",{className:"task-name"}),r.pomodoroContainer=M("span",{className:"task-pomodoro-container"}),r.pomodoroLabel=M("label",{className:"task-pomodoro-label",for:"task-pomodoro",innerText:"Pomodoros"}),r.pomodoroElement=M("p",{className:"task-pomodoro",id:"task-pomodoro"}),r.deleteTaskButton=M("button",{className:"task-button",id:"delete-button",onmouseout:function(e){e.target.blur()},onmousedown:function(e){e.preventDefault()}}),r.deleteTaskIcon=M("span",{className:"material-icons task-button-icon",innerText:"delete"}),r.shadow.append(r.materialIconLinkElement,r.styleElement,r.itemContainerElement),r.itemContainerElement.append(r.textContainerElement,r.deleteTaskButton),r.deleteTaskButton.appendChild(r.deleteTaskIcon),r.textContainerElement.append(r.nameElement,r.pomodoroContainer),r.pomodoroContainer.append(r.pomodoroLabel,r.pomodoroElement);var o=q((e(t={},P.changeSession,(function(e){"inactive"===e.session&&G(C,[r.itemContainerElement])})),e(t,P.changeCurrentInterval,(function(e){"active"===e.session&&G(e.currentInterval,[r.itemContainerElement])})),t)).currentInterval;return G(o,[r.itemContainerElement]),r}return o(l,[{key:"attributeChangedCallback",value:function(e,n,t){switch(e){case"name":var r=z(t);this.nameElement.innerText=r,this._name=r;break;case"used-pomodoros":var o=X(t);if(null===o)return void this.setAttribute(e,n);this._usedPomodoros=o,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"estimated-pomodoros":var a=X(t);if(null===a)return void this.setAttribute(e,n);this._estimatedPomodoros=a,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"selected":var i=H(t);if(null===i)return void this.setAttribute(e,n);this._selected=i,i?this.itemContainerElement.classList.add("selected"):this.itemContainerElement.classList.remove("selected");break;case"completed":var s=H(t);if(null===s)return void this.setAttribute(e,n);this._completed=s,s?this.itemContainerElement.classList.add("completed"):this.itemContainerElement.classList.remove("completed")}}},{key:"name",get:function(){return this._name},set:function(e){var n=z(e);null!==n&&(this._name=n,this.setAttribute("name",this._name))}},{key:"usedPomodoros",get:function(){return this._usedPomodoros},set:function(e){var n=X(e);null!==n&&(this._usedPomodoros=n,this.setAttribute("used-pomodoros",this._usedPomodoros))}},{key:"estimatedPomodoros",get:function(){return this._estimatedPomodoros},set:function(e){var n=X(e);null!==n&&(this._estimatedPomodoros=n,this.setAttribute("estimated-pomodoros",this._estimatedPomodoros))}},{key:"selected",get:function(){return this._selected},set:function(e){var n=H(e);null!==n&&(this._selected=n,this.setAttribute("selected",this._selected))}},{key:"completed",get:function(){return this._completed},set:function(e){var n=H(e);null!==n&&(this._completed=n,this.setAttribute("completed",this._completed))}}],[{key:"observedAttributes",get:function(){return["name","estimated-pomodoros","used-pomodoros","selected","completed"]}}]),l}(d(HTMLElement));var $=t(717),K=t(946);const ee=function(t){i(s,t);var r,o,a=(r=s,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=u(r);if(o){var t=u(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return c(this,e)});function s(){var t,r;return n(this,s),(r=a.call(this)).shadow=r.attachShadow({mode:"open"}),r.styleElement=M("style",{innerText:K.Z.toString()}),r.containerElement=M("form",{className:"task-form"}),r.fieldInputContainer=M("div",{className:"field-input-container"}),r.nameInputContainer=M("div",{className:"name-input-container"}),r.nameInputLabel=M("label",{className:"task-input-label",id:"name-input-label",for:"name-input",innerText:"Name"}),r.nameInputElement=M("input",{className:"task-input",id:"name-input",type:"text",name:"name",placeholder:"Task Description...",required:!0}),r.pomodoroInputContainer=M("div",{className:"pomodoro-input-container"}),r.pomodoroInputLabel=M("label",{className:"task-input-label",id:"pomodoro-input-label",for:"pomodoro-input",innerText:"Est Pomodoros"}),r.pomodoroInputElement=M("input",{className:"task-input",id:"pomodoro-input",type:"number",name:"pomodoro",placeholder:"#",min:"1",required:!0}),r.submitInputElement=M("input",{className:"task-input pomodoro",id:"submit-input",type:"submit",value:"ADD"}),r.shadow.append(r.styleElement,r.containerElement),r.containerElement.append(r.fieldInputContainer,r.submitInputElement),r.fieldInputContainer.append(r.nameInputContainer,r.pomodoroInputContainer),r.nameInputContainer.append(r.nameInputLabel,r.nameInputElement),r.pomodoroInputContainer.append(r.pomodoroInputLabel,r.pomodoroInputElement),q((e(t={},P.changeSession,(function(e){"inactive"===e.session&&(r.submitInputElement.className="pomodoro")})),e(t,P.changeCurrentInterval,(function(e){if("active"===e.session)switch(e.currentInterval){case C:r.submitInputElement.className="pomodoro";break;case B:r.submitInputElement.className="short-break";break;case w:r.submitInputElement.className="long-break";break;default:r.submitInputElement.className="pomodoro"}})),t)),r}return s}(d(HTMLElement));customElements.define("task-item",J),customElements.define("task-item-form",ee);const ne=function(t){i(s,t);var r,o,a=(r=s,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=u(r);if(o){var t=u(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return c(this,e)});function s(){var t,r;return n(this,s),(r=a.call(this)).shadow=r.attachShadow({mode:"open"}),r.styleElement=M("style",{innerText:$.Z.toString()}),r.containerElement=M("div",{className:"container pomodoro"}),r.titleElement=M("h1",{className:"title",innerText:"Task List"}),r.taskItemListContainerElement=M("div",{className:"task-item-container"}),r.taskItemFormElement=M("task-item-form",{className:"task-item-form"}),r.shadow.append(r.styleElement,r.containerElement),r.containerElement.append(r.titleElement,r.taskItemListContainerElement,r.taskItemFormElement),q((e(t={},P.changeSession,(function(e){"inactive"===e.session&&(r.containerElement.className="container pomodoro")})),e(t,P.changeCurrentInterval,(function(e){if("active"===e.session)switch(e.currentInterval){case C:r.containerElement.className="container pomodoro";break;case B:r.containerElement.className="container short-break";break;case w:r.containerElement.className="container long-break";break;default:r.containerElement.className="container pomodoro"}})),t)),r}return s}(d(HTMLElement));var te=t(670),re=function(e){var n=V(e,!0);return null===n||n<0||n>=3600?null:n},oe=function(e){var n=V(e);return null===n||n<0?null:n};const ae=function(e){i(s,e);var t,r,a=(t=s,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=u(t);if(r){var o=u(this).constructor;e=Reflect.construct(n,arguments,o)}else e=n.apply(this,arguments);return c(this,e)});function s(){var e;return n(this,s),(e=a.call(this))._time=0,e._containerRadius=0,e.styleElement=M("style",{innerText:te.Z.toString()}),e.shadow=e.attachShadow({mode:"open"}),e.timerContainer=M("div",{className:"container"}),e.shadow.append(e.styleElement,e.timerContainer),e}return o(s,[{key:"attributeChangedCallback",value:function(e,n,t){switch(e){case"time":var r=re(t);if(null===r)return void this.setAttribute(e,n);this._time=r,this.timerContainer.innerText=(a=this._time,s=(i=h([Math.floor(a/60),Math.floor(a%60)].map((function(e){return e<10?"0".concat(e):e})),2))[0],c=i[1],"".concat(s,":").concat(c));break;case"container-radius":var o=oe(t);if(null===o)return void this.setAttribute(e,n);this._containerRadius=o,this.styleElement.innerText="\n            .container {\n              font: ".concat(this._containerRadius/2,"px 'Duru-Sans', sans-serif; \n              color: #fff;\n            }\n          ")}var a,i,s,c}},{key:"time",get:function(){return this._time},set:function(e){var n=re(e);null!==n&&(this._time=n,this.setAttribute("time",this._time))}},{key:"containerRadius",get:function(){return this._containerRadius},set:function(e){var n=oe(e);null!==n&&(this._containerRadius=n,this.setAttribute("container-radius",this._containerRadius))}}],[{key:"observedAttributes",get:function(){return["time","container-radius"]}}]),s}(d(HTMLElement));var ie=t(207),se=function(e){var n=V(e);return null===n||n<0?null:n},ce=function(e){var n=V(e);return null===n||n<0||n>100?null:n};const ue=function(t){i(l,t);var r,a,s=(r=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=u(r);if(a){var t=u(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return c(this,e)});function l(){var e;n(this,l),(e=s.call(this)).root=e.attachShadow({mode:"open"}),e.styleElement=document.createElement("style");var t="http://www.w3.org/2000/svg";return e.svgElement=M("svg",{class:"svg"},{namespace:t}),e.overlayCircleElement=M("circle",{class:"overlay-circle pomodoro"},{namespace:t}),e.baseCircleElement=M("circle",{class:"base-circle"},{namespace:t}),e.foreignObjectElement=M("foreignObject",{class:"foreign-object"},{namespace:t}),e.foreignObjectContainer=M("div",{class:"foreign-object-container"}),e.timerComponent=M("timer-component",{className:"timer",time:0}),e.circleComponent=M("pomodoro-circles",{className:"circles",circleCount:0}),e.root.append(e.styleElement,e.svgElement),e.svgElement.append(e.baseCircleElement,e.overlayCircleElement,e.foreignObjectElement),e.foreignObjectElement.appendChild(e.foreignObjectContainer),e.foreignObjectContainer.append(e.timerComponent,e.circleComponent),e._radius=0,e._stroke=0,e._progress=0,e.updateComponent(e._radius,e._stroke,e._progress),e}return o(l,[{key:"updateComponent",value:function(n,t,r){var o,a=this,i=n-2*t,s=2*i*Math.PI;this.styleElement.innerText="\n      .svg {\n        overflow: hidden;\n        width: ".concat(2*n,"px;\n        height: ").concat(2*n,"px;\n      }\n\n      .base-circle {\n        stroke: #fff;\n        stroke-dasharray: ").concat(s," ").concat(s,";\n        stroke-dashoffset: 0;\n        stroke-width: ").concat(t,";\n        fill: transparent;\n      }\n\n      .overlay-circle {\n        stroke-dasharray: ").concat(s," ").concat(s,";\n        stroke-dashoffset: ").concat((1-r/100)*s,";\n        stroke-width: ").concat(t,";\n        fill: transparent;\n\n        transition: stroke-dashoffset 0.5s;\n        transform: rotate(-90deg);\n        transform-origin: 50% 50%;\n      }\n\n      ").concat(ie.Z.toString(),"\n    "),this.foreignObjectElement.setAttribute("width",2*n),this.foreignObjectElement.setAttribute("height",2*n),this.overlayCircleElement.setAttribute("r",i),this.overlayCircleElement.setAttribute("cx",n),this.overlayCircleElement.setAttribute("cy",n),this.baseCircleElement.setAttribute("r",i),this.baseCircleElement.setAttribute("cx",n),this.baseCircleElement.setAttribute("cy",n),this.timerComponent.containerRadius=n,q((e(o={},P.changeSession,(function(e){"inactive"===e.session&&a.overlayCircleElement.setAttribute("class","overlay-circle pomodoro")})),e(o,P.changeCurrentInterval,(function(e){if("active"===e.session)switch(e.currentInterval){case C:a.overlayCircleElement.setAttribute("class","overlay-circle pomodoro");break;case B:a.overlayCircleElement.setAttribute("class","overlay-circle short-break");break;case w:a.overlayCircleElement.setAttribute("class","overlay-circle long-break");break;default:a.overlayCircleElement.setAttribute("class","overlay-circle pomodoro")}})),o))}},{key:"attributeChangedCallback",value:function(e,n,t){switch(e){case"radius":var r=se(t);if(null===r)return void this.setAttribute(e,n);this._radius=r;break;case"stroke":var o=se(t);if(null===o)return void this.setAttribute(e,n);this._stroke=o;break;case"progress":var a=ce(t);if(null===a)return void this.setAttribute(e,n);this._progress=a}this.updateComponent(this._radius,this._stroke,this._progress)}},{key:"radius",get:function(){return this._radius},set:function(e){var n=se(e);null!==n&&(this._radius=n,this.setAttribute("radius",this._radius))}},{key:"stroke",get:function(){return this._stroke},set:function(e){var n=se(e);null!==n&&(this._stroke=n,this.setAttribute("stroke",this._stroke))}},{key:"progress",get:function(){return this._progress},set:function(e){var n=ce(e);null!==n&&(this._progress=n,this.setAttribute("progress",this._progress))}}],[{key:"observedAttributes",get:function(){return["radius","stroke","progress"]}}]),l}(d(HTMLElement));function le(e){return function(e){if(Array.isArray(e))return p(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||f(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var me=t(357),de=function(e){var n=V(e,!0);return null===n||n<0||n>4?null:n};const Ae=function(e){i(s,e);var t,r,a=(t=s,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=u(t);if(r){var o=u(this).constructor;e=Reflect.construct(n,arguments,o)}else e=n.apply(this,arguments);return c(this,e)});function s(){var e,t;return n(this,s),(t=a.call(this))._circleCount=0,t.styleElement=M("style",{innerText:me.Z}),t.shadow=t.attachShadow({mode:"open"}),t.counterContainer=M("div",{className:"circle-container"}),t.circles=new Array(4).fill(null).map((function(){return M("div",{className:"circle"})})),(e=t.counterContainer).append.apply(e,le(t.circles)),t.shadow.append(t.styleElement,t.counterContainer),t}return o(s,[{key:"attributeChangedCallback",value:function(e,n,t){if("circle-count"===e){var r=de(t);if(null===r)return void this.setAttribute(e,n);this._circleCount=r,this.circles.forEach((function(e,n){n<r?e.classList.add("active"):e.classList.remove("active")}))}}},{key:"circleCount",get:function(){return this._circleCount},set:function(e){var n=de(e);null!==n&&(this._circleCount=n,this.setAttribute("circle-count",this._circleCount))}}],[{key:"observedAttributes",get:function(){return["circle-count"]}}]),s}(d(HTMLElement));var pe=t(802),fe=function(e){var n=V(e,!0);return null===n||n<3||n>5?null:n},he=function(e){var n=V(e,!0);return null===n||n<15||n>30?null:n},be=function(e){var n=z(e);return null!==n&&Object.values(O).includes(n)?n:null};var ge={calm:"Calm Alarm",annoying:"Original Alarm",kanye:"Kanye Telling You to Stop"};const ve=function(e){i(s,e);var t,r,a=(t=s,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=u(t);if(r){var o=u(this).constructor;e=Reflect.construct(n,arguments,o)}else e=n.apply(this,arguments);return c(this,e)});function s(){var e,t;return n(this,s),(t=a.call(this))._shortBreakLength=0,t._longBreakLength=0,t._timerAudio="",t.styleElement=M("style",{innerText:pe.Z.toString()}),t.shadow=t.attachShadow({mode:"open"}),t.popupContainer=M("div",{className:"popup-container"}),t.formInputsContainer=M("div",{className:"form-inputs-container"}),t.popupTitle=M("h1",{className:"popup-title",innerText:"SETTINGS"}),t.popupTitleHr=M("hr",{className:"popup-title-hr"}),t.shortBreakContainer=M("div",{className:"form-input-container"}),t.shortBreakLabel=M("label",{innerText:"Short Break: ",for:"short-break-input",className:"form-input-label"}),t.shortBreakInput=M("input",{id:"short-break-input",className:"form-input",name:"short-break-input",type:"number",min:"3",max:"5",value:t._shortBreakLength}),t.shortBreakBounds=M("span",{className:"break-input-bounds",innerText:"3 - 5 minutes"}),t.shortBreakError=M("p",{className:"error-message",innerText:"Please enter a valid short break length."}),t.longBreakContainer=M("div",{className:"form-input-container"}),t.longBreakLabel=M("label",{innerText:"Long Break: ",for:"long-break-input",className:"form-input-label"}),t.longBreakInput=M("input",{id:"long-break-input",className:"form-input",name:"long-break-input",type:"number",min:"15",max:"30",value:t._longBreakLength}),t.longBreakBounds=M("span",{className:"break-input-bounds",innerText:"15 - 30 minutes"}),t.longBreakError=M("p",{className:"error-message",innerText:"Please enter a valid long break length."}),t.timerAudioContainer=M("div",{className:"form-input-container"}),t.timerAudioLabel=M("label",{for:"timer-audio-input",innerText:"Sound: ",className:"form-input-label"}),t.timerAudioInput=M("select",{id:"timer-audio-input",className:"form-input",name:"sound"}),t.timerAudioOptions=Object.entries(O).map((function(e){var n=h(e,2),t=n[0],r=n[1];return M("option",{value:r,innerText:ge[t]})})),t.saveButton=M("button",{innerText:"SAVE",className:"save-button",onmousedown:function(e){return e.preventDefault()}}),t.overlayEl=M("div",{id:"overlay"}),t.shadow.append(t.styleElement,t.popupContainer,t.overlayEl),t.popupContainer.append(t.popupTitle,t.popupTitleHr,t.formInputsContainer,t.saveButton),t.formInputsContainer.append(t.shortBreakContainer,t.shortBreakError,t.longBreakContainer,t.longBreakError,t.timerAudioContainer),t.shortBreakContainer.append(t.shortBreakLabel,t.shortBreakInput,t.shortBreakBounds),t.longBreakContainer.append(t.longBreakLabel,t.longBreakInput,t.longBreakBounds),t.timerAudioContainer.append(t.timerAudioLabel,t.timerAudioInput),(e=t.timerAudioInput).append.apply(e,le(t.timerAudioOptions)),t}return o(s,[{key:"attributeChangedCallback",value:function(e,n,t){switch(e){case"short-break-length":var r=fe(t);if(null===r)return void this.setAttribute(e,n);this._shortBreakLength=r,this.shortBreakInput.value=this._shortBreakLength,this.shortBreakError.visibility="hidden";break;case"long-break-length":var o=he(t);if(null===o)return void this.setAttribute(e,n);this._longBreakLength=o,this.longBreakInput.value=this._longBreakLength,this.longBreakError.visibility="hidden";break;case"timer-audio":var a=be(t);if(null===a)return void this.setAttribute(e,n);this._timerAudio=a,this.timerAudioInput.value=this._timerAudio}}},{key:"shortBreakLength",get:function(){return this._shortBreakLength},set:function(e){var n=fe(e);null!==n&&(this._shortBreakLength=n,this.setAttribute("short-break-length",this._shortBreakLength))}},{key:"longBreakLength",get:function(){return this._longBreakLength},set:function(e){var n=he(e);null!==n&&(this._longBreakLength=n,this.setAttribute("long-break-length",this._longBreakLength))}},{key:"timerAudio",get:function(){return this._timerAudio},set:function(e){var n=be(e);null!==n&&(this._timerAudio=n,this.setAttribute("timer-audio",this._timerAudio))}}],[{key:"observedAttributes",get:function(){return["short-break-length","long-break-length","timer-audio"]}}]),s}(d(HTMLElement));function ke(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ee(n){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ke(Object(r),!0).forEach((function(t){e(n,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):ke(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}var ye,Ce,Be,we,xe,Se,Le,Te,Oe,Pe,Ie,je,_e,Ne,Re,qe,De=[],Ye=!0,Ue=function(){window.localStorage.setItem(T,JSON.stringify(De))},Ze=function(e){var n=e.name;return{taskIndex:De.findIndex((function(e){return e.name===n})),taskElement:Ce.querySelector('[name="'.concat(n,'"]'))}},We=function(e){return{delete:Array.from(e.shadowRoot.querySelectorAll(".task-button")).find((function(e){return"delete-button"===e.getAttribute("id")}))}},Me=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"end";if("end"!==n&&"start"!==n){var t=Ze(n),r=t.taskElement;r.before(e)}else"end"===n?Ce.append(e):"start"===n&&Ce.prepend(e);return e},ze=function(e){var n=Ze(e).taskElement;return n.remove(),n},Ve=function(e,n){var t=Ze(e),r=t.taskIndex,o=t.taskElement;return De[r]=n,Ue(),Object.getOwnPropertyNames(n).forEach((function(e){o[e]=n[e]})),n},He=function(e){var n=De.find((function(e){return e.selected}));n&&Ve(n,Ee(Ee({},n),{},{selected:!1}));var t=Ze(e),r=t.taskElement,o=t.taskIndex;ze(e),Me(r,"start"),De.splice(o,1),De.unshift(e);var a=Ee(Ee({},e),{},{selected:!0});return D(P.changeSelectedTask,a),Ve(e,a)},Fe=function(e){var n=Ze(e).taskElement,t=n.shadowRoot,r=t.querySelector(".item-container"),o=t.querySelector(".text-container");Ye?r.classList.remove("disabled"):r.classList.add("disabled"),Ye&&!e.completed?o.onclick=function(){return He(e)}:o.onclick=null;var a=We(n);Object.values(a).forEach((function(e){e.disabled=!Ye}))},Ge=function(e){var n=e.name,t=e.usedPomodoros,r=e.estimatedPomodoros,o=e.selected,a=e.completed,i=M("task-item",{name:n,usedPomodoros:t,estimatedPomodoros:r,selected:o}),s=i.shadowRoot.querySelector(".text-container"),c=We(i).delete;return a||(s.onclick=function(){return He(e)}),c.onclick=function(){return t=Ze(n=e).taskIndex,De.splice(t,1),window.localStorage.setItem(T,JSON.stringify(De)),void ze(n);var n,t},i},Xe=function(e){e.preventDefault();var n=xe,t=n.name,r=n.pomodoro,o=t.value,a=r.value,i=o.trim(),s=Number(a);t.focus();var c=function(e){var n=Ge(e),t=De.findIndex((function(e){return e.completed}));return-1!==t?(De.splice(t,0,e),Me(n,De[t+1])):(De.push(e),Me(n)),Ue(),e}({name:i,estimatedPomodoros:s,usedPomodoros:0,selected:!1,completed:!1});Ye||Fe(c),Object.values(xe).forEach((function(e){e.value=""}))},Qe=function(e){var n=e.target.value.trim();De.some((function(e){return e.name===n}))?e.target.setCustomValidity("Duplicate task."):e.target.setCustomValidity("")},Je=function(){return De.length>0&&!De[0].completed?He(De[0]):null},$e=function(){De.forEach((function(e){Ve(e,Ee(Ee({},e),{},{selected:!1}))}))},Ke=function(e){Ye=e,De.forEach(Fe)},en=function(e){var n=ce(e);null!==n&&(Se.progress=n)},nn=function(n){var t,r=(Se=n).shadowRoot.querySelector(".overlay-circle");q((e(t={},P.changeSession,(function(e){"inactive"===e.session&&(en(100),r.setAttribute("class","overlay-circle pomodoro"))})),e(t,P.changeCurrentInterval,(function(e){switch(en(100),e.currentInterval){case C:r.setAttribute("class","overlay-circle pomodoro");break;case B:r.setAttribute("class","overlay-circle short-break");break;case w:r.setAttribute("class","overlay-circle long-break")}})),e(t,P.changeCurrentTime,(function(e){if("active"===e.session){var n;switch(e.currentInterval){case C:n=e.pomodoroLength;break;case B:n=e.shortBreakLength;break;case w:n=e.longBreakLength;break;default:return}var t=100*e.currentTime/(60*n);en(t)}})),t))},tn=function(e){Le.time=e},rn=function(n){var t;Le=n;var r=q((e(t={},P.changeSession,(function(e){"inactive"===e.session&&tn(60*e.pomodoroLength)})),e(t,P.changeCurrentTime,(function(e){"active"===e.session&&tn(e.currentTime)})),t)).pomodoroLength;tn(60*r)},on=function(e){var n=de(e);null!==n&&(Te.circleCount=n)},an=function(n){var t;Te=n,q((e(t={},P.changeSession,(function(e){"inactive"===e.session&&on(0)})),e(t,P.changeCurrentInterval,(function(e){"active"===e.session&&(e.currentInterval===C?e.numberOfPomodorosCompleted%4==0&&on(0):on((e.numberOfPomodorosCompleted-1)%4+1))})),t))},sn=new Audio;sn.volume=.2;var cn,un,ln,mn,dn,An,pn,fn,hn,bn,gn,vn,kn,En,yn,Cn=function(e){var n=fe(e);null!==n&&(Oe.shortBreakLength=n)},Bn=function(e){var n=he(e);null!==n&&(Oe.longBreakLength=n)},wn=function(e){var n=be(e);null!==n&&(Oe.timerAudio=n)},xn=function(){sn.src="",sn.play().catch((function(){return!0})),Pe.classList.add("active"),je.classList.add("active"),_e.value=Oe.shortBreakLength,Ne.value=Oe.longBreakLength,Re.value=Oe.timerAudio},Sn=function(){sn.pause(),Pe.classList.remove("active"),je.classList.remove("active"),qe.forEach((function(e){e.style.display="none"}))},Ln=Sn,Tn=function(e){var n=function(){var e,n;try{e=JSON.parse(window.localStorage.getItem(x)),n=JSON.parse(window.localStorage.getItem(S))}catch(t){e=null,n=null}return e&&null!==fe(e)||(e=5,window.localStorage.setItem(x,e)),n&&null!==he(n)||(n=15,window.localStorage.setItem(S,n)),{shortBreakLength:e,longBreakLength:n}}(),t=n.shortBreakLength,r=n.longBreakLength;!function(e){var n=(Oe=e).shadowRoot;Pe=n.querySelector(".popup-container"),_e=n.querySelector("#short-break-input"),Ne=n.querySelector("#long-break-input"),Re=n.querySelector("#timer-audio-input"),qe=n.querySelectorAll(".error-message"),Ie=n.querySelector(".save-button"),je=n.querySelector("#overlay")}(e),Cn(t),Bn(r),D(P.changeShortBreakLength,t),D(P.changeLongBreakLength,r);var o=window.localStorage.getItem(L);null===be(o)?(wn(O.calm),window.localStorage.setItem(L,O.calm),D(P.changeTimerAudio,O.calm)):(wn(o),D(P.changeTimerAudio,o)),je.onclick=Sn,Ie.addEventListener("click",(function(){var e=function(){var e=fe(_e.value),n=he(Ne.value),t=be(Re.value),r=null!==e,o=null!==n;return qe[0].style.display=r?"none":"initial",qe[1].style.display=o?"none":"initial",r&&o?(Cn(e),Bn(n),wn(t),D(P.changeShortBreakLength,e),D(P.changeLongBreakLength,n),D(P.changeTimerAudio,t),window.localStorage.setItem(x,e),window.localStorage.setItem(S,n),window.localStorage.setItem(L,t),[e,n]):null}();e&&(Ln(),D(P.changeShortBreakLength,e[0]),D(P.changeLongBreakLength,e[1]))})),Re.onchange=function(){sn.pause(),sn.src=Re.value,sn.play().catch((function(){return!0}))}},On=function(e){un.innerText=e},Pn=function(e){"visible"===e?(ln.classList.remove("hidden"),mn.classList.remove("hidden")):(ln.classList.add("hidden"),mn.classList.add("hidden"))},In=function(n){var t;un=(cn=n).querySelector(".announcement"),ln=cn.querySelector(".announcement-yes-button"),mn=cn.querySelector(".announcement-no-button"),ln.onmousedown=function(e){return e.preventDefault()},mn.onmousedown=function(e){return e.preventDefault()},ln.onclick=function(){return D(P.completeSelectedTask)},mn.onclick=function(){return D(P.doNotCompleteSelectedTask)},On("What do you need to work on today?"),q((e(t={},P.changeSession,(function(e){"inactive"===e.session?(null!==e.currentSelectedTask||e.completedTasks.length>0?On("Good work today!"):On("Add a task to get started!"),Pn("hidden")):"active"===e.session&&On(k)})),e(t,P.changeCurrentInterval,(function(e){if("active"===e.session)switch(G(e.currentInterval,[ln,mn]),e.currentInterval){case C:On(k);break;case B:case w:On("Did you finish the task?"),Pn("visible")}})),e(t,P.changeSelectedTask,(function(e){null!==e.currentSelectedTask&&("inactive"===e.session?On("Hit start to begin your pomodoro session!"):"active"===e.session&&(e.currentInterval===B?On(E):e.currentInterval===w&&On(y)))})),e(t,P.completeSelectedTask,(function(){Pn("hidden"),On("Select a new task!")})),e(t,P.doNotCompleteSelectedTask,(function(e){Pn("hidden"),e.currentInterval===B?On(E):e.currentInterval===w&&On(y)})),t))},jn=function(){dn.classList.remove("active")},_n=function(e){!function(e){An=(dn=e).querySelector("#confirmation-popup"),pn=An.querySelector(".confirmation-no-button"),fn=An.querySelector(".confirmation-yes-button")}(e),pn.onmousedown=function(e){return e.preventDefault()},fn.onmousedown=function(e){return e.preventDefault()},fn.onclick=function(){jn(),D(P.changeSession,"inactive")},pn.onclick=jn,dn.onclick=jn,An.onclick=function(e){return e.stopPropagation()}};function Nn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Rn(n){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Nn(Object(r),!0).forEach((function(t){e(n,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):Nn(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}var qn,Dn,Yn,Un,Zn,Wn,Mn,zn,Vn,Hn,Fn,Gn=function(){hn.classList.remove("active"),gn.innerHTML=""},Xn=function(e,n){!function(e){bn=(hn=e).querySelector("#summary-popup"),gn=hn.querySelector(".task-summary-list"),vn=hn.querySelector("#summary-pomodoros"),kn=hn.querySelector("#summary-tasks"),En=hn.querySelector("#summary-time"),yn=hn.querySelector(".summary-close-button")}(e);var t=q(),r=t.currentInterval,o=t.currentTime,a=t.completedTasks,i=t.numberOfPomodorosCompleted;!function(e,n){var t=e.filter((function(e){return e.completed&&e.usedPomodoros<=e.estimatedPomodoros&&n.some((function(n){return n.name===e.name}))})).map((function(e){return Rn(Rn({},e),{},{status:"complete under-budget"})})),r=e.filter((function(e){return e.completed&&e.usedPomodoros>e.estimatedPomodoros&&n.some((function(n){return n.name===e.name}))})).map((function(e){return Rn(Rn({},e),{},{status:"complete over-budget"})})),o=e.filter((function(e){return!e.completed&&e.usedPomodoros>0})).map((function(e){return Rn(Rn({},e),{},{status:"in-progress"})})),a=e.filter((function(e){return!e.completed&&0===e.usedPomodoros})).map((function(e){return Rn(Rn({},e),{},{status:"not-started"})})),i=e.filter((function(e){return e.completed&&!n.some((function(n){return n.name===e.name}))})).map((function(e){return Rn(Rn({},e),{},{status:"complete old"})}));[].concat(le(t),le(r),le(o),le(a),le(i)).forEach((function(e){var n=function(e){var n=e.name,t=e.usedPomodoros,r=e.estimatedPomodoros,o=e.status,a=M("div",{className:"task-summary-item ".concat(o)}),i=M("span",{className:"task-summary-name",innerText:n}),s=M("span",{className:"task-summary-pomodoros",innerText:"".concat(t,"/").concat(r)});return a.append(i,s),a}(e);gn.append(n)}))}(n,a);var s,c,u,l,m=function(e){var n=q(),t=n.totalSessionTime,r=n.shortBreakLength,o=n.longBreakLength,a=e.intervalName,i=e.timeRemaining;return a===B&&-1!==i?t+(60*r-i):a===w&&-1!==i?t+(60*o-i):t}({intervalName:r,timeRemaining:o});vn.innerText="Number of pomodoros completed: ".concat(i),kn.innerText="Number of tasks completed: ".concat(a.length),En.innerText="Total session time: ".concat((s=m,c=Math.floor(s/3600),u=Math.floor(s%3600/60),l=s%60,[c>0?"".concat(c,"h"):"",u>0?"".concat(u,"m"):"",l>0||0===c&&0===u?"".concat(l,"s"):""].filter((function(e){return""!==e})).join(" "))),yn.onclick=Gn,yn.onmousedown=function(e){return e.preventDefault()},hn.onclick=Gn,bn.onclick=function(e){return e.stopPropagation()}},Qn=function(){var e=U(W().mark((function e(n){return W().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:D(P.changeCurrentTime,n);case 1:if(!(Un>=0)){e.next=9;break}if("inactive"!==qn){e.next=4;break}return e.abrupt("return",!1);case 4:return e.next=6,F(1);case 6:"active"===qn&&D(P.changeCurrentTime,Un-1),e.next=1;break;case 9:return e.abrupt("return",!0);case 10:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Jn=function(){var e=U(W().mark((function e(){var n,t;return W().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("active"!==qn){e.next=30;break}if(Zn!==C){e.next=18;break}if(Wn){e.next=5;break}return D(P.changeSession,"inactive"),e.abrupt("return");case 5:return e.next=7,Qn(60*Mn);case 7:if(e.sent){e.next=10;break}return e.abrupt("return");case 10:D(P.incrementSelectedTask),D(P.changeNumberOfPomodoros,Yn+1),D(P.changeTotalSessionTime,Dn+60*Mn),D(P.changeCurrentInterval,Yn>0&&Yn%4==0?w:B),e.next=28;break;case 18:return Fn=!1,n=Zn===w?Vn:zn,e.next=22,Qn(60*n);case 22:if(t=e.sent,Fn||D(P.doNotCompleteSelectedTask),t){e.next=26;break}return e.abrupt("return");case 26:D(P.changeTotalSessionTime,Dn+60*n),D(P.changeCurrentInterval,C);case 28:e.next=0;break;case 30:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();const $n=function(){var n,t=document.querySelector("#main"),r=document.querySelector(".navbar"),o=document.querySelector(".footer"),a=document.querySelector(".session-button"),i=document.querySelector(".material-icons"),s=document.querySelector(".progress-ring").shadowRoot.querySelector(".timer"),c=[t,r,a,o],u=q((e(n={},P.changeSession,(function(e){"active"===(qn=e.session)?(a.innerText="End",a.classList.add("session-button","in-session")):"inactive"===qn&&(G(C,c),a.innerText="Start",a.classList.remove("in-session"),Yn>0&&(Xn(document.querySelector("#summary-overlay"),De),hn.classList.add("active")),D(P.changeTotalSessionTime,0),D(P.changeCurrentTime,0),D(P.changeCurrentInterval,C),D(P.changeSelectedTask,null),D(P.changeNumberOfPomodoros,0),D(P.clearCompletedTasks))})),e(n,P.changeTotalSessionTime,(function(e){Dn=e.totalSessionTime})),e(n,P.changeNumberOfPomodoros,(function(e){Yn=e.numberOfPomodorosCompleted})),e(n,P.changeCurrentTime,(function(e){Un=e.currentTime})),e(n,P.changeCurrentInterval,(function(e){Zn=e.currentInterval,G(Zn,c),"active"===e.session&&e.numberOfPomodorosCompleted>0&&(Hn.pause(),Hn.play().catch((function(){return!0})))})),e(n,P.changeSelectedTask,(function(e){Wn=e.currentSelectedTask})),e(n,P.changePomodoroLength,(function(e){Mn=e.pomodoroLength})),e(n,P.changeShortBreakLength,(function(e){zn=e.shortBreakLength})),e(n,P.changeLongBreakLength,(function(e){Vn=e.longBreakLength})),e(n,P.changeTimerAudio,(function(e){Hn=e.timerAudio})),e(n,P.completeSelectedTask,(function(){Fn=!0})),e(n,P.doNotCompleteSelectedTask,(function(){Fn=!0})),n));qn=u.session,Dn=u.totalSessionTime,Yn=u.numberOfPomodorosCompleted,Un=u.currentTime,Zn=u.currentInterval,Wn=u.currentSelectedTask,Mn=u.pomodoroLength,zn=u.shortBreakLength,Vn=u.longBreakLength,Hn=u.timerAudio,D(P.changeShortBreakLength,.05),D(P.changeLongBreakLength,.05),i.onclick=xn,s.onclick=function(){return Hn.pause()},a.onmousedown=function(e){e.preventDefault()},le(document.querySelectorAll(".navbar-link")).forEach((function(e){e.onmousedown=function(e){return e.preventDefault()}})),a.addEventListener("click",U(W().mark((function e(){var n;return W().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("Start"!==a.innerText){e.next=10;break}return n=Hn.src,Hn.src="",Hn.play().catch((function(){return!0})),Hn.src=n,D(P.changeSession,"active"),e.next=8,Jn();case 8:e.next=11;break;case 10:dn.classList.add("active");case 11:case"end":return e.stop()}}),e)}))))};customElements.define("timer-component",ae),customElements.define("progress-ring",ue),customElements.define("task-list",ne),customElements.define("settings-component",ve),customElements.define("pomodoro-circles",Ae),window.addEventListener("DOMContentLoaded",(function(){var n,t=document.querySelector(".progress-ring"),r=t.shadowRoot.querySelector(".timer"),o=t.shadowRoot.querySelector(".circles"),a=document.querySelector(".announcement-container"),i=document.querySelector(".task-list"),s=document.querySelector("#confirmation-overlay"),c=document.querySelector(".settings");nn(t),rn(r),an(o),In(a),function(e){ye=e.shadowRoot.querySelector(".container"),Ce=ye.querySelector(".task-item-container"),Be=ye.querySelector(".task-item-form"),we=Be.shadowRoot.querySelector(".task-form"),xe={name:we.querySelector("#name-input"),pomodoro:we.querySelector("#pomodoro-input")}}(i),we.addEventListener("submit",Xe),function(){var e;try{e=JSON.parse(window.localStorage.getItem(T))}catch(n){e=null}e||(window.localStorage.setItem(T,JSON.stringify([])),e=[]),e=e.filter(Q),(De=e).forEach((function(e){return Me(Ge(e))}))}(),xe.name.oninput=Qe,$e(),q((e(n={},P.changeSession,(function(e){"inactive"===e.session?($e(),Ke(!0)):"active"===e.session&&(null===e.currentSelectedTask&&Je(),Ke(!1))})),e(n,P.changeCurrentInterval,(function(e){"active"===e.session&&e.currentInterval===C&&(null===e.currentSelectedTask&&Je(),Ke(!1))})),e(n,P.incrementSelectedTask,(function(e){if("active"===e.session){var n=(r=(t=e.currentSelectedTask).usedPomodoros,Ve(t,Ee(Ee({},t),{},{usedPomodoros:r+1})));D(P.changeSelectedTask,n)}var t,r})),e(n,P.completeSelectedTask,(function(e){if("active"===e.session){var n=function(e){var n=Ze(e).taskIndex,t=ze(e);return Me(t,"end"),t.shadowRoot.querySelector(".text-container").onclick=null,De.splice(n,1),De.push(e),Ve(e,Ee(Ee({},e),{},{selected:!1,completed:!0}))}(e.currentSelectedTask);D(P.changeSelectedTask,null),D(P.addToCompletedTasks,n),Ke(!0)}})),n)),_n(s),Tn(c),$n();var u=document.querySelector(".navbar");window.onscroll=function(){0===window.scrollY?u.classList.remove("scrolled"):u.classList.add("scrolled")}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,