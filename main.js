(()=>{"use strict";const e=(e,t={},n={})=>{const{namespace:o}=n;let s;return s=o?document.createElementNS(o,e):document.createElement(e),Object.entries(t).forEach((([e,t])=>{o||!(e in s)?s.setAttribute(e,t):s[e]=t})),s},t=e=>{const t=parseInt(e,10);return Number.isNaN(t)?null:t};class n extends HTMLElement{static get observedAttributes(){return["name","estimated-pomodoros","used-pomodoros","selected"]}constructor(){super(),this.usedPomodoros=0,this.estimatedPomodoros=0,this.shadow=this.attachShadow({mode:"open"}),this.styleElement=document.createElement("style"),this.styleElement.innerText="\n      .item-container {\n        margin-bottom: 1em;\n        padding: 0.5em 2em;\n        border-radius: 5px;\n        position: relative;\n        cursor: pointer;\n      }\n\n      .selected {\n        background: #90e0ef;\n      }\n\n      .text-container {\n        background: #fff;\n        color: #555;\n        position: relative;\n        padding: 0.5em;\n        border-radius: 5px;\n        font-size: 1rem;\n        display: flex;\n        align-items: center;\n      }\n      \n      .name {\n        width: 80%;\n        display: inline-block;\n        margin: 0.5em 0;\n      }\n      \n      .pomodoro-container {\n        width: 20%;\n        height: 100%;\n        display: inline-block;\n        position: relative;\n        text-align: right;\n      }\n\n      .pomodoro-label {\n        position: absolute;\n        top: -0.5em;\n        right: 0;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      .pomodoro {\n        display: inline-block;\n        margin: 1em 0 0 0;\n      }\n\n      .task-button {\n        display: none;\n        position: absolute;\n        padding: 0.25em;\n        font-size: 1.2rem;\n        color: #fff;\n      }\n\n      .task-button:hover {\n        border-radius: 50%;\n        background: rgba(0, 180, 216, 0.25);\n        color: #00b4d8;\n        cursor: pointer;\n      }\n\n      .item-container:hover > .task-button {\n        display: initial;\n      }\n\n\n      #edit-button {\n        top: 0;\n        right: 0;\n      }\n\n      #delete-button {\n        bottom: 0;\n        right: 0;\n      }\n    ",this.materialIconLinkElement=e("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/icon?family=Material+Icons"}),this.textContainerElement=e("div",{className:"text-container"}),this.itemContainerElement=e("div",{className:"item-container"}),this.nameElement=e("p",{className:"name"}),this.pomodoroContainer=e("span",{className:"pomodoro-container"}),this.pomodoroLabel=e("label",{className:"pomodoro-label",for:"pomodoro",innerText:"Progress"}),this.pomodoroElement=e("p",{className:"pomodoro",id:"pomodoro"}),this.editTaskButton=e("span",{className:"material-icons task-button",id:"edit-button",innerText:"mode"}),this.finishTaskButton=e("span",{className:"material-icons task-button",id:"finish-button",innerText:"done"}),this.deleteTaskButton=e("span",{className:"material-icons task-button",id:"delete-button",innerText:"delete"}),this.shadow.append(this.materialIconLinkElement,this.styleElement,this.itemContainerElement),this.itemContainerElement.append(this.textContainerElement,this.editTaskButton,this.deleteTaskButton),this.textContainerElement.append(this.nameElement,this.pomodoroContainer),this.pomodoroContainer.append(this.pomodoroLabel,this.pomodoroElement)}attributeChangedCallback(e,t,n){switch(e){case"name":this.nameElement.innerText=n;break;case"used-pomodoros":this.usedPomodoros=n,this.pomodoroElement.innerText=`${this.usedPomodoros}/${this.estimatedPomodoros}`;break;case"estimated-pomodoros":this.estimatedPomodoros=n,this.pomodoroElement.innerText=`${this.usedPomodoros}/${this.estimatedPomodoros}`;break;case"selected":this.itemContainerElement.className="true"===n?"item-container selected":"item-container"}}}customElements.define("task-item",n);class o extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.styleElement=document.createElement("style"),this.styleElement.innerText="\n      .task-form {\n        margin: 1em;\n        padding: 1em 20%;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .field-input-container {\n        margin-bottom: 1em;\n        border-radius: 5px;\n        position: relative;\n      }\n\n      .task-input-label {\n        position: absolute;\n        z-index: 2;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      #name-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      #pomodoro-input-label {\n        top: 0.2em;\n        right: 9px;\n      }\n\n      .task-input[type='text'],\n      .task-input[type='number'] {\n        padding: 1.5em 0.75em 0.75em 0.75em;\n        border: none;\n        font: 1rem 'Source Sans Pro', sans-serif;\n        color: #444;\n        box-sizing: border-box;\n      }\n\n      .task-input:focus {\n        box-shadow: 0 0 0 2pt #48cae4;\n        outline: none;\n        z-index: 1;\n        position: relative;\n      }\n\n      #name-input {\n        width: 80%;\n        border-top-left-radius: 5px;\n        border-bottom-left-radius: 5px;\n      }\n\n      #pomodoro-input {\n        width: 20%;\n        border-top-right-radius: 5px;\n        border-bottom-right-radius: 5px;\n      }\n\n      .task-input[type='text']::placeholder,\n      .task-input[type='number']::placeholder {\n        color: #c8c8c8;\n      }\n      .task-input[type='number']::placeholder {\n        text-align: center;\n      }\n\n      #submit-input {\n        width: 50%;\n        margin: auto;\n        background: #4dcfe9;\n        border-radius: 5px;\n        outline: none;\n        border: none;\n        color: white;\n        padding: 0.5em;\n        font: 1.2rem 'Source Sans Pro', sans-serif;\n      }\n\n      #submit-input:hover {\n        background: #48cae4;\n        cursor: pointer;\n      }\n    ",this.containerElement=e("form",{className:"task-form"}),this.fieldInputContainer=e("div",{className:"field-input-container"}),this.nameInputLabel=e("label",{className:"task-input-label",id:"name-input-label",for:"name-input",innerText:"Name"}),this.nameInputElement=e("input",{className:"task-input",id:"name-input",type:"text",name:"name",placeholder:"Task Description..."}),this.pomodoroInputLabel=e("label",{className:"task-input-label",id:"pomodoro-input-label",for:"pomodoro-input",innerText:"Pomodoros"}),this.pomodoroInputElement=e("input",{className:"task-input",id:"pomodoro-input",type:"number",name:"pomodoro",placeholder:"#",min:"1"}),this.submitInputElement=e("input",{className:"task-input",id:"submit-input",type:"submit",value:"ADD"}),this.shadow.append(this.styleElement,this.containerElement),this.containerElement.append(this.fieldInputContainer,this.submitInputElement),this.fieldInputContainer.append(this.nameInputLabel,this.nameInputElement,this.pomodoroInputLabel,this.pomodoroInputElement)}}customElements.define("task-item-form",o);class s extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.styleElement=document.createElement("style"),this.styleElement.innerText="\n      .container {\n        margin: 1em;\n        padding: 1em;\n        font: normal 1rem 'Source Sans Pro', sans-serif;\n        border-radius: 5px;\n        background: #00b4d8;\n        max-width: 700px;\n      }\n\n      .title {\n        text-align: center;\n        color: #fff;\n      }\n    ",this.containerElement=e("div",{className:"container"}),this.titleElement=e("h1",{className:"title",innerText:"Task List"}),this.taskItemListContainerElement=e("div",{className:"task-item-container"}),this.taskItemFormElement=e("task-item-form",{className:"task-item-form"}),this.shadow.append(this.styleElement,this.containerElement),this.containerElement.append(this.titleElement,this.taskItemListContainerElement,this.taskItemFormElement)}}customElements.define("task-list",s);let i=[];const r=e("task-list",{}),a=Array.from(r.shadowRoot.childNodes).find((e=>"container"===e.className)),m=a.querySelector(".task-item-container"),l=a.querySelector(".task-item-form"),d=Array.from(l.shadowRoot.childNodes).find((e=>"task-form"===e.className)),c=Array.from(d.querySelectorAll('.task-input[type="text"], .task-input[type="number"]')).reduce(((e,t)=>({...e,[t.name]:t})),{}),p=t=>{const{name:n,usedPomodoros:o,estimatedPomodoros:s}=t,r=e("task-item",{name:n,"used-pomodoros":o,"estimated-pomodoros":s,selected:!0}),a=(e=>{const t=Array.from(Array.from(e.shadowRoot.childNodes).find((e=>e.className.includes("item-container"))).querySelectorAll(".task-button"));return{finish:t.find((e=>"finish-button"===e.getAttribute("id"))),delete:t.find((e=>"delete-button"===e.getAttribute("id"))),edit:t.find((e=>"edit-button"===e.getAttribute("id")))}})(r);a.delete.addEventListener("click",(()=>(e=>{const{name:t}=e,{taskIndex:n,taskElement:o}=(e=>({taskIndex:i.findIndex((t=>t.name===e)),taskElement:m.querySelector(`[name="${e}"]`)}))(t);i.splice(n,1),window.localStorage.setItem("tasks",JSON.stringify(i)),o.remove()})(t))),a.edit.addEventListener("click",(()=>{console.log("editing task!")})),m.append(r)},u=e=>{e.preventDefault();const{name:{value:t},pomodoro:{value:n}}=c,o=t.trim();var s;o?n?i.some((e=>e.name===o))?console.error({name:o}," already defined"):(s={name:o,estimatedPomodoros:n,usedPomodoros:0,selected:!1},i.push(s),window.localStorage.setItem("tasks",JSON.stringify(i)),p(s),Object.values(c).forEach((e=>{e.value=""}))):console.error("task pomodoros cannot be empty"):console.error("task name cannot be empty")};class h extends HTMLElement{static get observedAttributes(){return["radius","stroke","progress"]}constructor(){super(),this.root=this.attachShadow({mode:"open"}),this.styleElement=document.createElement("style");const t="http://www.w3.org/2000/svg";this.svgElement=e("svg",{class:"svg"},{namespace:t}),this.circleElement=e("circle",{class:"circle"},{namespace:t}),this._radius=0,this._stroke=0,this._progress=0,this.updateComponent(this._radius,this._stroke,this._progress),this.root.append(this.styleElement,this.svgElement),this.svgElement.appendChild(this.circleElement)}updateComponent(e,t,n){const o=e-2*t,s=2*o*Math.PI;this.styleElement.innerText=`\n      .svg {\n        overflow: hidden;\n        width: ${2*e}px;\n        height: ${2*e}px;\n      }\n\n      .circle {\n        stroke: #0095b3;\n        stroke-dasharray: ${s} ${s};\n        stroke-dashoffset: ${(1-n/100)*s};\n        fill: transparent;\n        stroke-width: ${t};\n\n        transition: stroke-dashoffset 0.5s;\n        transform: rotate(-90deg);\n        transform-origin: 50% 50%;\n      }\n    `,this.circleElement.setAttribute("r",o),this.circleElement.setAttribute("cx",e),this.circleElement.setAttribute("cy",e)}attributeChangedCallback(e,n,o){const s=t(o);if(null!==s){switch(e){case"radius":case"stroke":if(s<0)return;break;case"progress":if("progress"===e&&(s<0||s>100))return;break;default:return}this[`_${e}`]=s,this.updateComponent(this._radius,this._stroke,this._progress)}}get radius(){return this._radius}set radius(e){const n=t(e);this.setAttribute("radius",n)}get stroke(){return this._stroke}set stroke(e){const n=t(e);this.setAttribute("stroke",n)}get progress(){return this._progress}set progress(e){const n=t(e);this.setAttribute("progress",n)}}const b=h;let k;window.customElements.define("progress-ring",b);const f=e=>{k.progress=e};window.addEventListener("DOMContentLoaded",(()=>{((t,n=0,o=0,s=0)=>{k=e("progress-ring",{radius:n,stroke:o,progress:s}),t.appendChild(k)})(document.body,Math.min(window.innerWidth/3,window.innerHeight/3),10,100),document.body.appendChild(r),d.addEventListener("submit",u),window.localStorage.getItem("tasks")||window.localStorage.setItem("tasks",JSON.stringify([])),i=JSON.parse(window.localStorage.getItem("tasks")),i.forEach((e=>p(e))),((e,t)=>{const n=setInterval((()=>{k.progress<=0&&clearInterval(n),f(k.progress-.5)}),60)})(),setTimeout((()=>{f(50)}),7e3)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,