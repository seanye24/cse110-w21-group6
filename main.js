(()=>{var t={228:t=>{t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}},858:t=>{t.exports=function(t){if(Array.isArray(t))return t}},646:(t,e,n)=>{var r=n(228);t.exports=function(t){if(Array.isArray(t))return r(t)}},506:t=>{t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},926:t=>{function e(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}t.exports=function(t){return function(){var n=this,r=arguments;return new Promise((function(o,i){var a=t.apply(n,r);function s(t){e(a,o,i,s,c,"next",t)}function c(t){e(a,o,i,s,c,"throw",t)}s(void 0)}))}}},575:t=>{t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},100:(t,e,n)=>{var r=n(489),o=n(67);function i(e,n,a){return o()?t.exports=i=Reflect.construct:t.exports=i=function(t,e,n){var o=[null];o.push.apply(o,e);var i=new(Function.bind.apply(t,o));return n&&r(i,n.prototype),i},i.apply(null,arguments)}t.exports=i},913:t=>{function e(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}},713:t=>{t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},754:t=>{function e(n){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},e(n)}t.exports=e},205:(t,e,n)=>{var r=n(489);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&r(t,e)}},430:t=>{t.exports=function(t){return-1!==Function.toString.call(t).indexOf("[native code]")}},67:t=>{t.exports=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}},860:t=>{t.exports=function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}},884:t=>{t.exports=function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}}},521:t=>{t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},206:t=>{t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},585:(t,e,n)=>{var r=n(8),o=n(506);t.exports=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?o(t):e}},489:t=>{function e(n,r){return t.exports=e=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},e(n,r)}t.exports=e},38:(t,e,n)=>{var r=n(858),o=n(884),i=n(379),a=n(521);t.exports=function(t,e){return r(t)||o(t,e)||i(t,e)||a()}},319:(t,e,n)=>{var r=n(646),o=n(860),i=n(379),a=n(206);t.exports=function(t){return r(t)||o(t)||i(t)||a()}},8:t=>{function e(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=e=function(t){return typeof t}:t.exports=e=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(n)}t.exports=e},379:(t,e,n)=>{var r=n(228);t.exports=function(t,e){if(t){if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(t,e):void 0}}},957:(t,e,n)=>{var r=n(754),o=n(489),i=n(430),a=n(100);function s(e){var n="function"==typeof Map?new Map:void 0;return t.exports=s=function(t){if(null===t||!i(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(t))return n.get(t);n.set(t,e)}function e(){return a(t,arguments,r(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o(e,t)},s(e)}t.exports=s},757:(t,e,n)=>{t.exports=n(666)},666:t=>{var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,n){return t[e]=n}}function u(t,e,n,r){var o=e&&e.prototype instanceof b?e:b,i=Object.create(o.prototype),a=new T(r||[]);return i._invoke=function(t,e,n){var r=p;return function(o,i){if(r===m)throw new Error("Generator is already running");if(r===f){if("throw"===o)throw i;return _()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=L(a,n);if(s){if(s===h)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===p)throw r=f,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=m;var c=l(t,e,n);if("normal"===c.type){if(r=n.done?f:d,c.arg===h)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=f,n.method="throw",n.arg=c.arg)}}}(t,n,a),i}function l(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var p="suspendedStart",d="suspendedYield",m="executing",f="completed",h={};function b(){}function y(){}function v(){}var g={};g[i]=function(){return this};var k=Object.getPrototypeOf,x=k&&k(k(N([])));x&&x!==n&&r.call(x,i)&&(g=x);var w=v.prototype=b.prototype=Object.create(g);function E(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function S(t,e){function n(o,i,a,s){var c=l(t[o],t,i);if("throw"!==c.type){var u=c.arg,p=u.value;return p&&"object"==typeof p&&r.call(p,"__await")?e.resolve(p.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(p).then((function(t){u.value=t,a(u)}),(function(t){return n("throw",t,a,s)}))}s(c.arg)}var o;this._invoke=function(t,r){function i(){return new e((function(e,o){n(t,r,e,o)}))}return o=o?o.then(i,i):i()}}function L(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=l(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function N(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}return{next:_}}function _(){return{value:e,done:!0}}return y.prototype=w.constructor=v,v.constructor=y,y.displayName=c(v,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,c(t,s,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},E(S.prototype),S.prototype[a]=function(){return this},t.AsyncIterator=S,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new S(u(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},E(w),c(w,s,"Generator"),w[i]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=N,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return s.type="throw",s.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),C(n),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:N(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),h}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}}},e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(8),e=n.n(t),r=n(926),o=n.n(r),i=n(757),a=n.n(i),s=n(575),c=n.n(s),u=n(913),l=n.n(u),p=n(205),d=n.n(p),m=n(585),f=n.n(m),h=n(754),b=n.n(h),y=n(957),v=n.n(y),g=n(38),k=n.n(g),x="Good work. Enjoy a longer break!",w="pomodoroInterval",E="longBreakInterval",S=function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=r.namespace;return e=o?document.createElementNS(o,t):document.createElement(t),Object.entries(n).forEach((function(t){var n=k()(t,2),r=n[0],i=n[1];o||!(r in e)?e.setAttribute(r,i):e[r]=i})),e},L=function(t){var e=parseFloat(t,10);return Number.isNaN(e)?null:e},O=function(t){return t>=3&&t<=5},C=function(t){return t>=15&&t<=30},T=function(){var t=o()(a().mark((function t(e){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise((function(t){return setTimeout(t,1e3*e)})));case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}();var N=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=b()(e);if(n){var o=b()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this)).usedPomodoros=0,t.estimatedPomodoros=0,t.shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .item-container {\n        margin-bottom: 1em;\n        padding: 0.5em 2em;\n        border-radius: 5px;\n        position: relative;\n        cursor: pointer;\n      }\n\n      .item-container:focus {\n        outline: none;\n      }\n\n      .item-container.selected {\n        background: #90e0ef;\n      }\n\n      .text-container {\n        background: rgba(255, 255, 255, 1);\n        color: #555;\n        position: relative;\n        padding: 0.5em;\n        border-radius: 5px;\n        width: 100%;\n        text-align: left;\n        font: 1rem Source Sans Pro, sans-serif;\n        border: none;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n      }\n\n      .item-container:not(.disabled):not(.selected) > .text-container:hover {\n        background: rgba(255, 255, 255, 0.8);\n      }\n\n      .text-container:focus {\n        outline: none;\n        box-shadow: 0 0 0 2pt #90e0ef;\n      }\n\n      .item-container.selected > .text-container:focus {\n        box-shadow: 0 0 0 2pt #00b4d8;\n      }\n      \n      .completed .name {\n        text-decoration: line-through;\n      }\n\n      .name {\n        width: 80%;\n        display: inline-block;\n        margin: 0.5em 0;\n      }\n      \n      .pomodoro-container {\n        width: 20%;\n        height: 100%;\n        display: inline-block;\n        position: relative;\n        text-align: right;\n      }\n\n      .pomodoro-label {\n        position: absolute;\n        top: -0.5em;\n        right: 0;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      .pomodoro {\n        display: inline-block;\n        margin: 1em 0 0 0;\n      }\n\n      .task-button {\n        opacity: 0;\n        position: absolute;\n        border: none;\n        padding: 0.25em;\n        color: rgba(255, 255, 255, 1); \n        background: transparent;\n        border-radius: 50%;\n      }\n\n      .item-container:hover:not(.disabled) > .task-button,\n      .task-button:focus {\n        opacity: 1;\n      }\n\n      .task-button:focus {\n        outline: none;\n        z-index: 1;\n        position: absolute;\n      }\n\n      .task-button:focus {\n        box-shadow: inset 0 0 0 2pt #90e0ef;\n      }\n\n      .item-container.selected > .task-button:focus {\n        box-shadow: inset 0 0 0 2pt #00b4d8;\n      }\n\n      .task-button:hover {\n        border-radius: 50%;\n        color: rgba(255, 255, 255, 0.8); \n        cursor: pointer;\n        background: rgba(255, 255, 255, 0.3);\n      }\n\n      .item-container.selected > .task-button,\n      .item-container.selected > .task-button:hover {\n        color: rgba(0, 0, 0, 0.54);\n      }\n\n      .task-button:disabled {\n        opacity: 0;\n      }\n\n      .task-button-icon {\n        font-size: 1.2rem;\n      }\n\n      #delete-button {\n        top: 50%;\n        right: 0;\n        transform: translate(0, -50%);\n      }\n    ",t.materialIconLinkElement=S("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/icon?family=Material+Icons"}),t.itemContainerElement=S("div",{className:"item-container"}),t.textContainerElement=S("button",{className:"text-container",onmouseout:function(t){t.target.blur()},onmousedown:function(t){t.preventDefault()}}),t.nameElement=S("p",{className:"name"}),t.pomodoroContainer=S("span",{className:"pomodoro-container"}),t.pomodoroLabel=S("label",{className:"pomodoro-label",for:"pomodoro",innerText:"Pomodoros"}),t.pomodoroElement=S("p",{className:"pomodoro",id:"pomodoro"}),t.deleteTaskButton=S("button",{className:"task-button",id:"delete-button",onmouseout:function(t){t.target.blur()},onmousedown:function(t){t.preventDefault()}}),t.deleteTaskIcon=S("span",{className:"material-icons task-button-icon",innerText:"delete"}),t.shadow.append(t.materialIconLinkElement,t.styleElement,t.itemContainerElement),t.itemContainerElement.append(t.textContainerElement,t.deleteTaskButton),t.deleteTaskButton.appendChild(t.deleteTaskIcon),t.textContainerElement.append(t.nameElement,t.pomodoroContainer),t.pomodoroContainer.append(t.pomodoroLabel,t.pomodoroElement),t}return l()(o,[{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"name":this.nameElement.innerText=n;break;case"used-pomodoros":this.usedPomodoros=n,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"estimated-pomodoros":this.estimatedPomodoros=n,this.pomodoroElement.innerText="".concat(this.usedPomodoros,"/").concat(this.estimatedPomodoros);break;case"selected":"true"===n?this.itemContainerElement.classList.add("selected"):this.itemContainerElement.classList.remove("selected");break;case"completed":"true"===n?this.itemContainerElement.classList.add("completed"):this.itemContainerElement.classList.remove("completed")}}}],[{key:"observedAttributes",get:function(){return["name","estimated-pomodoros","used-pomodoros","selected","completed"]}}]),o}(v()(HTMLElement));customElements.define("task-item",N);const _=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=b()(e);if(n){var o=b()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this)).shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .container {\n        padding: 1em;\n        font: normal 1rem 'Source Sans Pro', sans-serif;\n        border-radius: 5px;\n        background: #00b4d8;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        box-sizing: border-box;\n      }\n\n      .task-item-container {\n        flex: 1;\n        overflow: auto;\n      }\n\n      .title {\n        text-align: center;\n        color: #fff;\n        margin-top: 0;\n      }\n    ",t.containerElement=S("div",{className:"container"}),t.titleElement=S("h1",{className:"title",innerText:"Task List"}),t.taskItemListContainerElement=S("div",{className:"task-item-container"}),t.taskItemFormElement=S("task-item-form",{className:"task-item-form"}),t.shadow.append(t.styleElement,t.containerElement),t.containerElement.append(t.titleElement,t.taskItemListContainerElement,t.taskItemFormElement),t}return o}(v()(HTMLElement));var P=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=b()(e);if(n){var o=b()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this)).shadow=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style"),t.styleElement.innerText="\n      .task-form {\n        margin: 1em;\n        padding: 1em ;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .field-input-container {\n        margin-bottom: 1em;\n        border-radius: 5px;\n        position: relative;\n        width: 100%;\n        display: flex;\n      }\n\n      .name-input-container {\n        flex: 4;\n        position: relative;\n      }\n\n      .pomodoro-input-container {\n        flex: 1;\n        min-width: 95px;\n        position: relative;\n      }\n\n      .task-input-label {\n        position: absolute;\n        z-index: 2;\n        font: 0.8rem 'Source Sans Pro', sans-serif;\n        color: #777;\n      }\n\n      #name-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      #pomodoro-input-label {\n        top: 0.2em;\n        left: 0.75em;\n      }\n\n      .task-input[type='text'],\n      .task-input[type='number'] {\n        padding: 1.5em 0.75em 0.75em 0.75em;\n        border: none;\n        font: 1rem 'Source Sans Pro', sans-serif;\n        color: #444;\n        box-sizing: border-box;\n        width: 100%;\n      }\n\n      .task-input:focus {\n        box-shadow: 0 0 0 2pt #90e0ef;\n        outline: none;\n        z-index: 1;\n        position: relative;\n      }\n\n      #name-input {\n        border-top-left-radius: 5px;\n        border-bottom-left-radius: 5px;\n      }\n\n      #pomodoro-input {\n        border-top-right-radius: 5px;\n        border-bottom-right-radius: 5px;\n      }\n\n      .task-input[type='text']::placeholder,\n      .task-input[type='number']::placeholder {\n        color: #c8c8c8;\n      }\n\n      #submit-input {\n        width: 50%;\n        margin: auto;\n        background: rgb(77, 207, 233);\n        border-radius: 5px;\n        outline: none;\n        border: none;\n        color: white;\n        padding: 0.5em;\n        font: 1.2rem 'Source Sans Pro', sans-serif;\n      }\n\n      #submit-input:hover {\n        background: rgb(112, 216, 237);\n        cursor: pointer;\n      }\n    ",t.containerElement=S("form",{className:"task-form"}),t.fieldInputContainer=S("div",{className:"field-input-container"}),t.nameInputContainer=S("div",{className:"name-input-container"}),t.nameInputLabel=S("label",{className:"task-input-label",id:"name-input-label",for:"name-input",innerText:"Name"}),t.nameInputElement=S("input",{className:"task-input",id:"name-input",type:"text",name:"name",placeholder:"Task Description...",required:!0}),t.pomodoroInputContainer=S("div",{className:"pomodoro-input-container"}),t.pomodoroInputLabel=S("label",{className:"task-input-label",id:"pomodoro-input-label",for:"pomodoro-input",innerText:"Est Pomodoros"}),t.pomodoroInputElement=S("input",{className:"task-input",id:"pomodoro-input",type:"number",name:"pomodoro",placeholder:"#",min:"1",required:!0}),t.submitInputElement=S("input",{className:"task-input",id:"submit-input",type:"submit",value:"ADD"}),t.shadow.append(t.styleElement,t.containerElement),t.containerElement.append(t.fieldInputContainer,t.submitInputElement),t.fieldInputContainer.append(t.nameInputContainer,t.pomodoroInputContainer),t.nameInputContainer.append(t.nameInputLabel,t.nameInputElement),t.pomodoroInputContainer.append(t.pomodoroInputLabel,t.pomodoroInputElement),t}return o}(v()(HTMLElement));customElements.define("task-item-form",P);const j=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=b()(e);if(n){var o=b()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this))._time=t.getAttribute("time"),t._containerRadius=t.getAttribute("container-radius"),t.styleElement=S("style",{innerText:"\n        .container {\n          font: initial 'Duru-Sans', sans-serif;\n          color: #fff;\n        }\n      "}),t.shadow=t.attachShadow({mode:"open"}),t.timerContainer=S("div",{className:"container"}),t.shadow.append(t.styleElement,t.timerContainer),t}return l()(o,[{key:"attributeChangedCallback",value:function(t,e,n){var r,o,i,a,s,c,u=parseInt(n,10);if(!Number.isNaN(u))switch(t){case"time":(c=n)>=0&&c<3600&&(this._time=u,this.timerContainer.innerText=(r=this._time,o=[Math.floor(r/60),Math.floor(r%60)].map((function(t){return t<10?"0".concat(t):t})),a=(i=k()(o,2))[0],s=i[1],"".concat(a,":").concat(s)));break;case"container-radius":this._containerRadius=u,this.styleElement.innerText="\n            .container {\n              font: ".concat(this._containerRadius/30,"em 'Duru-Sans', sans-serif; \n              color: #fff;\n            }\n          ")}}},{key:"time",get:function(){return this._time},set:function(t){this._time=t,this.setAttribute("time",this._time)}},{key:"containerRadius",get:function(){return this._containerRadius},set:function(t){this._containerRadius=t,this.setAttribute("container-radius",this._containerRadius)}}],[{key:"observedAttributes",get:function(){return["time","container-radius"]}}]),o}(v()(HTMLElement));const I=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=b()(e);if(n){var o=b()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;c()(this,o),(t=r.call(this)).root=t.attachShadow({mode:"open"}),t.styleElement=document.createElement("style");var e="http://www.w3.org/2000/svg";return t.svgElement=S("svg",{class:"svg"},{namespace:e}),t.circleElement=S("circle",{class:"circle"},{namespace:e}),t.baseCircleElement=S("circle",{class:"base-circle"},{namespace:e}),t.foreignObjectElement=S("foreignObject",{class:"foreign-object"},{namespace:e}),t.foreignObjectContainer=S("div",{class:"foreign-object-container"}),t.timerComponent=S("timer-component",{className:"timer",time:0}),t.root.append(t.styleElement,t.svgElement),t.svgElement.append(t.baseCircleElement,t.circleElement,t.foreignObjectElement),t.foreignObjectElement.appendChild(t.foreignObjectContainer),t.foreignObjectContainer.append(t.timerComponent),t._radius=0,t._stroke=0,t._progress=0,t.updateComponent(t._radius,t._stroke,t._progress),t}return l()(o,[{key:"updateComponent",value:function(t,e,n){var r=t-2*e,o=2*r*Math.PI;this.styleElement.innerText="\n      .svg {\n        overflow: hidden;\n        width: ".concat(2*t,"px;\n        height: ").concat(2*t,"px;\n      }\n\n      .base-circle {\n        stroke: #fff;\n        stroke-dasharray: ").concat(o," ").concat(o,";\n        stroke-dashoffset: 0;\n        stroke-width: ").concat(e,";\n        fill: #48cae4;\n      }\n\n      .circle {\n        stroke: #0095b3;\n        stroke-dasharray: ").concat(o," ").concat(o,";\n        stroke-dashoffset: ").concat((1-n/100)*o,";\n        stroke-width: ").concat(e+2,";\n        fill: transparent;\n\n        transition: stroke-dashoffset 0.5s;\n        transform: rotate(-90deg);\n        transform-origin: 50% 50%;\n      }\n\n      .foreign-object {\n      }\n\n      .foreign-object-container {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n      }\n    "),this.foreignObjectElement.setAttribute("width",2*t),this.foreignObjectElement.setAttribute("height",2*t),this.circleElement.setAttribute("r",r),this.circleElement.setAttribute("cx",t),this.circleElement.setAttribute("cy",t),this.baseCircleElement.setAttribute("r",r),this.baseCircleElement.setAttribute("cx",t),this.baseCircleElement.setAttribute("cy",t),this.timerComponent.containerRadius=t}},{key:"attributeChangedCallback",value:function(t,e,n){var r=L(n);if(null!==r){switch(t){case"radius":case"stroke":if(r<0)return;break;case"progress":if("progress"===t&&(r<0||r>100))return;break;default:return}this["_".concat(t)]=r,this.updateComponent(this._radius,this._stroke,this._progress)}}},{key:"radius",get:function(){return this._radius},set:function(t){var e=L(t);this.setAttribute("radius",e)}},{key:"stroke",get:function(){return this._stroke},set:function(t){var e=L(t);this.setAttribute("stroke",e)}},{key:"progress",get:function(){return this._progress},set:function(t){var e=L(t);this.setAttribute("progress",e)}}],[{key:"observedAttributes",get:function(){return["radius","stroke","progress"]}}]),o}(v()(HTMLElement));const B=function(t){d()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=b()(e);if(n){var o=b()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return f()(this,t)});function o(){var t;return c()(this,o),(t=r.call(this))._shortBreak=t.getAttribute("shortBreakLength"),t._longBreak=t.getAttribute("longBreakLength"),t._timerSound=t.getAttribute("timerSound"),t.styleElement=S("style",{innerText:"\n          .popup {\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%) scale(0);\n            transition: 200ms ease-in-out;\n            border-radius: 10px;\n            z-index: 5;\n            background-color: white;\n            width: 700px;\n            max-width: 80%;\n          }\n          \n          .popup.active {\n            transform: translate(-50%, -50%) scale(1);\n          }\n          \n          .settings-title {\n            font: 2rem 'Source Sans Pro', sans-serif;\n            color: #777;\n            letter-spacing: 0.1em;\n            margin: 0;\n          }\n          \n          .settings-hr {\n            margin-top: 0;\n            margin-bottom: 1.5em;\n          }\n          \n          .content {\n            font: 1.1rem 'Duru Sans', sans-serif;\n            padding: 20px;\n          }\n          \n          .content .form-input input {\n            text-decoration: none;\n            font: 1.1rem 'Duru Sans', sans-serif;\n            border: none;\n            text-align: center;\n            margin-left: 0.5em;\n          }\n          \n          .content .form-input {\n            text-align: center;\n            margin-bottom: 1em;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n          }\n          \n          .content .form-input .bounds {\n            color: #808080;\n            margin-left: 1em;\n          }\n\n          .content .form-input label {\n            line-height: 35px;\n            margin-right: 0.5em\n          }\n\n          select {\n            cursor: pointer;\n            font: 0.85rem 'Duru Sans', sans-serif;\n            display: inline-block;\n            vertical-align: middle;\n            padding: 5px;\n            width: 225px;\n            border: 1px solid #FFF;\n            height: 34px;\n            -webkit-appearance: none;\n            -moz-appearance: none;\n            appearance: none;\n            background: url(assets/sound.png) 96% / 10% no-repeat #EEE;\n          }\n          \n          .content button {\n            background-color: rgba(72, 202, 228, 1);\n            border: none;\n            border-radius: .25rem;\n            color: white;\n            font: 1.1rem 'Duru Sans', sans-serif;\n            text-align: center;\n            text-decoration: none;\n            margin: 1.5em auto 0.5em auto;\n            padding: 0.5em;\n            display: block;\n            width: 75%;\n            cursor: pointer;\n          }\n\n          .content button:hover {\n            background-color: rgba(72, 202, 228, 0.8);\n          }\n          \n          .content .error {\n            color: red;\n            position: absolute;\n            margin-top: 50px;\n            visibility: hidden;\n          }\n          \n          #overlay {\n            position: fixed;\n            opacity: 0;\n            transition: 200ms ease-in-out;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n            pointer-events: none;\n            z-index: 4;\n            cursor: pointer;\n          }\n          \n          #overlay.active {\n            opacity: 1;\n            pointer-events: all;\n          }\n        "}),t.shadow=t.attachShadow({mode:"open"}),t.popupContainer=S("div",{className:"popup",id:"popup"}),t.contentContainer=S("div",{className:"content"}),t.popupTitle=S("h1",{className:"settings-title",innerText:"SETTINGS"}),t.popupTitleLine=S("hr",{className:"settings-hr"}),t.inputContainerShort=S("div",{className:"form-input"}),t.inputLabelShort=S("label",{innerText:"Short Break: ",for:"short-number"}),t.inputBoxShort=S("input",{id:"short-number",name:"short-number",type:"number",min:"3",max:"5",value:t._shortBreak}),t.inputBoundShort=S("span",{className:"bounds",innerText:"3 - 5 minutes"}),t.inputErrorShort=S("p",{className:"error",innerText:"Please enter valid entry"}),t.inputErrorShort.style.visibility="hidden",t.inputContainerLong=S("div",{className:"form-input"}),t.inputLabelLong=S("label",{innerText:"Long Break: ",for:"long-number"}),t.inputBoxLong=S("input",{id:"long-number",name:"long-number",type:"number",min:"15",max:"30",value:t._longBreak}),t.inputBoundLong=S("span",{className:"bounds",innerText:"15 - 30 minutes"}),t.inputErrorLong=S("p",{className:"error",innerText:"Please enter valid entry"}),t.inputErrorLong.style.visibility="hidden",t.inputContainerSound=S("div",{className:"form-input"}),t.inputLabelSound=S("label",{for:"sound",innerText:"Sound: "}),t.inputBoxSound=S("select",{name:"sound",id:"sound"}),t.soundOption1=S("option",{value:"assets/calm-alarm.mp3",innerText:"Calm Alarm"}),t.soundOption2=S("option",{value:"assets/original-alarm.mp3",innerText:"Orginal Alarm"}),t.soundOption3=S("option",{value:"assets/kanye-stop.mp3",innerText:"Kanye Telling You to Stop"}),t.saveButton=S("button",{innerText:"SAVE",className:"save-button"}),t.overlayEl=S("div",{id:"overlay"}),t.inputContainerShort.append(t.inputLabelShort,t.inputBoxShort,t.inputBoundShort,t.inputErrorShort),t.inputContainerLong.append(t.inputLabelLong,t.inputBoxLong,t.inputBoundLong,t.inputErrorLong),t.inputBoxSound.append(t.soundOption1,t.soundOption2,t.soundOption3),t.inputContainerSound.append(t.inputLabelSound,t.inputBoxSound),t.contentContainer.append(t.popupTitle,t.popupTitleLine,t.inputContainerShort,t.inputContainerLong,t.inputContainerSound,t.saveButton),t.popupContainer.append(t.contentContainer),t.shadow.append(t.styleElement,t.popupContainer,t.overlayEl),t}return l()(o,[{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"shortBreakLength":O(n)&&(this._shortBreak=n,this.inputBoxShort.value=n,this.inputErrorShort.visibility="hidden");break;case"longBreakLength":C(n)&&(this._longBreak=n,this.inputBoxLong.value=n,this.inputErrorLong.visibility="hidden");break;case"timerSound":this._timerSound=n,this.inputBoxSound.value=n}}},{key:"shortBreak",get:function(){return this._shortBreak},set:function(t){this._shortBreak=t,this.setAttribute("shortBreakLength",this._shortBreak)}},{key:"longBreak",get:function(){return this._longBreak},set:function(t){this._longBreak=t,this.setAttribute("longBreakLength",this._longBreak)}},{key:"timerSound",get:function(){return this._timerSound},set:function(t){this._timerSound=t,this.setAttribute("timerSound",this._timerSound)}}],[{key:"observedAttributes",get:function(){return["shortBreakLength","longBreakLength","timerSound"]}}]),o}(v()(HTMLElement));var A=n(713),R=n.n(A);function q(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function D(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?q(Object(n),!0).forEach((function(e){R()(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):q(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var M,F,G,z,H,J,Y,V,K,U,$,Q,W,X,Z,tt,et,nt,rt,ot,it,at,st,ct,ut,lt,pt,dt,mt,ft=[],ht=function(){window.localStorage.setItem("tasks",JSON.stringify(ft))},bt=function(t){var e=t.name;return{taskIndex:ft.findIndex((function(t){return t.name===e})),taskElement:F.querySelector('[name="'.concat(e,'"]'))}},yt=function(t){return{delete:Array.from(t.shadowRoot.querySelectorAll(".task-button")).find((function(t){return"delete-button"===t.getAttribute("id")}))}},vt=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"end";if("end"!==e&&"start"!==e){var n=bt(e),r=n.taskElement;r.before(t)}else"end"===e?F.append(t):"start"===e&&F.prepend(t);return t},gt=function(t){var e=bt(t).taskElement;return e.remove(),e},kt=function(t,e){var n=e.name,r=e.usedPomodoros,o=e.estimatedPomodoros,i=e.selected,a=e.completed,s=bt(t),c=s.taskIndex,u=s.taskElement;return ft[c]=e,ht(),u.setAttribute("name",n),u.setAttribute("used-pomodoros",r),u.setAttribute("estimated-pomodoros",o),u.setAttribute("selected",i),u.setAttribute("completed",a),e},xt=function(){return ft.find((function(t){return t.selected}))},wt=function(t){var e=xt();e&&kt(e,D(D({},e),{},{selected:!1}));var n=bt(t),r=n.taskElement,o=n.taskIndex;return gt(t),vt(r,"start"),ft.splice(o,1),ft.unshift(t),kt(t,D(D({},t),{},{selected:!0}))},Et=function(t){var e=t.name,n=t.usedPomodoros,r=t.estimatedPomodoros,o=t.selected,i=t.completed,a=S("task-item",{name:e,"used-pomodoros":n,"estimated-pomodoros":r,selected:o}),s=a.shadowRoot.querySelector(".text-container"),c=yt(a).delete;return i||(s.onclick=function(){return wt(t)}),c.onclick=function(){return n=bt(e=t).taskIndex,ft.splice(n,1),window.localStorage.setItem("tasks",JSON.stringify(ft)),void gt(e);var e,n},a},St=function(t){t.preventDefault();var e,n,r,o=H,i=o.name,a=o.pomodoro,s=i.value,c=a.value,u=s.trim(),l=Number(c);Number.isNaN(l)||(i.focus(),n=Et(e={name:u,estimatedPomodoros:l,usedPomodoros:0,selected:!1,completed:!1}),-1!==(r=ft.findIndex((function(t){return t.completed})))?(ft.splice(r,0,e),vt(n,ft[r+1])):(ft.push(e),vt(n)),ht(),Object.values(H).forEach((function(t){t.value=""})))},Lt=function(t){var e=t.target.value.trim();ft.some((function(t){return t.name===e}))?t.target.setCustomValidity("Duplicate task."):t.target.setCustomValidity("")},Ot=function(){return ft.length>0&&!ft[0].completed?wt(ft[0]):null},Ct=function(){ft.forEach((function(t){kt(t,D(D({},t),{},{selected:!1}))}))},Tt=function(t){ft.forEach((function(e){var n=bt(e).taskElement.shadowRoot,r=n.querySelector(".item-container"),o=n.querySelector(".text-container");t?r.classList.remove("disabled"):r.classList.add("disabled"),t&&!e.completed?o.onclick=function(){return wt(e)}:o.onclick=null;var i=yt(bt(e).taskElement);Object.values(i).forEach((function(e){e.disabled=!t}))}))},Nt=function(t){J=t},_t=function(t){J.progress=JSON.stringify(t)},Pt=function(t){Y=t},jt=function(t){Y.time=t},It=n(319),Bt=n.n(It),At=function(){return V.shortBreakLength},Rt=function(){return V.longBreakLength},qt=function(t){V.shortBreakLength=t},Dt=function(t){V.longBreakLength=t},Mt=function(t){V.timerSound=t},Ft=function(){K.classList.add("active"),$.classList.add("active"),Q.value=At(),W.value=Rt(),X.value=V.getAttribute("timerSound")},Gt=function(){K.classList.remove("active"),$.classList.remove("active")},zt=function(t,e){var n,r=function(){var t=window.localStorage.getItem("shortBreakLength"),e=window.localStorage.getItem("longBreakLength");return t||(t=5,window.localStorage.setItem("shortBreakLength",t)),e||(e=15,window.localStorage.setItem("longBreakLength",e)),{shortBreakLength:t,longBreakLength:e}}(),o=r.shortBreakLength,i=r.longBreakLength;n=(V=t).shadowRoot,K=n.querySelector(".popup"),U=n.querySelector(".save-button"),$=n.querySelector("#overlay"),Q=n.querySelector("#short-number"),W=n.querySelector("#long-number"),X=n.querySelector("#sound"),Z=n.querySelectorAll(".error"),qt(o),Dt(i),Mt("assets/calm-alarm.mp3"),$.onclick=Gt,U.addEventListener("click",(function(){var t,n,r,o,i=(t=Q.value,n=W.value,r=O(t),o=C(n),Z[0].style.visibility=r?"hidden":"visible",Z[1].style.visibility=o?"hidden":"visible",r&&o?(Mt(X.value),qt(t),Dt(n),localStorage.setItem("shortBreakLength",t),localStorage.setItem("longBreakLength",n),[t,n]):null);i&&(Gt(),e.apply(void 0,Bt()(i)))})),X.onchange=function(){var t=new Audio(X.value);t.volume=.2,t.play()}},Ht=function(t){et=(tt=t).querySelector(".announcement"),nt=tt.querySelector(".announcement-yes-button"),rt=tt.querySelector(".announcement-no-button"),nt.onmousedown=function(t){return t.preventDefault()},rt.onmousedown=function(t){return t.preventDefault()}},Jt=function(t){et.innerText=t},Yt=function(t){rt.onclick=t},Vt=function(t){"visible"===t?(nt.classList.remove("hidden"),rt.classList.remove("hidden")):(nt.classList.add("hidden"),rt.classList.add("hidden"))},Kt=function(){ot.classList.add("active")},Ut=function(){ot.classList.remove("active")},$t=function(t,e){it=(ot=t).querySelector(".confirmation-popup"),at=it.querySelector(".confirmation-no-button"),st=it.querySelector(".confirmation-yes-button"),at.onmousedown=function(t){return t.preventDefault()},st.onmousedown=function(t){return t.preventDefault()},st.onclick=function(){Ut(),e()},at.onclick=Ut,ot.onclick=Ut,it.onclick=function(t){return t.stopPropagation()}},Qt=function(){ct.classList.remove("active"),lt.innerHTML=""},Wt=function(t,e){var n,r,o;ut=(ct=t).querySelector(".summary-popup"),lt=ct.querySelector(".task-summary-list"),pt=ct.querySelector(".summary-actual-pomos"),dt=ct.querySelector(".summary-estimated-pomos"),mt=ct.querySelector(".summary-close-button"),r=(n=e).filter((function(t){return t.completed})),o=n.filter((function(t){return!t.completed})),[].concat(Bt()(r),Bt()(o)).forEach((function(t){var e=function(t){var e=t.name,n=t.usedPomodoros,r=t.estimatedPomodoros,o=t.completed,i=S("div",{className:"task-summary-item ".concat(o?"completed":"incompleted")}),a=S("span",{className:"task-summary-name",innerText:e}),s=S("span",{className:"task-summary-pomodoros",innerText:"".concat(n,"/").concat(r)});return i.append(a,s),i}(t);lt.append(e)}));var i=e.reduce((function(t,e){return{actual:t.actual+e.usedPomodoros,estimated:t.estimated+e.estimatedPomodoros}}),{actual:0,estimated:0}),a=i.actual,s=i.estimated;pt.innerText="Actual: ".concat(a),dt.innerText="Estimated: ".concat(s),mt.onclick=Qt,mt.onmousedown=function(t){return t.preventDefault()},ct.onclick=Qt,ut.onclick=function(t){return t.stopPropagation()}};customElements.define("timer-component",j),customElements.define("progress-ring",I),customElements.define("task-list",_),customElements.define("settings-component",B);var Xt,Zt,te=!1,ee=function(){var t=o()(a().mark((function t(e){var n,r;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e;case 1:if(!(n>=0)){t.next=12;break}if(te){t.next=4;break}return t.abrupt("return",!1);case 4:return r=100*n/e,jt(n),_t(r),t.next=9,T(1);case 9:n--,t.next=1;break;case 12:return t.abrupt("return",!0);case 13:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),ne=function(){var t=o()(a().mark((function t(n){var r,o,i,s;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=0,o=w,i=null;case 3:if(!te){t.next=32;break}if(o!==w){t.next=23;break}if((i=xt())||(i=Ot()),i){t.next=9;break}return t.abrupt("return",0===r?-1:r);case 9:return 0===r&&n(),Tt(!1),Jt("Focus."),t.next=14,ee(6);case 14:if(t.sent){t.next=17;break}return t.abrupt("return",r);case 17:void 0,u=(c=i).usedPomodoros,i=kt(c,D(D({},c),{},{usedPomodoros:u+1})),r++,o=r>0&&r%4==0?E:"shortBreakInterval",t.next=27;break;case 23:return t.delegateYield(a().mark((function t(){var e,n,s;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return Vt("visible"),Jt("Did you finish the task?"),e=i,n=o===x?x:"Enjoy your short break!",s=!1,a=function(){var t,r,o,i;o=(r=bt(t=e)).taskIndex,i=r.taskElement,gt(t),vt(i,"end"),i.setAttribute("selected",!1),i.setAttribute("completed",!0),i.shadowRoot.querySelector(".text-container").onclick=null,ft.splice(o,1),ft.push(t),kt(t,D(D({},t),{},{selected:!1,completed:!0})),Ot(),Jt(n),Vt("hidden"),s=!0,Tt(!0)},nt.onclick=a,Yt((function(){Jt(n),Vt("hidden"),s=!0})),t.next=9,ee(o===E?60*Zt:60*Xt);case 9:if(t.sent){t.next=12;break}return t.abrupt("return",{v:r});case 12:s||Vt("hidden"),o=w;case 14:case"end":return t.stop()}var a}),t)}))(),"t0",24);case 24:if(s=t.t0,"object"!==e()(s)){t.next=27;break}return t.abrupt("return",s.v);case 27:return _t(100),t.next=30,T(.5);case 30:t.next=3;break;case 32:return t.abrupt("return",r);case 33:case"end":return t.stop()}var c,u}),t)})));return function(e){return t.apply(this,arguments)}}(),re=function(t,e){Jt(-1===e?"No work to be done.":"Good work today!"),Ct(),t.innerText="Start",t.className="session-button",Wt(document.querySelector(".summary-overlay"),ft),ct.classList.add("active")};window.addEventListener("DOMContentLoaded",(function(){var t=document.querySelector(".settings-icon"),e=document.querySelector(".progress-ring"),n=e.shadowRoot.querySelector(".timer"),r=document.querySelector(".session-button"),i=document.querySelector(".announcement-container"),s=document.querySelector(".task-list"),c=document.querySelector(".confirmation-overlay"),u=document.querySelector(".settings");Nt(e),Pt(n),Ht(i),M=s.shadowRoot.querySelector(".container"),F=M.querySelector(".task-item-container"),G=M.querySelector(".task-item-form"),z=G.shadowRoot.querySelector(".task-form"),H={name:z.querySelector("#name-input"),pomodoro:z.querySelector("#pomodoro-input")},z.addEventListener("submit",St),JSON.parse(window.localStorage.getItem("tasks"))||window.localStorage.setItem("tasks",JSON.stringify([])),(ft=JSON.parse(window.localStorage.getItem("tasks"))).forEach((function(t){return vt(Et(t))})),H.name.oninput=Lt,$t(c,(function(){te=!1})),zt(u,(function(t,e){Xt=t,Zt=e}));var l=document.querySelector(".navbar");window.onscroll=function(){0===window.scrollY?l.classList.remove("scrolled"):l.classList.add("scrolled")},Xt=At(),Zt=Rt(),t.onclick=Ft,r.onmousedown=function(t){t.preventDefault()},jt(6),Ct(),r.addEventListener("click",o()(a().mark((function t(){var e,n;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if("Start"!==r.innerText){t.next=13;break}return te=!0,e=function(){r.innerText="End",r.classList.add("session-button","in-session")},t.next=5,ne(e);case 5:n=t.sent,Tt(!0),Vt("hidden"),_t(100),jt(6),re(r,n),t.next=14;break;case 13:Kt();case 14:case"end":return t.stop()}}),t)}))))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,